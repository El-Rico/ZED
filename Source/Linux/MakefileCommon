TARGET := libZED$(ZEDTARGET).a

###### Set based on build type ##############
COMMONDIR ?= ../../../

TARGETDIR = $(COMMONDIR)Lib/$(PLATFORM)
OBJSDIR = $(COMMONDIR)Obj/$(PLATFORM)/$(ZEDTARGET)/$(BUILD)
SOURCEDIR = Source
HEADERSDIR = $(COMMONDIR)Includes$(TARGETSUFFIX)

PLATFORM = Linux32_x86

NOLIB ?= False
COPYHEADERS ?= True

COMMONINCDIR = ../../Common/Headers

CC = g++

CFLAGS_EXT =
ifeq ($(PLATFORM), Linux32_x86)
	CFLAGS_EXT = -ffriend-injection
	BUILDPLATFORM = LINUX32_X86
endif

ifeq ($(PLATFORM), OSX)
	CFLAGS_EXT = -fvisibility-inlines-hidden
endif

ifeq ($(PLATFORM), MinGW)
	CFLAGS_EXT = -DGLEW_STATIC
endif

####### Release Targets #########
release: BUILD = Release
release: TARGET := libZED$(ZEDTARGET).a
release: CFLAGS = -c -O3 $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
release: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
release: copyheaders
endif

####### Debug Targets ############
debug: BUILD = Debug
debug: TARGET := libZED$(ZEDTARGET)D.a
debug: CFLAGS = -c -g -Wall -D_DEBUG $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
debug: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
debug: copyheaders
endif

####### Profile Targets ##########
profile: BUILD = Profile
profile: TARGET := libZED$(ZEDTARGET)P.a
profile: CFLAGS = -c -O3 $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
profile: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
profile: copyheaders
endif

###### Build the object files while not in the Obj directory ##################
ifneq ($(OBJSDIR), $(notdir $(CURDIR)))

ifeq ($(PLATFORM), Linux32_x86)
	SYSIPATH = -I/usr/include/xorg
else
	SYSIPATH =
endif

#$(OBJSDIR):
#	-mkdir -p $(OBJSDIR)
#	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile
$(TARGETDIR):
	-mkdir -p $(TARGETDIR)

CPPFILES	:=	$(foreach dir,$(SOURCEDIR),$(notdir $(wildcard $(dir)/*.cpp)))

#####################
OBJS = $(CPPFILES:.cpp=.o)
# $(patsubst %.cpp,%.o,$(wildcard *.cpp ))
HEADERS = $(wildcard *.hpp)
#####################

ifneq ($(NOLIB), True)

$(TARGET): $(OBJS) $(TARGETDIR)
	cd $(OBJSDIR) && ar rc ../$(TARGETDIR)/$(TARGET) $(OBJS)
	ranlib $(TARGETDIR)/$(TARGET)
	
#$(OBJSDIR):
#	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile
	
%.o: $(SOURCEDIR)/%.cpp
	-mkdir -p $(OBJSDIR)
	$(CC) $(CFLAGS) -DZED_PLATFORM_$(BUILDPLATFORM) -I$(COMMONINCDIR) $(ZEDINCDIR) \
	$(SYSIPATH) $< -o $(OBJSDIR)/$@

endif

#####################
ifeq ($(COPYHEADERS), True)
.PHONY: copyheaders
endif
#####################
copyheaders:
	mkdir -p $(ZEDPATH)/include/Linux32_x86
	mkdir -p $(ZEDPATH)/lib/Linux32_x86
#	cp -f $(ZEDINCDIR)/*.hpp $(HEADERSDIR)
	cp -f $(COMMONINCDIR)/*.hpp $(ZEDPATH)/include/Linux32_x86/
	cp -f $(TARGETDIR)/*.a $(ZEDPATH)/lib/Linux32_x86/

.PHONY: clean
clean:
	-cd $(OBJSDIR)Release && rm -f $(OBJS)
	-cd $(TARGETDIR) && rm -f $(TARGET)
	-cd $(OBJSDIR)Debug && rm -f $(OBJS)
	-cd $(TARGETDIR) && rm -f $(TARGET)
	-cd $(OBJSDIR)Profile && rm -f $(OBJS)
	-cd $(TARGETDIR) && rm -f $(TARGET)
#	cd $(COMMONDIR)Lib/$(PLATFORM)/Release && rm -f $(OBJS)
#	cd .. && cd Lib && cd $(PLATFORM)/Release && rm -f $(TARGET)
#	cd $(PLATFORM)/Debug && rm -f $(OBJS)
#	cd .. && cd Lib && cd $PLATFORM)/Debug && rm -f $(TARGET)
#	cd $(PLATFORM)/Profile && rm -f $(OBJS)
#	cd .. && cd Lib && cd $PLATFORM)/Profile && rm -f $(TARGET)
#	cd .. && cd Includes && rm -f $(HEADERSDIR)
else
DEPENDS	:=	$(OFILES:.o=.d)

-include $(DEPENDS)
endif
