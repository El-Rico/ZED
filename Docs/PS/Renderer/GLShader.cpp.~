%!PS-Adobe-3.0
%%Title: GLShader.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:21:43 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <GLShader.hpp>) p n
(2) # () S
(#include) K
( <cstdio>) p n
(3) # () S
(#include) K
( <cstring>) p n
(4) # () S
(#include) K
( <GLExtender.hpp>) p n
(5) # () N
(6) # () S
(namespace) K
( ZED) p n
(7) # ({) N
(8) # () S 4 T () S
(namespace) K
( Renderer) p n
(9) # () S 4 T ({) N
(10) # () S 4 T () S 8 T (GLShader::GLShader\( \)) N
(11) # () S 4 T () S 8 T ({) N
(12) # () S 4 T () S 8 T () S 12 T (m_Flags = 0;) N
(13) # () S 4 T () S 8 T (}) N
(14) # () N
(15) # () S 4 T () S 8 T (GLShader::GLShader\( ) S
(const) K
( ZED_BOOL p_Vertex, ) p
(const) K
( ZED_BOOL p_Fragment,) p n
(16) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_Geometry \)) p n
(17) # () S 4 T () S 8 T ({) N
(18) # () S 4 T () S 8 T () S 12 T (m_Flags = 0;) N
(19) # () S 4 T () S 8 T (}) N
(20) # () N
(21) # () S 4 T () S 8 T (ZED_UINT32 GLShader::Compile\( ) S
(const) K
( ZED_CHAR8 **p_ppData,) p n
(22) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_SHADER_TYPE p_Type,) p n
(23) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_FromFile \)) p n
(24) # () S 4 T () S 8 T ({) N
(25) # () S 4 T () S 8 T () S 12 T () S
(// Ignores loading from file and does it by default) c n
(26) # () S
() p 4 T () S 8 T () S 12 T () S
(FILE) k
( *pFile = fopen\( *p_ppData, ") p
(rb) str
(" \);) p n
(27) # () S 4 T () S 8 T () S 12 T (GLint CompileStatus = 0;) N
(28) # () N
(29) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Compile] <INFO> ) str
(") p n
(30) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(File: %s\\n) str
(", *p_ppData \);) p n
(31) # () N
(32) # () S 4 T () S 8 T () S 12 T () S
(// Read the source from the file) c n
(33) # () S
() p 4 T () S 8 T () S 12 T (ZED_MEMSIZE FileSize = 0;) N
(34) # () N
(35) # () S 4 T () S 8 T () S 12 T (fseek\( pFile, 0, SEEK_END \);) N
(36) # () S 4 T () S 8 T () S 12 T (FileSize = ftell\( pFile \);) N
(37) # () S 4 T () S 8 T () S 12 T (rewind\( pFile \);) N
(38) # () N
(39) # () S 4 T () S 8 T () S 12 T (GLchar **ppSource = ) S
(new) K
( GLchar*[ 1 ];) p n
(40) # () S 4 T () S 8 T () S 12 T (ppSource[ 0 ] = ) S
(new) K
( GLchar[ FileSize ];) p n
(41) # () N
(42) # () S 4 T () S 8 T () S 12 T (fread\( ppSource[ 0 ], ) S
(sizeof) K
(\( ZED_BYTE \), FileSize, pFile \);) p n
(43) # () N
(44) # () S 4 T () S 8 T () S 12 T () S
(// Print the source) c n
(45) # () S
() p 4 T () S 8 T () S 12 T () S
(char) k
( PrintSource[ FileSize ];) p n
(46) # () S 4 T () S 8 T () S 12 T (strncpy\( PrintSource, ppSource[ 0 ], FileSize \);) N
(47) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Compile] <INFO> ) str
(") p n
(48) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Size: %d | Source:\\n%s\\n) str
(", FileSize, PrintSource \);) p n
(49) # () N
(50) # () S 4 T () S 8 T () S 12 T () S
(// Depending on the type of shader, bind with vertex, fragment, or) c n
(51) # () S
() p 4 T () S 8 T () S 12 T () S
(// geometry) c n
(52) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Type == ZED_VERTEX_SHADER \)) p n
(53) # () S 4 T () S 8 T () S 12 T ({) N
(54) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Check for a valid vertex shader) c n
(55) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !zglIsShader\( m_VertexID \) \)) p n
(56) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(57) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Okay, create a shader) c n
(58) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(this) K
(->AddType\( p_Type \);) p n
(59) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(60) # () N
(61) # () S 4 T () S 8 T () S 12 T () S 16 T (zglShaderSource\( m_VertexID, 1,) N
(62) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(const_cast) k
(< ) p
(const) K
( GLchar ** >\( ppSource \),) p n
(63) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(reinterpret_cast) k
(< ) p
(const) K
( GLint *>\( &FileSize \) \);) p n
(64) # () S 4 T () S 8 T () S 12 T () S 16 T (zglCompileShader\( m_VertexID \);) N
(65) # () N
(66) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the compilation status) c n
(67) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglGetShaderiv\( m_VertexID, GL_COMPILE_STATUS,) N
(68) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (&CompileStatus \);) N
(69) # () N
([ ZED::Renderer::GLShader.cpp ]) (Page 1/6) (Dec 21, 11 0:20) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !CompileStatus \)) p n
(71) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(72) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Something went wrong) c n
(73) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLint LogLength = 0;) N
(74) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLchar *pLog = ZED_NULL;) N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetShaderiv\( m_VertexID, GL_INFO_LOG_LENGTH,) N
(76) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (&LogLength \);) N
(77) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pLog = ) S
(new) K
( GLchar[ LogLength ];) p n
(78) # () N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetShaderInfoLog\( m_VertexID, LogLength, &LogLength,) N
(80) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (pLog \);) N
(81) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Compile] <ERROR> ) str
(") p n
(82) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(Vertex Shader Log:\\n\\t%s\\n) str
(", pLog \);) p n
(83) # () N
(84) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(delete) K
( [ ] pLog;) p n
(85) # () N
(86) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fclose\( pFile \);) N
(87) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pFile = ZED_NULL;) N
(88) # () N
(89) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( ppSource[ 0 ] != ZED_NULL \)) p n
(90) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( [ ] ppSource[ 0 ];) p n
(92) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( [ ] ppSource;) p n
(93) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(94) # () N
(95) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(96) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(97) # () S 4 T () S 8 T () S 12 T (}) N
(98) # () N
(99) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Type == ZED_FRAGMENT_SHADER \)) p n
(100) # () S 4 T () S 8 T () S 12 T ({) N
(101) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Check for a valid fragment shader) c n
(102) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !zglIsShader\( m_FragmentID \) \)) p n
(103) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(104) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Create a shader ID) c n
(105) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(this) K
(->AddType\( p_Type \);) p n
(106) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(107) # () N
(108) # () S 4 T () S 8 T () S 12 T () S 16 T (zglShaderSource\( m_FragmentID, 1,) N
(109) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(const_cast) k
(< ) p
(const) K
( GLchar ** >\( ppSource \),) p n
(110) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(reinterpret_cast) k
(< ) p
(const) K
( GLint *>\( &FileSize \) \);) p n
(111) # () S 4 T () S 8 T () S 12 T () S 16 T (zglCompileShader\( m_FragmentID \);) N
(112) # () N
(113) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the compilation status) c n
(114) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglGetShaderiv\( m_FragmentID, GL_COMPILE_STATUS,) N
(115) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (&CompileStatus \);) N
(116) # () N
(117) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !CompileStatus \)) p n
(118) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(119) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Somthing went wrong) c n
(120) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLint LogLength = 0;) N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLchar *pLog = ZED_NULL;) N
(122) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetShaderiv\( m_FragmentID, GL_INFO_LOG_LENGTH,) N
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (&LogLength \);) N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pLog = ) S
(new) K
( GLchar[ LogLength ];) p n
(125) # () N
(126) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetShaderInfoLog\( m_FragmentID, LogLength, &LogLength,) N
(127) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (pLog \);) N
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Compile] <ERROR> ) str
(") p n
(129) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(Fragment Shader Log:\\n\\t%s\\n) str
(", pLog \);) p n
(130) # () N
(131) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(delete) K
( [ ] pLog;) p n
(132) # () N
(133) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fclose\( pFile \);) N
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pFile = ZED_NULL;) N
(135) # () N
(136) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( ppSource[ 0 ] != ZED_NULL \)) p n
(137) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( [ ] ppSource[ 0 ];) p n
([ ZED::Renderer::GLShader.cpp ]) (Page 2/6) (Dec 21, 11 0:20) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( [ ] ppSource;) p n
(140) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(141) # () N
(142) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(144) # () S 4 T () S 8 T () S 12 T (}) N
(145) # () N
(146) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( ppSource[ 0 ] != ZED_NULL \)) p n
(147) # () S 4 T () S 8 T () S 12 T ({) N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] ppSource[ 0 ];) p n
(149) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] ppSource;) p n
(150) # () S 4 T () S 8 T () S 12 T (}) N
(151) # () N
(152) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( pFile != ZED_NULL \)) p n
(153) # () S 4 T () S 8 T () S 12 T ({) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T (fclose\( pFile \);) N
(155) # () S 4 T () S 8 T () S 12 T (}) N
(156) # () N
(157) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(158) # () S 4 T () S 8 T (}) N
(159) # () N
(160) # () S 4 T () S 8 T (ZED_UINT32 GLShader::Create\( ) S
(const) K
( ZED_UCHAR8 *p_pData,) p n
(161) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_SHADER_TYPE p_Type,) p n
(162) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_FromFile \)) p n
(163) # () S 4 T () S 8 T ({) N
(164) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(165) # () S 4 T () S 8 T (}) N
(166) # () N
(167) # () S 4 T () S 8 T (ZED_UINT32 GLShader::Activate\( \)) N
(168) # () S 4 T () S 8 T ({) N
(169) # () S 4 T () S 8 T () S 12 T () S
(// Check if the program has not already been linked) c n
(170) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( !\( m_Flags && 0x3 \) \)) p n
(171) # () S 4 T () S 8 T () S 12 T ({) S 16 T () N
(172) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ProgramID = zglCreateProgram\( \);) N
(173) # () N
(174) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_ProgramID == 0 \)) p n
(175) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(176) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Activate] <ERROR> ) str
(") p n
(177) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(Failed to create program for shader.\\n) str
(" \);) p n
(178) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(179) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(180) # () N
(181) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Attach shaders) c n
(182) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( zglIsShader\( m_VertexID \) \)) p n
(183) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(184) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglAttachShader\( m_ProgramID, m_VertexID \);) N
(185) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(186) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( zglIsShader\( m_FragmentID \) \)) p n
(187) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglAttachShader\( m_ProgramID, m_FragmentID \);) N
(189) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(190) # () N
(191) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 0, ") S
(Position) str
(" \);) p n
(192) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 1, ") S
(Normal) str
(" \);) p n
(193) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 2, ") S
(UV) str
(" \);) p n
(194) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindFragDataLocation\( m_ProgramID, 0, ") S
(FragColour) str
(" \);) p n
(195) # () N
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Link the program) c n
(197) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglLinkProgram\( m_ProgramID \);) N
(198) # () N
(199) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the link status) c n
(200) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (GLint Error;) N
(201) # () S 4 T () S 8 T () S 12 T () S 16 T (zglGetProgramiv\( m_ProgramID, GL_LINK_STATUS, &Error \);) N
(202) # () N
(203) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( Error == GL_FALSE \)) p n
(204) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(205) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::SetUniformTypes] ) str
(") p n
(206) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(<ERROR> Failed to link program\\n) str
(" \);) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLsizei Length = 0;) N
([ ZED::Renderer::GLShader.cpp ]) (Page 3/6) (Dec 21, 11 0:20) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLchar *pLog;) N
(209) # () N
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetProgramiv\( m_ProgramID, GL_INFO_LOG_LENGTH,) N
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (&Length \);) N
(212) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pLog = ) S
(new) K
( GLchar[ Length ];) p n
(213) # () N
(214) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetProgramInfoLog\( m_ProgramID, Length, &Length, pLog \);) N
(215) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
(%s\\n) str
(", pLog \);) p n
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedAssert\( ZED_FALSE \);) N
(217) # () N
(218) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(delete) K
( pLog;) p n
(219) # () N
(220) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_FAIL;) p n
(221) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(222) # () N
(223) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Link the program) c n
(224) # () S
() p 4 T () S 8 T () S 12 T () S
(//) c 16 T (zglLinkProgram\( m_ProgramID \);) N
(225) # () N
(226) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// Set the linked flag) c n
(227) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (m_Flags |= 0x3;) N
(228) # () S 4 T () S 8 T () S 12 T (}) N
(229) # () N
(230) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( zglIsProgram\( m_ProgramID \) \)) p n
(231) # () S 4 T () S 8 T () S 12 T ({) N
(232) # () S 4 T () S 8 T () S 12 T () S 16 T (zglUseProgram\( m_ProgramID \);) N
(233) # () S 4 T () S 8 T () S 12 T (}) N
(234) # () N
(235) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(236) # () S 4 T () S 8 T (}) N
(237) # () N
(238) # () S 4 T () S 8 T () S
(void) k
( GLShader::Deactivate\( \)) p n
(239) # () S 4 T () S 8 T ({) N
(240) # () S 4 T () S 8 T (}) N
(241) # () N
(242) # () S 4 T () S 8 T () S
(void) k
( GLShader::AddType\( ) p
(const) K
( ZED_SHADER_TYPE p_Type \)) p n
(243) # () S 4 T () S 8 T ({) N
(244) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Type == ZED_VERTEX_SHADER \)) p n
(245) # () S 4 T () S 8 T () S 12 T ({) N
(246) # () S 4 T () S 8 T () S 12 T () S 16 T (m_VertexID = zglCreateShader\( GL_VERTEX_SHADER \);) N
(247) # () S 4 T () S 8 T () S 12 T (}) N
(248) # () S 4 T () S 8 T () S 12 T () S
(else) K
( ) p
(if) K
(\( p_Type == ZED_FRAGMENT_SHADER \)) p n
(249) # () S 4 T () S 8 T () S 12 T ({) N
(250) # () S 4 T () S 8 T () S 12 T () S 16 T (m_FragmentID = zglCreateShader\( GL_FRAGMENT_SHADER \);) N
(251) # () S 4 T () S 8 T () S 12 T (}) N
(252) # () S 4 T () S 8 T (}) N
(253) # () N
(254) # () S 4 T () S 8 T () S
(void) k
( GLShader::Delete\( \)) p n
(255) # () S 4 T () S 8 T ({) N
(256) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pUniformMap != ZED_NULL \)) p n
(257) # () S 4 T () S 8 T () S 12 T ({) N
(258) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pUniformMap;) p n
(259) # () S 4 T () S 8 T () S 12 T (}) N
(260) # () N
(261) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_VertexID != 0 \)) p n
(262) # () S 4 T () S 8 T () S 12 T ({) N
(263) # () S 4 T () S 8 T () S 12 T () S 16 T (zglDeleteShader\( m_VertexID \);) N
(264) # () S 4 T () S 8 T () S 12 T (}) N
(265) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_FragmentID != 0 \)) p n
(266) # () S 4 T () S 8 T () S 12 T ({) N
(267) # () S 4 T () S 8 T () S 12 T () S 16 T (zglDeleteShader\( m_FragmentID \);) N
(268) # () S 4 T () S 8 T () S 12 T (}) N
(269) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GeometryID != 0 \)) p n
(270) # () S 4 T () S 8 T () S 12 T ({) N
(271) # () S 4 T () S 8 T () S 12 T () S 16 T (zglDeleteShader\( m_GeometryID \);) N
(272) # () S 4 T () S 8 T () S 12 T (}) N
(273) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_ProgramID != 0 \)) p n
(274) # () S 4 T () S 8 T () S 12 T ({) N
(275) # () S 4 T () S 8 T () S 12 T () S 16 T (zglDeleteProgram\( m_ProgramID \);) N
(276) # () S 4 T () S 8 T () S 12 T (}) N
([ ZED::Renderer::GLShader.cpp ]) (Page 4/6) (Dec 21, 11 0:20) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(277) # () p 4 T () S 8 T (}) N
(278) # () N
(279) # () S 4 T () S 8 T (ZED_UINT32 GLShader::Save\( ) S
(const) K
( ZED_UCHAR8 *p_pFile,) p n
(280) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_HLSL \)) p n
(281) # () S 4 T () S 8 T ({) N
(282) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(283) # () S 4 T () S 8 T (}) N
(284) # () N
(285) # () S 4 T () S 8 T (ZED_UINT32 GLShader::SetVertexAttributeTypes\() N
(286) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_SHADER_VA_MAP *p_pVAMap, ) p
(const) K
( ZED_MEMSIZE p_Count \)) p n
(287) # () S 4 T () S 8 T ({) N
(288) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(289) # () S 4 T () S 8 T (}) N
(290) # () N
(291) # () S 4 T () S 8 T (ZED_UINT32 GLShader::SetUniformTypes\() N
(292) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_SHADER_UNIFORM_MAP *p_pUniforms,) p n
(293) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_Count \)) p n
(294) # () S 4 T () S 8 T ({) N
(295) # () S 4 T () S 8 T () S 12 T () S
(// The program has to already be linked before calling!) c n
(296) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( !\( m_Flags && 0x3 \) \)) p n
(297) # () S 4 T () S 8 T () S 12 T ({) N
(298) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ProgramID = zglCreateProgram\( \);) N
(299) # () N
(300) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_ProgramID == 0 \)) p n
(301) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::Activate] <ERROR> ) str
(") p n
(303) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(Failed to create program for shader.\\n) str
(" \);) p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(305) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(306) # () N
(307) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Attach shaders) c n
(308) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( zglIsShader\( m_VertexID \) \)) p n
(309) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(310) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglAttachShader\( m_ProgramID, m_VertexID \);) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(312) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( zglIsShader\( m_FragmentID \) \)) p n
(313) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(314) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglAttachShader\( m_ProgramID, m_FragmentID \);) N
(315) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(316) # () N
(317) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 0, ") S
(Position) str
(" \);) p n
(318) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 1, ") S
(Normal) str
(" \);) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindAttribLocation\( m_ProgramID, 2, ") S
(UV) str
(" \);) p n
(320) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindFragDataLocation\( m_ProgramID, 0, ") S
(FragColour) str
(" \);) p n
(321) # () N
(322) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Link the program) c n
(323) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglLinkProgram\( m_ProgramID \);) N
(324) # () N
(325) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the link status) c n
(326) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (GLint Error;) N
(327) # () S 4 T () S 8 T () S 12 T () S 16 T (zglGetProgramiv\( m_ProgramID, GL_LINK_STATUS, &Error \);) N
(328) # () N
(329) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( Error == GL_FALSE \)) p n
(330) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(331) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLShader::SetUniformTypes] ) str
(") p n
(332) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(<ERROR> Failed to link program\\n) str
(" \);) p n
(333) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLsizei Length = 0;) N
(334) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GLchar *pLog;) N
(335) # () N
(336) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetProgramiv\( m_ProgramID, GL_INFO_LOG_LENGTH,) N
(337) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (&Length \);) N
(338) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pLog = ) S
(new) K
( GLchar[ Length ];) p n
(339) # () N
(340) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglGetProgramInfoLog\( m_ProgramID, Length, &Length, pLog \);) N
(341) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
(%s\\n) str
(", pLog \);) p n
(342) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedAssert\( ZED_FALSE \);) N
(343) # () N
(344) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(delete) K
( pLog;) p n
(345) # () N
([ ZED::Renderer::GLShader.cpp ]) (Page 5/6) (Dec 21, 11 0:20) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(346) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_FAIL;) p n
(347) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(348) # () N
(349) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Set the linked flag) c n
(350) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (m_Flags |= 0x3;) N
(351) # () S 4 T () S 8 T () S 12 T (}) N
(352) # () N
(353) # () S 4 T () S 8 T () S 12 T (m_pUniformMap = ) S
(new) K
( ZED_SHADER_UNIFORM_MAP[ p_Count ];) p n
(354) # () N
(355) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < p_Count; i++ \)) p n
(356) # () S 4 T () S 8 T () S 12 T ({) N
(357) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pUniformMap[ i ].Location = zglGetUniformLocation\() N
(358) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_ProgramID, p_pUniforms[ i ].pName \);) N
(359) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pUniformMap[ i ].Index = p_pUniforms[ i ].Index;) N
(360) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pUniformMap[ i ].Type = p_pUniforms[ i ].Type;) N
(361) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(362) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pUniformMap[ i ].pName = p_pUniforms[ i ].pName;) N
(363) # () S
(#endif) K n
(364) # () S
() p 4 T () S 8 T () S 12 T (}) S 16 T () N
(365) # () N
(366) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(367) # () S 4 T () S 8 T (}) N
(368) # () N
(369) # () S 4 T () S 8 T (ZED_UINT32 GLShader::SetVariable\( ) S
(const) K
( ZED_UINT32 p_Index,) p n
(370) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ) p
(void) k
( *p_pValue \)) p n
(371) # () S 4 T () S 8 T ({) N
(372) # () S 4 T () S 8 T () S 12 T () S
(switch) K
(\( m_pUniformMap[ p_Index ].Type \)) p n
(373) # () S 4 T () S 8 T () S 12 T ({) N
(374) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_FLOAT1:) p n
(375) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(376) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglUniform1f\( m_pUniformMap[ p_Index ].Location,) N
(377) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (*\( ) S
(reinterpret_cast) k
(< ) p
(const) K
( GLfloat * >\( &p_pValue \) \) \);) p n
(378) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(379) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(380) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_FLOAT3:) p n
(381) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(382) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglUniform3fv\( m_pUniformMap[ p_Index ].Location, 1,) N
(383) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(static_cast) k
(< ) p
(const) K
( GLfloat * >\( p_pValue \) \);) p n
(384) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(385) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(386) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_INT1:) p n
(387) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(388) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglUniform1i\( m_pUniformMap[ p_Index ].Location,) N
(389) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (*\( ) S
(reinterpret_cast) k
(< ) p
(const) K
( GLint * >\( &p_pValue \) \) \);) p n
(390) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(391) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(392) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_MAT4X4:) p n
(393) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(394) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zglUniformMatrix4fv\( m_pUniformMap[ p_Index ].Location, 1,) N
(395) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (ZED_FALSE,) N
(396) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(static_cast) k
(< ) p
(const) K
( GLfloat * >\( p_pValue \) \);) p n
(397) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(398) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(399) # () S 4 T () S 8 T () S 12 T (}) N
(400) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(401) # () S 4 T () S 8 T (}) N
(402) # () S 4 T (}) N
(403) # (}) N
(404) # () N
([ ZED::Renderer::GLShader.cpp ]) (Page 6/6) (Dec 21, 11 0:20) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
