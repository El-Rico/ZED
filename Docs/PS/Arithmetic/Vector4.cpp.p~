%!PS-Adobe-3.0
%%Title: Vector4.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:21:42 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <Arithmetic.hpp>) p n
(2) # () S
(#include) K
( <Vector4.hpp>) p n
(3) # () N
(4) # () S
(namespace) K
( ZED) p n
(5) # ({) N
(6) # () S 4 T () S
(namespace) K
( Arithmetic) p n
(7) # () S 4 T ({) N
(8) # () S 4 T () S 8 T () S
(void) k
( Vector4::Normalise\( \)) p n
(9) # () S 4 T () S 8 T ({) N
(10) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 LengthSq = m_X*m_X + m_Y*m_Y + m_Z*m_Z + m_W*m_W;) N
(11) # () N
(12) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( LengthSq \) \)) p n
(13) # () S 4 T () S 8 T () S 12 T ({) N
(14) # () S 4 T () S 8 T () S 12 T () S 16 T (Zero\( \);) N
(15) # () S 4 T () S 8 T () S 12 T (}) N
(16) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(17) # () S
() p 4 T () S 8 T () S 12 T ({) N
(18) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_FLOAT32 Factor = Arithmetic::InvSquareRoot\( LengthSq \);) N
(19) # () N
(20) # () S 4 T () S 8 T () S 12 T () S 16 T (m_X *= Factor;) N
(21) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Y *= Factor;) N
(22) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Z *= Factor;) N
(23) # () S 4 T () S 8 T () S 12 T () S 16 T (m_W *= Factor;) N
(24) # () S 4 T () S 8 T () S 12 T (}) N
(25) # () S 4 T () S 8 T (}) N
(26) # () N
(27) # () S 4 T () S 8 T (ZED_FLOAT32 Vector4::Magnitude\( \) ) S
(const) K n
(28) # () S
() p 4 T () S 8 T ({) N
(29) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Arithmetic::SquareRoot\( m_X*m_X + m_Y*m_Y + m_Z*m_Z +) p n
(30) # () S 4 T () S 8 T () S 12 T () S 16 T (m_W*m_W \);) N
(31) # () S 4 T () S 8 T (}) N
(32) # () N
(33) # () S 4 T () S 8 T (ZED_FLOAT32 Vector4::MagnitudeSq\( \) ) S
(const) K n
(34) # () S
() p 4 T () S 8 T ({) N
(35) # () S 4 T () S 8 T () S 12 T () S
(return) K
( \( m_X*m_X + m_Y*m_Y + m_Z*m_Z + m_W*m_W \);) p n
(36) # () S 4 T () S 8 T (}) N
(37) # () N
(38) # () S 4 T () S 8 T (ZED_FLOAT32 Vector4::Distance\( ) S
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(39) # () S
() p 4 T () S 8 T ({) N
(40) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 X = m_X - p_Other[ 0 ];) N
(41) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Y = m_Y - p_Other[ 1 ];) N
(42) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Z = m_Z - p_Other[ 2 ];) N
(43) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 W = m_W - p_Other[ 3 ];) N
(44) # () N
(45) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Arithmetic::InvSquareRoot\( X*X + Y*Y + Z*Z + W*W \);) p n
(46) # () S 4 T () S 8 T (}) N
(47) # () N
(48) # () S 4 T () S 8 T (ZED_FLOAT32 Vector4::DistanceSq\( ) S
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(49) # () S
() p 4 T () S 8 T ({) N
(50) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 X = m_X - p_Other[ 0 ];) N
(51) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Y = m_Y - p_Other[ 1 ];) N
(52) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Z = m_Z - p_Other[ 2 ];) N
(53) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 W = m_W - p_Other[ 3 ];) N
(54) # () N
(55) # () S 4 T () S 8 T () S 12 T () S
(return) K
( \( X*X + Y*Y + Z*Z + W*W \);) p n
(56) # () S 4 T () S 8 T (}) N
(57) # () N
(58) # () S 4 T () S 8 T () S
(void) k
( Vector4::Clean\( \)) p n
(59) # () S 4 T () S 8 T ({) N
(60) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( m_X \) \)) p n
(61) # () S 4 T () S 8 T () S 12 T ({) N
(62) # () S 4 T () S 8 T () S 12 T () S 16 T (m_X = 0.0f;) N
(63) # () S 4 T () S 8 T () S 12 T (}) N
(64) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( m_Y \) \)) p n
(65) # () S 4 T () S 8 T () S 12 T ({) N
(66) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Y = 0.0f;) N
(67) # () S 4 T () S 8 T () S 12 T (}) N
(68) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( m_Z \) \)) p n
(69) # () S 4 T () S 8 T () S 12 T ({) N
([ ZED::Arithmetic::Vector4.cpp ]) (Page 1/4) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T () S 16 T (m_Z = 0.0f;) N
(71) # () S 4 T () S 8 T () S 12 T (}) N
(72) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( m_W \) \)) p n
(73) # () S 4 T () S 8 T () S 12 T ({) N
(74) # () S 4 T () S 8 T () S 12 T () S 16 T (m_W = 0.0f;) N
(75) # () S 4 T () S 8 T () S 12 T (}) N
(76) # () S 4 T () S 8 T (}) N
(77) # () N
(78) # () S 4 T () S 8 T (ZED_FLOAT32 Vector4::Dot\( ) S
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(79) # () S
() p 4 T () S 8 T ({) N
(80) # () S 4 T () S 8 T () S 12 T () S
(return) K
( \( m_X*p_Other[ 0 ] + m_Y*p_Other[ 1 ] + m_Z*p_Other[ 2 ],) p n
(81) # () S 4 T () S 8 T () S 12 T () S 16 T (m_W*p_Other[ 3 ] \);) N
(82) # () S 4 T () S 8 T (}) N
(83) # () N
(84) # () S 4 T () S 8 T (System::Writer &) S
(operator) K
(<<\( System::Writer &p_Out,) p n
(85) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Vector4 &p_Source \)) p n
(86) # () S 4 T () S 8 T ({) N
(87) # () S 4 T () S 8 T () S 12 T (p_Out << ") S
(< ) str
(" << p_Source[ 0 ] << ") p
( ) str
(" << p_Source[ 1 ] <<) p n
(88) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
( ) str
(" << p_Source[ 2 ] << ") p
( ) str
(" << p_Source[ 3 ] << ") p
( >) str
(" <<) p n
(89) # () S 4 T () S 8 T () S 12 T () S 16 T (std::endl;) N
(90) # () S 4 T () S 8 T () S 12 T () N
(91) # () S 4 T () S 8 T () S 12 T () S
(return) K
( p_Out;) p n
(92) # () S 4 T () S 8 T (}) N
(93) # () N
(94) # () S 4 T () S 8 T (ZED_BOOL Vector4::) S
(operator) K
(==\( ) p
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(95) # () S
() p 4 T () S 8 T ({) N
(96) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::Equal\( m_X, p_Other[ 0 ] \) &&) p n
(97) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_Y, p_Other[ 1 ] \) &&) N
(98) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_Z, p_Other[ 2 ] \) &&) N
(99) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_W, p_Other[ 3 ] \) \)) N
(100) # () S 4 T () S 8 T () S 12 T ({) N
(101) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_TRUE;) p n
(102) # () S 4 T () S 8 T () S 12 T (}) N
(103) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_FALSE;) p n
(104) # () S 4 T () S 8 T (}) N
(105) # () N
(106) # () S 4 T () S 8 T (ZED_BOOL Vector4::) S
(operator) K
(!=\( ) p
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(107) # () S
() p 4 T () S 8 T ({) N
(108) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::Equal\( m_X, p_Other[ 0 ] \) &&) p n
(109) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_Y, p_Other[ 1 ] \) &&) N
(110) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_Z, p_Other[ 2 ] \) &&) N
(111) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_W, p_Other[ 3 ] \) \)) N
(112) # () S 4 T () S 8 T () S 12 T ({) N
(113) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FALSE;) p n
(114) # () S 4 T () S 8 T () S 12 T (}) N
(115) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_TRUE;) p n
(116) # () S 4 T () S 8 T (}) N
(117) # () N
(118) # () S 4 T () S 8 T (Vector4 Vector4::) S
(operator) K
(+\( ) p
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(119) # () S
() p 4 T () S 8 T ({) N
(120) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( m_X+p_Other[ 0 ], m_Y+p_Other[ 1 ],) p n
(121) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Z+p_Other[ 2 ], m_W+p_Other[ 3 ] \);) N
(122) # () S 4 T () S 8 T (}) N
(123) # () N
(124) # () S 4 T () S 8 T (Vector4 Vector4::) S
(operator) K
(-\( ) p
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(125) # () S
() p 4 T () S 8 T ({) N
(126) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( m_X-p_Other[ 0 ], m_Y-p_Other[ 1 ],) p n
(127) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Z-p_Other[ 2 ], m_W-p_Other[ 3 ] \);) N
(128) # () S 4 T () S 8 T (}) N
(129) # () N
(130) # () S 4 T () S 8 T (Vector4 Vector4::) S
(operator) K
(*\( ) p
(const) K
( Vector4 &p_Other \) ) p
(const) K n
(131) # () S
() p 4 T () S 8 T ({) N
(132) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( m_X*p_Other[ 0 ], m_Y*p_Other[ 1 ],) p n
(133) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Z*p_Other[ 2 ], m_W*p_Other[ 3 ] \);) N
(134) # () S 4 T () S 8 T (}) N
(135) # () N
(136) # () S 4 T () S 8 T (Vector4 Vector4::) S
(operator) K
(*\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \) ) p
(const) K n
(137) # () S
() p 4 T () S 8 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( m_X*p_Scalar, m_Y*p_Scalar, m_Z*p_Scalar,) p n
([ ZED::Arithmetic::Vector4.cpp ]) (Page 2/4) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T () S 16 T (m_W*p_Scalar \);) N
(140) # () S 4 T () S 8 T (}) N
(141) # () N
(142) # () S 4 T () S 8 T (Vector4 ) S
(operator) K
(*\( ) p
(const) K
( ZED_FLOAT32 p_Scalar, ) p
(const) K
( Vector4 &p_Self \)) p n
(143) # () S 4 T () S 8 T ({) N
(144) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( p_Scalar*p_Self[ 0 ], p_Scalar*p_Self[ 1 ],) p n
(145) # () S 4 T () S 8 T () S 12 T () S 16 T (p_Scalar*p_Self[ 2 ], p_Scalar*p_Self[ 3 ] \);) N
(146) # () S 4 T () S 8 T (}) N
(147) # () N
(148) # () S 4 T () S 8 T (Vector4 Vector4::) S
(operator) K
(/\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \) ) p
(const) K n
(149) # () S
() p 4 T () S 8 T ({) N
(150) # () S 4 T () S 8 T () S 12 T () S
(// No divide by zero check!) c n
(151) # () S
() p 4 T () S 8 T () S 12 T () S
(return) K
( Vector4\( m_X/p_Scalar, m_Y/p_Scalar, m_Z/p_Scalar,) p n
(152) # () S 4 T () S 8 T () S 12 T () S 16 T (m_W/p_Scalar \);) N
(153) # () S 4 T () S 8 T (}) N
(154) # () N
(155) # () S 4 T () S 8 T (Vector4 &Vector4::) S
(operator) K
(+=\( ) p
(const) K
( Vector4 &p_Other \)) p n
(156) # () S 4 T () S 8 T ({) N
(157) # () S 4 T () S 8 T () S 12 T (m_X += p_Other[ 0 ];) N
(158) # () S 4 T () S 8 T () S 12 T (m_Y += p_Other[ 1 ];) N
(159) # () S 4 T () S 8 T () S 12 T (m_Z += p_Other[ 2 ];) N
(160) # () S 4 T () S 8 T () S 12 T (m_W += p_Other[ 3 ];) N
(161) # () S 4 T () S 8 T () S 12 T () N
(162) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(163) # () S 4 T () S 8 T (}) N
(164) # () N
(165) # () S 4 T () S 8 T (Vector4 &Vector4::) S
(operator) K
(-=\( ) p
(const) K
( Vector4 &p_Other \)) p n
(166) # () S 4 T () S 8 T ({) N
(167) # () S 4 T () S 8 T () S 12 T (m_X -= p_Other[ 0 ];) N
(168) # () S 4 T () S 8 T () S 12 T (m_Y -= p_Other[ 1 ];) N
(169) # () S 4 T () S 8 T () S 12 T (m_Z -= p_Other[ 2 ];) N
(170) # () S 4 T () S 8 T () S 12 T (m_W -= p_Other[ 3 ];) N
(171) # () S 4 T () S 8 T () S 12 T () N
(172) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(173) # () S 4 T () S 8 T (}) N
(174) # () N
(175) # () S 4 T () S 8 T (Vector4 &Vector4::) S
(operator) K
(*=\( ) p
(const) K
( Vector4 &p_Other \)) p n
(176) # () S 4 T () S 8 T ({) N
(177) # () S 4 T () S 8 T () S 12 T (m_X *= p_Other[ 0 ];) N
(178) # () S 4 T () S 8 T () S 12 T (m_Y *= p_Other[ 1 ];) N
(179) # () S 4 T () S 8 T () S 12 T (m_Z *= p_Other[ 2 ];) N
(180) # () S 4 T () S 8 T () S 12 T (m_W *= p_Other[ 3 ];) N
(181) # () N
(182) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(183) # () S 4 T () S 8 T (}) N
(184) # () N
(185) # () S 4 T () S 8 T (Vector4 &Vector4::) S
(operator) K
(*=\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \)) p n
(186) # () S 4 T () S 8 T ({) N
(187) # () S 4 T () S 8 T () S 12 T (m_X *= p_Scalar;) N
(188) # () S 4 T () S 8 T () S 12 T (m_Y *= p_Scalar;) N
(189) # () S 4 T () S 8 T () S 12 T (m_Z *= p_Scalar;) N
(190) # () S 4 T () S 8 T () S 12 T (m_W *= p_Scalar;) N
(191) # () N
(192) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(193) # () S 4 T () S 8 T (}) N
(194) # () N
(195) # () S 4 T () S 8 T (Vector4 &) S
(operator) K
(*=\( ) p
(const) K
( ZED_FLOAT32 p_Scalar, Vector4 &p_Self \)) p n
(196) # () S 4 T () S 8 T ({) N
(197) # () S 4 T () S 8 T () S 12 T (p_Self[ 0 ] *= p_Scalar;) N
(198) # () S 4 T () S 8 T () S 12 T (p_Self[ 1 ] *= p_Scalar;) N
(199) # () S 4 T () S 8 T () S 12 T (p_Self[ 2 ] *= p_Scalar;) N
(200) # () S 4 T () S 8 T () S 12 T (p_Self[ 3 ] *= p_Scalar;) N
(201) # () S 4 T () S 8 T () S 12 T () N
(202) # () S 4 T () S 8 T () S 12 T () S
(return) K
( p_Self;) p n
(203) # () S 4 T () S 8 T (}) N
(204) # () N
(205) # () S 4 T () S 8 T (Vector4 &Vector4::) S
(operator) K
(/=\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \)) p n
(206) # () S 4 T () S 8 T ({) N
(207) # () S 4 T () S 8 T () S 12 T () S
(// No divide by zero checking!) c n
([ ZED::Arithmetic::Vector4.cpp ]) (Page 3/4) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T (m_X /= p_Scalar;) N
(209) # () S 4 T () S 8 T () S 12 T (m_Y /= p_Scalar;) N
(210) # () S 4 T () S 8 T () S 12 T (m_Z /= p_Scalar;) N
(211) # () S 4 T () S 8 T () S 12 T (m_W /= p_Scalar;) N
(212) # () N
(213) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(214) # () S 4 T () S 8 T (}) N
(215) # () S 4 T (}) N
(216) # (}) N
(217) # () N
([ ZED::Arithmetic::Vector4.cpp ]) (Page 4/4) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
