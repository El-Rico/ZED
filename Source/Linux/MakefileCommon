ifndef $(TARGET)
TARGET = libZED$(notdir $(CURDIR)).$(EXT)
endif

ifndef $(OBJSDIR)
OBJSDIR = $(TOPDIR)/Obj/$(PLATFORM)/$(ARCH)/$(BITSIZE)/$(notdir $(CURDIR))/GCC/$(GCCVER)/$(BUILD)
endif

PSDOCSDIR = $(TOPDIR)/Docs/PS/$(ZEDTARGET)
OUTFILE = $(TARGETDIR)/$(TARGET)
SHARED ?= False
NOLIB ?= False

CPPFLAGS =	-c -DZED_BUILD_$(ZED_BUILD) -DZED_PLATFORM_$(BUILD_PLATFORM) \
			-DZED_PLATFORM_$(BUILD_PLATFORM)_$(BUILD_ARCH) \
			-DZED_PLATFORM_$(BUILD_PLATFORM)_$(BUILD_ARCH)_$(BITSIZE) \
			-DZED_BITSIZE_$(BITSIZE) -DZED_ARCH_$(BUILD_ARCH) \
			-I$(TOPSRC)/Common/Headers -IHeaders

ifneq ($(SHARED),False)
	EXT			:= so
	LINKFLAGS	+= -shared
	CPPFLAGS	+= -fPIC
debug:		LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR))D.so.1
release:	LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR)).so.1
profile:	LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR))P.so.1
else
	EXT			:= a
endif
####### Debug Targets ############
debug: BUILD = Debug
debug: BUILD_TYPE = debug
debug: ZED_BUILD = DEBUG
debug: TARGET := libZED$(notdir $(CURDIR))D.$(EXT)
debug: CPPFLAGS += -g -ggdb -Wall -D_DEBUG $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
debug: $(TARGET)
else
debug: $(TARGET)
endif

####### Release Targets #########
release: BUILD = Release
release: BUILD_TYPE = release
release: ZED_BUILD = RELEASE
release: TARGET := libZED$(notdir $(CURDIR)).$(EXT)
release: CPPFLAGS += -O3 $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
release: $(TARGET)
else
release: $(TARGET)
endif

####### Profile Targets ##########
profile: BUILD = Profile
profile: BUILD_TYPE = profile
profile: ZED_BUILD = PROFILE
profile: TARGET := libZED$(notdir $(CURDIR))P.$(EXT)
profile: CPPFLAGS += -g -ggdb -Wall -D_DEBUG -O3 $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
profile: $(TARGET)
else
profile: $(TARGET)
endif

##### PostScript documentation #####
psdocs:	build_docs

###### Build the object files while not in the Obj directory ##################
ifneq ($(OBJSDIR), $(CURDIR))

ifeq ($(TOPDIR)/Source/Linux/Source/$(notdir $(CURDIR)),$(CURDIR))

$(TARGETDIR):
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Creating directory: $(TARGETDIR) ... "
	@mkdir -p $(TARGETDIR)
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n\n" "-------------------"

$(OBJSDIR):
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Creating directory: $(OBJSDIR) ... "
	@mkdir -p $(OBJSDIR)
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n\n" "-------------------"

CPPFILES	:=	$(foreach dir,$(SOURCEDIR),$(notdir $(wildcard $(dir)/*.cpp))) 

#####################
export VPATH	:= $(CURDIR)
export OBJS = $(CPPFILES:.cpp=.o)
HEADERS = $(wildcard *.hpp)
#####################

$(TARGET): $(TARGETDIR) $(OBJSDIR)
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(OBJSDIR)
	@printf "Compiling platform-specific object files for $(TARGET)\n\n"
	@/usr/bin/time -f "%E" -o $(OBJSDIR)/compiletime \
	$(MAKE) --no-print-directory -C $(OBJSDIR) \
	-f $(TOPSRC)/Linux/MakefileCommon TARGET=$(TARGET) OBJSDIR=$(OBJSDIR) \
	$(BUILD_TYPE)
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Compile Time: "
	@cat $(OBJSDIR)/compiletime
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"

endif

ifeq ($(TOPDIR)/Source/Common/Source/$(notdir $(CURDIR)),$(CURDIR))

$(TARGETDIR):
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Creating directory: $(TARGETDIR) ... "
	@mkdir -p $(TARGETDIR)
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n\n" "-------------------"

$(OBJSDIR):
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Creating directory: $(OBJSDIR) ... "
	@mkdir -p $(OBJSDIR)
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n\n" "-------------------"

CPPFILES	:=	$(foreach dir,$(CURDIR),$(notdir $(wildcard $(dir)/*.cpp))) 

#####################
export VPATH	:= $(CURDIR)
export OBJS = $(CPPFILES:.cpp=.o)
HEADERS = $(wildcard *.hpp)
#####################

$(TARGET): $(TARGETDIR) $(OBJSDIR)
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(OBJSDIR)
	@printf "Compiling common object files for $(TARGET)\n\n"
	@/usr/bin/time -f "%E" -o $(OBJSDIR)/compiletime \
	$(MAKE) --no-print-directory -C $(OBJSDIR) \
	-f $(TOPSRC)/Linux/MakefileCommon TARGET=$(TARGET) OBJSDIR=$(OBJSDIR) \
	NOLIB=True $(BUILD_TYPE)
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Compile Time: "
	@cat $(OBJSDIR)/compiletime
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"

endif

else
##### In the intermediate build directory #####################################
ifneq ($(NOLIB), True)

ifneq ($(SHARED), False)
$(TARGET): $(OBJS)
	@printf "\n\n%s" "------------------------- MESSAGES FROM THE COMPILER ---"
	@printf "%s\n" "-----------------------"
	@cat *.cmsgs
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Linking $(TARGET) ... "
	@$(CPP) -m$(BITSIZE) -shared -Wl,-soname,$(notdir $(CURDIR)).so.1 \
	-o $(TARGETDIR)/$(TARGET) $(OBJS) > $*.lmsgs
	@cat $*.lmsgs | sed ''/error/s//`printf "\033[31merror\033[0m"`/'' > $*.lmsgs
	@cat $*.lmsgs | sed ''/warning/s//`printf "\033[34mwarning\033[0m"`/'' > $*.lmsgs
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
else
$(TARGET): $(OBJS)
	@printf "\n\n%s" "------------------------- MESSAGES FROM THE COMPILER ---"
	@printf "%s\n" "-----------------------"
	@cat *.cmsgs
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Linking $(TARGET) ... "
	@# Oh, this is very poor...
	@ar rcsv $(TARGETDIR)/$(TARGET) *.o > $*.lmsgs
	@cat $*.lmsgs | sed ''/error/s//`printf "\033[31merror\033[0m"`/'' > $*.lmsgs
	@cat $*.lmsgs | sed ''/warning/s//`printf "\033[34mwarning\033[0m"`/'' > $*.lmsgs
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
endif
%.o: %.cpp
	@printf "Compiling: $< ... "
	@$(CPP) -MMD -MP -MF $*.d $(CPPFLAGS) -I$(TOPSRC)/Linux/Headers \
	$(SYSIPATH) $< -o $@ 2> $*.cmsgs;\
	RETVAL=$$?;\
	cat $*.cmsgs | sed ''/error/s//`printf "\033[31merror\033[0m"`/'' > $*.cmsgs;\
	cat $*.cmsgs | sed ''/warning/s//`printf "\033[34mwarning\033[0m"`/'' > $*.cmsgs;\
	if [[ $$RETVAL == 0 ]]; then\
		printf "[OK]\n";\
	else\
		printf "\n\n%s" "----------------------------------- ERROR ---------";\
		printf "%s\n" "----------------------------";\
		cat $*.cmsgs;\
		printf "%s" "-------------------------------------------------------";\
		printf "%s\n\n" "------------------------";\
		exit 1;\
	fi
-include *.d
else
$(TARGET): $(OBJS)

%.o: %.cpp
	@printf "Compiling: $< ... "
	@$(CPP) -MMD -MP -MF $*.d $(CPPFLAGS) -I$(TOPSRC)/Linux/Headers \
	$(SYSIPATH) $< -o $@ 2> $*.cmsgs;\
	RETVAL=$$?;\
	cat $*.cmsgs | sed ''/error/s//`printf "\033[31merror\033[0m"`/'' > $*.cmsgs;\
	cat $*.cmsgs | sed ''/warning/s//`printf "\033[34mwarning\033[0m"`/'' > $*.cmsgs;\
	if [[ $$RETVAL == 0 ]]; then\
		printf "[OK]\n";\
	else\
		printf "\n\n%s" "----------------------------------- ERROR ---------";\
		printf "%s\n" "----------------------------";\
		cat $*.cmsgs;\
		printf "%s" "-------------------------------------------------------";\
		printf "%s\n\n" "------------------------";\
		exit 1;\
	fi
-include *.d
endif
endif

##### Build PostScript Documents #####
DOCFILES_CPP = $(CPPFILES:.cpp=.cpp.ps)
DOCFILES_HPP = $(HPPFILES:.hpp=.hpp.ps)

$(PSDOCSDIR):
	mkdir -p $(PSDOCSDIR)

%.cpp.ps: $(SOURCEDIR)/%.cpp
	a2ps --footer="" --left-footer="" --footer="" --left-footer="" --right-footer="" --footer="" --left-footer="" --header="" --center-title='[ $(DOCPREFIX)$$n ]' --right-title='$$Q' --line-numbers=1 -T 4 --pro=color $< -o $(PSDOCSDIR)/$@
%.hpp.ps: $(HEADERDIR)/%.hpp
	a2ps --footer="" --left-footer="" --footer="" --left-footer="" --right-footer="" --footer="" --left-footer="" --header="" --center-title='[ $(DOCPREFIX)$$n ]' --right-title='$$Q' --line-numbers=1 -T 4 --pro=color $< -o $(PSDOCSDIR)/$@

build_docs: $(PSDOCSDIR) $(DOCFILES_CPP) $(DOCFILES_HPP)

