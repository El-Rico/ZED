%!PS-Adobe-3.0
%%Title: GLModel.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Wed Dec 14 20:48:25 2011
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <GLModel.hpp>) p n
(2) # () S
(#include) K
( <GLShader.hpp>) p n
(3) # () S
(#include) K
( <GLExtender.hpp>) p n
(4) # () S
(#include) K
( <cstdio>) p n
(5) # () S
(#include) K
( <cstring>) p n
(6) # () N
(7) # () S
(namespace) K
( ZED) p n
(8) # ({) N
(9) # () S 4 T () S
(namespace) K
( Renderer) p n
(10) # () S 4 T ({) N
(11) # () S 4 T () S 8 T (GLModel::GLModel\( ) S
(const) K
( Renderer *p_pRenderer \)) p n
(12) # () S 4 T () S 8 T ({) N
(13) # () S 4 T () S 8 T () S 12 T (m_pFile = ZED_NULL;) N
(14) # () S 4 T () S 8 T () S 12 T (m_ppVertices = ZED_NULL;) N
(15) # () S 4 T () S 8 T () S 12 T (m_ppIndices = ZED_NULL;) N
(16) # () S 4 T () S 8 T () S 12 T () S
(//m_pVCacheMan = ZED_NULL;) c n
(17) # () N
(18) # () S
() p 4 T () S 8 T () S 12 T (m_World.Identity\( \);) N
(19) # () N
(20) # () S 4 T () S 8 T () S 12 T (m_pVertexCount = ZED_NULL;) N
(21) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ZED_NULL;) N
(22) # () S 4 T () S 8 T () S 12 T (m_pMaterialID = ZED_NULL;) N
(23) # () S 4 T () S 8 T () S 12 T (m_pAttributes = ZED_NULL;) N
(24) # () S 4 T () S 8 T () S 12 T (m_MeshCount = 0;) N
(25) # () N
(26) # () S 4 T () S 8 T () S 12 T (m_pRenderer = ) S
(const_cast) k
(< Renderer * >\( p_pRenderer \);) p n
(27) # () N
(28) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(29) # () S 4 T () S 8 T () S 12 T (m_RenderWireframe = ZED_FALSE;) N
(30) # () S 4 T () S 8 T () S 12 T (m_RenderVNormals = ZED_FALSE;) N
(31) # () S 4 T () S 8 T () S 12 T (m_RenderFNormals = ZED_FALSE;) N
(32) # () S 4 T () S 8 T () S 12 T (m_RenderBones = ZED_FALSE;) N
(33) # () S
(#endif) K n
(34) # () S
() p 4 T () S 8 T (}) N
(35) # () N
(36) # () S 4 T () S 8 T (GLModel::~GLModel\( \)) N
(37) # () S 4 T () S 8 T ({) N
(38) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_ppVertices != ZED_NULL \)) p n
(39) # () S 4 T () S 8 T () S 12 T ({) N
(40) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_MeshCount; i++ \)) p n
(41) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(42) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( m_ppVertices[ i ] != ZED_NULL \)) p n
(43) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(44) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( m_ppVertices[ i ];) p n
(45) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_ppVertices[ i ] = ZED_NULL;) N
(46) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(47) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(48) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_ppVertices;) p n
(49) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ppVertices = ZED_NULL;) N
(50) # () S 4 T () S 8 T () S 12 T (}) N
(51) # () S 4 T () S 8 T () S 12 T () N
(52) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_ppIndices != ZED_NULL \)) p n
(53) # () S 4 T () S 8 T () S 12 T ({) N
(54) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_MeshCount; i++ \)) p n
(55) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(56) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( m_ppIndices[ i ] != ZED_NULL \)) p n
(57) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(58) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(delete) K
( m_ppIndices[ i ];) p n
(59) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_ppIndices[ i ] = ZED_NULL;) N
(60) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(61) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(62) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_ppIndices;) p n
(63) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ppIndices = ZED_NULL;) N
(64) # () S 4 T () S 8 T () S 12 T (}) N
(65) # () N
(66) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pFile != ZED_NULL \)) p n
(67) # () S 4 T () S 8 T () S 12 T ({) N
(68) # () S 4 T () S 8 T () S 12 T () S 16 T (fclose\( m_pFile \);) N
(69) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pFile = ZED_NULL;) N
([ ZED::Renderer::GLModel.cpp ]) (Page 1/6) (Dec 14, 11 15:03) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T (}) N
(71) # () S 4 T () S 8 T (}) N
(72) # () N
(73) # () S 4 T () S 8 T (ZED_UINT32 GLModel::Load\( ) S
(const) K
( ZED_CHAR8 *p_pFilename \)) p n
(74) # () S 4 T () S 8 T ({) N
(75) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::Model::Load] <INFO> ) str
(") p n
(76) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Loading model: %s\\n) str
(", p_pFilename \);) p n
(77) # () S 4 T () S 8 T () S 12 T (m_pFile = fopen\( p_pFilename, ") S
(rb) str
(" \);) p n
(78) # () N
(79) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pFile == ZED_NULL \)) p n
(80) # () S 4 T () S 8 T () S 12 T ({) N
(81) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::Load] <ERROR> ) str
(") p n
(82) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to open model: %s\\n) str
(", p_pFilename \);) p n
(83) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(84) # () S 4 T () S 8 T () S 12 T (}) N
(85) # () N
(86) # () S 4 T () S 8 T () S 12 T () S
(// The first chunk has got to be the header) c n
(87) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( LoadHeader\( \) != ZED_OK \)) p n
(88) # () S 4 T () S 8 T () S 12 T ({) N
(89) # () S 4 T () S 8 T () S 12 T () S 16 T (fclose\( m_pFile \);) N
(90) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pFile = ZED_NULL;) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(92) # () S 4 T () S 8 T () S 12 T (}) N
(93) # () N
(94) # () S 4 T () S 8 T () S 12 T (ZED_UINT16 Type;) N
(95) # () S 4 T () S 8 T () S 12 T (ZED_UINT64 Size;) N
(96) # () N
(97) # () S 4 T () S 8 T () S 12 T (ReadChunk\( Type, Size \);) N
(98) # () N
(99) # () S 4 T () S 8 T () S 12 T () S
(// Read all remaining chunks in) c n
(100) # () S
() p 4 T () S 8 T () S 12 T () S
(while) K
(\( Type != ZED_MODEL_END \)) p n
(101) # () S 4 T () S 8 T () S 12 T ({) N
(102) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(switch) K
(\( Type \)) p n
(103) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(104) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( ZED_MODEL_MESH:) p n
(105) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(106) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (LoadMeshes\( Size \);) N
(107) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// Get more) c n
(108) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (ReadChunk\( Type, Size \);) N
(109) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(110) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(111) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(default) K
(:) p n
(112) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(113) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (zedTrace\( ") S
([ZED::Renderer::Model::Load <ERROR> ) str
(") p n
(114) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (") S
(Unknown type chunk.\\n) str
(" \);) p n
(115) # () N
(116) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (fclose\( m_pFile \);) N
(117) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_pFile = ZED_NULL;) N
(118) # () N
(119) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(return) K
( ZED_FAIL;) p n
(120) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(122) # () S 4 T () S 8 T () S 12 T (}) N
(123) # () N
(124) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(125) # () S 4 T () S 8 T (}) N
(126) # () S 4 T () S 8 T () N
(127) # () S 4 T () S 8 T () S
(void) k
( GLModel::Render\( \)) p n
(128) # () S 4 T () S 8 T ({) N
(129) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_MeshCount; i++ \)) p n
(130) # () S 4 T () S 8 T () S 12 T ({) N
(131) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(132) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Rendering... ) str
(") p n
(133) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(m_pStride[ %d ] = %d | m_pVertexCount[ %d ] = %d\\n) str
(", i,) p n
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pStride[ i ], i, m_pVertexCount[ i ] \);) N
(135) # () S
(#endif) K n
(136) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () N
(137) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pRenderer->Render\( m_pVertexCount[ i ],) S 60 T (m_ppVertices[ i ],) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pIndexCount[ i ], m_ppIndices[ i ], m_pAttributes[ i ],) N
([ ZED::Renderer::GLModel.cpp ]) (Page 2/6) (Dec 14, 11 15:03) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pMaterialID[ i ] \);) N
(140) # () S 4 T () S 8 T () S 12 T (}) N
(141) # () S 4 T () S 8 T (}) N
(142) # () N
(143) # () S 4 T () S 8 T () S
(void) k
( GLModel::Update\( ) p
(const) K
( ZED_FLOAT32 p_Delta,) p n
(144) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Matrix4x4 &p_ViewProjection \)) p n
(145) # () S 4 T () S 8 T ({) N
(146) # () S 4 T () S 8 T (}) N
(147) # () N
(148) # () S 4 T () S 8 T () S
(void) k
( GLModel::SetPosition\( ) p
(const) K
( Arithmetic::Vector3 &p_Position \)) p n
(149) # () S 4 T () S 8 T ({) N
(150) # () S 4 T () S 8 T (}) N
(151) # () N
(152) # () S 4 T () S 8 T () S
(void) k
( GLModel::SetScale\( ) p
(const) K
( Arithmetic::Vector3 &p_Scale \)) p n
(153) # () S 4 T () S 8 T ({) N
(154) # () S 4 T () S 8 T (}) N
(155) # () N
(156) # () S 4 T () S 8 T () S
(void) k
( GLModel::SetOrientation\() p n
(157) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Matrix3x3 &p_Orientation \)) p n
(158) # () S 4 T () S 8 T ({) N
(159) # () S 4 T () S 8 T (}) N
(160) # () N
(161) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(162) # () S 4 T () S 8 T () S
(void) k
( GLModel::SetWireframeColour\( ) p
(const) K
( ZED_COLOUR &p_Colour \)) p n
(163) # () S 4 T () S 8 T ({) N
(164) # () S 4 T () S 8 T (}) N
(165) # () N
(166) # () S 4 T () S 8 T () S
(void) k
( GLModel::ToggleWireframe\( \)) p n
(167) # () S 4 T () S 8 T ({) N
(168) # () S 4 T () S 8 T (}) N
(169) # () N
(170) # () S 4 T () S 8 T () S
(void) k
( GLModel::ToggleVertexNormals\( \)) p n
(171) # () S 4 T () S 8 T ({) N
(172) # () S 4 T () S 8 T (}) N
(173) # () N
(174) # () S 4 T () S 8 T () S
(void) k
( GLModel::ToggleFaceNormals\( \)) p n
(175) # () S 4 T () S 8 T ({) N
(176) # () S 4 T () S 8 T (}) N
(177) # () N
(178) # () S 4 T () S 8 T () S
(void) k
( GLModel::ToggleBones\( \)) p n
(179) # () S 4 T () S 8 T ({) N
(180) # () S 4 T () S 8 T (}) N
(181) # () S
(#endif) K n
(182) # () N
(183) # () S
() p 4 T () S 8 T (ZED_UINT32 GLModel::LoadHeader\( \)) N
(184) # () S 4 T () S 8 T ({) N
(185) # () S 4 T () S 8 T () S 12 T (LPFILEHEADER_V2 pHeaderInfo = ) S
(new) K
( FILEHEADER_V2;) p n
(186) # () N
(187) # () S 4 T () S 8 T () S 12 T () S
(// Assume the file is already open) c n
(188) # () S
() p 4 T () S 8 T () S 12 T (ZED_UINT16 ChunkType;) N
(189) # () S 4 T () S 8 T () S 12 T (ZED_UINT64 ChunkSize;) N
(190) # () N
(191) # () S 4 T () S 8 T () S 12 T (ReadChunk\( ChunkType, ChunkSize \);) N
(192) # () N
(193) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( ChunkType != ZED_MODEL_HEADER \)) p n
(194) # () S 4 T () S 8 T () S 12 T ({) N
(195) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadHeader] <ERROR> ) str
(") p n
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Chunk is not a header chunk.\\n) str
(" \);) p n
(197) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Size: %X | Type: %X.\\n) str
(", ChunkSize, ChunkType \);) p n
(198) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( pHeaderInfo;) p n
(199) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(200) # () S 4 T () S 8 T () S 12 T (}) N
(201) # () N
(202) # () S 4 T () S 8 T () S 12 T (fread\( pHeaderInfo, ) S
(sizeof) K
(\( FILEHEADER_V2 \), 1, m_pFile \);) p n
(203) # () N
(204) # () S 4 T () S 8 T () S 12 T () S
(// Make sure that this is in the correct format) c n
(205) # () S
() p 4 T () S 8 T () S 12 T (ReadChunk\( ChunkType, ChunkSize \);) N
(206) # () N
(207) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( ChunkType != ZED_MODEL_END \)) p n
([ ZED::Renderer::GLModel.cpp ]) (Page 3/6) (Dec 14, 11 15:03) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T ({) N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadHeader] <ERROR> ) str
(") p n
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Unexpected data: Non-end chunk.\\n) str
(" \);) p n
(211) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( pHeaderInfo;) p n
(212) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(213) # () S 4 T () S 8 T () S 12 T (}) N
(214) # () N
(215) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( pHeaderInfo->ID[ 0 ] != ') p
(Z) str
(' &&) p n
(216) # () S 4 T () S 8 T () S 12 T () S 16 T (pHeaderInfo->ID[ 1 ] != ') S
(E) str
(' &&) p n
(217) # () S 4 T () S 8 T () S 12 T () S 16 T (pHeaderInfo->ID[ 2 ] != ') S
(D) str
(' \)) p n
(218) # () S 4 T () S 8 T () S 12 T ({) N
(219) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadHeader] <ERROR> ) str
(") p n
(220) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Header is not from a valid ZED model\\n) str
(" \);) p n
(221) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( pHeaderInfo;) p n
(222) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(223) # () S 4 T () S 8 T () S 12 T (}) N
(224) # () N
(225) # () S 4 T () S 8 T () S 12 T (m_Flags = pHeaderInfo->Flags;) N
(226) # () S 4 T () S 8 T () S 12 T () N
(227) # () S 4 T () S 8 T () S 12 T () S
(// Check for endian swapping) c n
(228) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_Flags && 0x00000001 \)) p n
(229) # () S 4 T () S 8 T () S 12 T ({) N
(230) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadHeader] <INFO> ) str
(") p n
(231) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Swapping bytes.\\n) str
(" \);) p n
(232) # () S 4 T () S 8 T () S 12 T (}) N
(233) # () N
(234) # () S 4 T () S 8 T () S 12 T (m_MeshCount = pHeaderInfo->MeshCount;) N
(235) # () S 4 T () S 8 T () S 12 T (m_JointCount = pHeaderInfo->JointCount;) N
(236) # () N
(237) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(238) # () S 4 T () S 8 T () S 12 T () S
(//strcpy\( m_Name, pHeaderInfo->Name \);) c n
(239) # (/*) S 4 T () S 8 T () S 12 T (for\( ZED_MEMSIZE i = 0; i < 32; i++ \)) N
(240) # () S 4 T () S 8 T () S 12 T ({) N
(241) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Name[ i ] = pHeaderInfo->Name[ i ];) N
(242) # () S 4 T () S 8 T () S 12 T (}*/) N
(243) # () S
() p 4 T () S 8 T () S 12 T (ZED_CHAR8 *pEndianess = ZED_NULL;) N
(244) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( \( m_Flags & 0x00000001 \) \)) p n
(245) # () S 4 T () S 8 T () S 12 T ({) N
(246) # () S 4 T () S 8 T () S 12 T () S 16 T (pEndianess = ) S
(new) K
( ZED_CHAR8[ 4 ];) p n
(247) # () S 4 T () S 8 T () S 12 T () S 16 T (strncpy\( pEndianess, ") S
(Big\\0) str
(", 4 \);) p n
(248) # () S 4 T () S 8 T () S 12 T (}) N
(249) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(250) # () S
() p 4 T () S 8 T () S 12 T ({) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T (pEndianess = ) S
(new) K
( ZED_CHAR8[ 7 ];) p n
(252) # () S 4 T () S 8 T () S 12 T () S 16 T (strncpy\( pEndianess, ") S
(Little\\0) str
(", 7 \);) p n
(253) # () S 4 T () S 8 T () S 12 T (}) N
(254) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadHeader] <INFO> ) str
(") p n
(255) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Header) str
(") p
(/* for: %s*/) c
(") p
( loaded successfully.\\n) str
(") p
(/*, m_Name*/) c
( \);) p n
(256) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(\\tEndianess: %s | Version: %d.%d.%d | ) str
(") p n
(257) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Meshes: %d | Joints: %d\\n) str
(", pEndianess,) p n
(258) # () S 4 T () S 8 T () S 12 T () S 16 T (pHeaderInfo->Version[ 0 ], pHeaderInfo->Version[ 1 ],) N
(259) # () S 4 T () S 8 T () S 12 T () S 16 T (pHeaderInfo->Version[ 2 ],) N
(260) # () S 4 T () S 8 T () S 12 T () S 16 T (pHeaderInfo->MeshCount, pHeaderInfo->JointCount \);) N
(261) # () N
(262) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( pEndianess != ZED_NULL \)) p n
(263) # () S 4 T () S 8 T () S 12 T ({) N
(264) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] pEndianess;) p n
(265) # () S 4 T () S 8 T () S 12 T (}) N
(266) # () S
(#endif) K n
(267) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( pHeaderInfo != ZED_NULL \)) p n
(268) # () S 4 T () S 8 T () S 12 T ({) N
(269) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( pHeaderInfo;) p n
(270) # () S 4 T () S 8 T () S 12 T (}) N
(271) # () N
(272) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(273) # () S 4 T () S 8 T (}) N
(274) # () N
(275) # () S 4 T () S 8 T (ZED_UINT32 GLModel::LoadMeshes\( ZED_UINT64 p_Size \)) N
(276) # () S 4 T () S 8 T ({) N
([ ZED::Renderer::GLModel.cpp ]) (Page 4/6) (Dec 14, 11 15:03) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(277) # () p 4 T () S 8 T () S 12 T (ZED_UINT64 TempSize = p_Size;) N
(278) # () N
(279) # () S 4 T () S 8 T () S 12 T () S
(// The total indices stores the offeet for the next set of indices) c n
(280) # () S
() p 4 T () S 8 T () S 12 T (ZED_UINT16 TotalIndices = 0;) N
(281) # () S 4 T () S 8 T () S 12 T (ZED_UINT16 TotalWireIndices = 0;) N
(282) # () N
(283) # () S 4 T () S 8 T () S 12 T () S
(// TEMP!) c n
(284) # () S
() p 4 T () S 8 T () S 12 T () S
(// Should be changed to load from the header) c n
(285) # () S
() p 4 T () S 8 T () S 12 T () S
(//m_pShader = new GLShader[ m_MeshCount ];) c n
(286) # () S
() p 4 T () S 8 T () S 12 T () S
(// !TEMP) c n
(287) # (/*) N
(288) # (#ifdef ZED_BUILD_DEBUG) N
(289) # () S 4 T () S 8 T () S 12 T (m_ppMeshNames = new ZED_UCHAR8*[ m_MeshCount ];) N
(290) # (*/) N
(291) # () S
() p 4 T () S 8 T () S 12 T () S
(delete) K
( [ ] m_pAttributes;) p n
(292) # () S 4 T () S 8 T () S 12 T (m_pAttributes = ) S
(new) K
( ZED_UINT64[ m_MeshCount ];) p n
(293) # () S 4 T () S 8 T () S 12 T (m_pMaterialID = ) S
(new) K
( ZED_UINT32[ m_MeshCount ];) p n
(294) # () S 4 T () S 8 T () S 12 T (m_pStride = ) S
(new) K
( ZED_BYTE[ m_MeshCount ];) p n
(295) # () S 4 T () S 8 T () S 12 T (m_pVertexCount = ) S
(new) K
( ZED_UINT16[ m_MeshCount ];) p n
(296) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ) S
(new) K
( ZED_UINT16[ m_MeshCount ];) p n
(297) # () S 4 T () S 8 T () S 12 T (m_ppVertices = ) S
(new) K
( ZED_BYTE*[ m_MeshCount ];) p n
(298) # () S 4 T () S 8 T () S 12 T (m_ppIndices = ) S
(new) K
( ZED_UINT16*[ m_MeshCount ];) p n
(299) # () S
(/*) c n
(300) # () S 4 T () S 8 T () S 12 T (for\( ZED_MEMSIZE i = 0; i < m_MeshCount; i++ \)) N
(301) # () S 4 T () S 8 T () S 12 T ({) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ppMeshNames[ i ] = new ZED_UCHAR8[ 32 ];) N
(303) # () S 4 T () S 8 T () S 12 T (}) N
(304) # (#endif*/) N
(305) # () S
() p 4 T () S 8 T () S 12 T () S
(// Read in each mesh, which has the format:) c n
(306) # () S
() p 4 T () S 8 T () S 12 T () S
(// CHUNK) c n
(307) # () S
() p 4 T () S 8 T () S 12 T () S
(// ) c 16 T (> CHAR Name[ 32 ]) N
(308) # () S
() p 4 T () S 8 T () S 12 T () S
(// ) c 16 T (> ZED_UINT16 MeshFaceIndices) N
(309) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_MeshCount; i++ \)) p n
(310) # () S 4 T () S 8 T () S 12 T ({) N
(311) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Store the mesh name for debugging purposes) c n
(312) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(313) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(//fread\( m_ppMeshNames[ i ], sizeof\( ZED_UCHAR8 \), 32, m_pFile \)) c n
0 T (;) N
(314) # () S
(#else) K n
(315) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(//fseek\( m_pFile, sizeof\( ZED_UCHAR8 \)*32, SEEK_CUR \);) c n
(316) # () S
(#endif) K n
(317) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (ZED_UINT16 Indices;) N
(318) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( &m_pAttributes[ i ], ) S
(sizeof) K
(\( ZED_UINT64 \), 1, m_pFile \);) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( &m_pMaterialID[ i ], ) S
(sizeof) K
(\( ZED_UINT32 \), 1, m_pFile \);) p n
(320) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( &m_pVertexCount[ i ], ) S
(sizeof) K
(\( ZED_UINT16 \), 1,) p n
(321) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pFile \);) N
(322) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( &m_pIndexCount[ i ], ) S
(sizeof) K
(\( ZED_UINT16 \), 1, m_pFile \);) p n
(323) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( &m_pStride[ i ], ) S
(sizeof) K
(\( ZED_BYTE \), 1, m_pFile \);) p n
(324) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(325) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLModel::LoadMeshes] <INFO> ) str
(") p n
(326) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Loaded mesh %d\\n\\tAttributes: 0x%016X | Material ID: %d | ) str
(") p n
(327) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Vertices: %d | Indices: %d\\n) str
(", i, m_pAttributes[ i ],) p n
(328) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pMaterialID[ i ], m_pVertexCount[ i ],) N
(329) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pIndexCount[ i ]\);) N
(330) # () S
(#endif) K n
(331) # () N
(332) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (m_ppVertices[ i ] =) N
(333) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(new) K
( ZED_BYTE[ m_pVertexCount[ i ]*m_pStride[ i ] ];) p n
(334) # () S 4 T () S 8 T () S 12 T () S 16 T (m_ppIndices[ i ] = ) S
(new) K
( ZED_UINT16[ m_pIndexCount[ i ]*3 ];) p n
(335) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// No error checking!) c n
(336) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (fread\( m_ppVertices[ i ], ) S
(sizeof) K
(\( ZED_BYTE \)*m_pStride[ i ],) p n
(337) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pVertexCount[ i ], m_pFile \);) N
(338) # () S 4 T () S 8 T () S 12 T () S 16 T (fread\( m_ppIndices[ i ], ) S
(sizeof) K
(\( ZED_UINT16 \)*3, m_pIndexCount[ ) p n
0 T (i ],) N
(339) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pFile \);) S 32 T () N
(340) # () N
(341) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Now go ahead and feed the indices into m_pIndices so they) c n
(342) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// can be imortalised!) c n
(343) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(/*for\( ZED_MEMSIZE j = 0; j < Indices; j++ \)) c n
([ ZED::Renderer::GLModel.cpp ]) (Page 5/6) (Dec 14, 11 15:03) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(344) # () c 4 T () S 8 T () S 12 T () S 16 T ({) N
(345) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ZED_UINT16 Face;) N
(346) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (// No error checking!) N
(347) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (fread\( &Face, sizeof\( ZED_UINT16 \), 1, m_pFile \);) N
(348) # () N
(349) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pIndices[ \( j+TotalIndices \)*3 ] =) N
(350) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_ppFaceIndices[ Face ][ 0 ];) N
(351) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pIndices[ \( \( j+TotalIndices \)*3 \)+1 ] =) N
(352) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_ppFaceIndices[ Face ][ 1 ];) N
(353) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_pIndices[ \( \( j+TotalIndices \)*3 \)+2 ] =) N
(354) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_ppFaceIndices[ Face ][ 2 ];) N
(355) # () S 4 T () S 8 T () S 12 T () S 16 T (}*/) N
(356) # () N
(357) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (TotalIndices += m_pIndexCount[ i ];) N
(358) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(/*) c n
(359) # (#ifdef ZED_BUILD_DEBUG) N
(360) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( "[ZED::Renderer::Model::LoadMeshes] <INFO> ") N
(361) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ("Mesh: %s | Indices: %d.\\n", m_ppMeshNames[ i ], Indices \);) N
(362) # (#endif*/) N
(363) # () S
() p 4 T () S 8 T () S 12 T (}) N
(364) # () S
(#ifdef) K
( ZED_BUILD_DEBUG) p n
(365) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadMeshes] <INFO> ) str
(") p n
(366) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Loaded a total of %d indices.\\n) str
(", TotalIndices \);) p n
(367) # () S
(#endif) K n
(368) # () N
(369) # () S
() p 4 T () S 8 T () S 12 T (ZED_UINT16 Type;) N
(370) # () S 4 T () S 8 T () S 12 T (ZED_UINT64 Size;) N
(371) # () S 4 T () S 8 T () S 12 T (ReadChunk\( Type, Size \);) N
(372) # () N
(373) # () S 4 T () S 8 T () S 12 T () S
(// The next chunk should be the end chunk) c n
(374) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( Type != ZED_MODEL_END \)) p n
(375) # () S 4 T () S 8 T () S 12 T ({) N
(376) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::Model::LoadMeshes] <ERROR> ) str
(") p n
(377) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Unexpected data: Non-end chunk.\\n) str
(" \);) p n
(378) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(379) # () S 4 T () S 8 T () S 12 T (}) N
(380) # () N
(381) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(382) # () S 4 T () S 8 T (}) N
(383) # () N
(384) # () S 4 T () S 8 T () S
(void) k
( GLModel::ReadChunk\( ZED_UINT16 &p_Type, ZED_UINT64 &p_Size \)) p n
(385) # () S 4 T () S 8 T ({) N
(386) # () S 4 T () S 8 T () S 12 T (fread\( &p_Type, ) S
(sizeof) K
(\( ZED_UINT16 \), 1, m_pFile \);) p n
(387) # () S 4 T () S 8 T () S 12 T (fread\( &p_Size, ) S
(sizeof) K
(\( ZED_UINT64 \), 1, m_pFile \);) p n
(388) # () S 4 T () S 8 T (}) N
(389) # () S 4 T (}) N
(390) # (}) N
(391) # () N
([ ZED::Renderer::GLModel.cpp ]) (Page 6/6) (Dec 14, 11 15:03) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
