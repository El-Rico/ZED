TARGET := libZED$(ZEDTARGET).a

###### Set based on build type ##############
COMMONDIR ?= ../../..

TARGETDIR = $(COMMONDIR)/Lib/$(PLATFORM)
OBJSDIR = $(COMMONDIR)/Obj/$(PLATFORM)/$(ZEDTARGET)/$(BUILD)
SOURCEDIR = Source

NOLIB ?= False
COPYHEADERS ?= True

# Get the machine type so, hopefully, the programmer building this will not
# receive a bunch of errors upon compilation
UNAME			= $(shell uname)
UNAME_MACHINE	= $(shell uname -m)

COMMONINCDIR = ../../Common/Headers

CC = g++

CFLAGS_EXT =
ifeq ($(UNAME), Linux)
	CFLAGS_EXT	= -ffriend-injection
ifeq ($(UNAME_MACHINE), x86_64)
	BUILD_PLATFORM	= LINUX64_X86
	PLATFORM		= Linux64_x86
endif
ifeq ($(UNAME_MACHINE), i686)
	BUILD_PLATFORM	= LINUX32_X86
	PLATFORM		= Linux32_x86
endif
endif

ifeq ($(UNAME), Linux)
	SYSIPATH = -I/usr/include/xorg
endif

####### Release Targets #########
release: BUILD = Release
release: ZED_BUILD = RELEASE
release: TARGET := libZED$(ZEDTARGET).a
release: CFLAGS = -c -O3 $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
release: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
release: copyheaders
endif

####### Debug Targets ############
debug: BUILD = Debug
debug: ZED_BUILD = DEBUG
debug: TARGET := libZED$(ZEDTARGET)D.a
debug: CFLAGS = -c -g -ggdb -Wall -D_DEBUG $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
debug: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
debug: copyheaders
endif

####### Profile Targets ##########
profile: BUILD = Profile
profile: ZED_BUILD = PROFILE
profile: TARGET := libZED$(ZEDTARGET)P.a
profile: CFLAGS = -c -O3 $(CFLAGS_EXT)
ifneq ($(NOLIB), True)
profile: $(TARGET)
endif
ifeq ($(COPYHEADERS), True)
profile: copyheaders
endif

###### Build the object files while not in the Obj directory ##################
ifneq ($(OBJSDIR), $(notdir $(CURDIR)))

$(TARGETDIR):
	-mkdir -p $(TARGETDIR)

CPPFILES	:=	$(foreach dir,$(SOURCEDIR),$(notdir $(wildcard $(dir)/*.cpp)))

#####################
OBJS = $(CPPFILES:.cpp=.o)
HEADERS = $(wildcard *.hpp)
#####################

ifneq ($(NOLIB), True)

$(TARGET): $(OBJS) $(TARGETDIR)
	cd $(OBJSDIR) && ar rcsv ../$(TARGETDIR)/$(TARGET) $(OBJS)
#	ranlib $(TARGETDIR)/$(TARGET)
	
%.o: $(SOURCEDIR)/%.cpp
	-mkdir -p $(OBJSDIR)
	$(CC) $(CFLAGS) -DZED_BUILD_$(ZED_BUILD) -DZED_PLATFORM_$(BUILD_PLATFORM) -I$(COMMONINCDIR) $(ZEDINCDIR) \
	$(SYSIPATH) $< -o $(OBJSDIR)/$@

endif

#####################
ifeq ($(COPYHEADERS), True)
.PHONY: copyheaders
endif
#####################
copyheaders:
	-mkdir -p $(ZEDPATH)/include/$(PLATFORM)
	-mkdir -p $(ZEDPATH)/lib/$(PLATFORM)
	if test -d ./Headers; then cp -f ./Headers/*.hpp $(ZEDPATH)/include/$(PLATFORM)/; fi
	cp -f $(COMMONINCDIR)/*.hpp $(ZEDPATH)/include/$(PLATFORM)/
	cp -f $(TARGETDIR)/*.a $(ZEDPATH)/lib/$(PLATFORM)/

.PHONY: clean
clean:
	# Just get rid of the intermediate and output directories as well as their
	# files within (of course)
	-rm -rf $(COMMONDIR)/Obj
	-rm -rf $(COMMONDIR)/Lib
endif
