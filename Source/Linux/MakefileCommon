##TARGET =
ifndef $(TARGET)
TARGET = libZED$(notdir $(CURDIR)).$(EXT)
endif

ifndef $(OBJSDIR)
OBJSDIR = $(TOPDIR)/Obj/$(PLATFORM)/$(ARCH)/$(BITSIZE)/$(notdir $(CURDIR))/GCC/$(GCCVER)/$(BUILD)
endif

ifndef TARGETDIR
export TARGETDIR = $(TOPDIR)/Lib/$(PLATFORM)/$(ARCH)/$(BITSIZE)
export SOURCEDIR = Source
export HEADERDIR = Headers
endif


PSDOCSDIR = $(TOPDIR)/Docs/PS/$(ZEDTARGET)
OUTFILE = $(TARGETDIR)/$(TARGET)
SHARED ?= False
NOLIB ?= False
COPYFILES ?= True
32BIT	?= False
64BIT	?= False


BUILD_PLATFORM	= LINUX
PLATFORM		= Linux
BUILD_ARCH		= X86
ARCH			= x86
BITSIZE			= 32
BUILD_TYPE		= debug

# Get the machine type so, hopefully, the programmer building this will not
# receive a bunch of errors upon compilation
UNAME			= $(shell uname)
UNAME_MACHINE	= $(shell uname -m)

GCCVER = $(shell $(CPP) -dumpversion)
CPP = g++

ifeq ($(UNAME), Linux)
	CPPFLAGS_EXT	= -ffriend-injection -std=gnu++0x
	SYSIPATH		= -I/usr/include/xorg
	SYSLIBS			= -lX11 -lGL -lrt
	LINKFLAGS		=
##### Check for forced 32-bit or 64-bit builds
ifneq ($(64BIT),False)
	CPPFLAGS_EXT	+= -m64
	BUILD_ARCH		:= X86
	ARCH			:= x86
	BITSIZE			:= 64
else
ifneq ($(32BIT),False)
	CPPFLAGS_EXT	+= -m32
	BUILD_ARCH		:= X86
	ARCH			:= x86
	BITSIZE			:= 32
else
##### Nothing forced.  Use what the machine reports ###########################
ifeq ($(UNAME_MACHINE), x86_64)
	CPPFLAGS_EXT	+= -m64
	BUILD_ARCH		:= X86
	ARCH			:= x86
	BITSIZE			:= 64
endif
ifeq ($(UNAME_MACHINE), i686)
	CPPFLAGS_EXT	+= -m32
	BUILD_ARCH		:= X86
	ARCH			:= x86
	BITSIZE			:= 32
endif
endif
endif
endif

CPPFLAGS =	-c -DZED_BUILD_$(ZED_BUILD) -DZED_PLATFORM_$(BUILD_PLATFORM) \
			-DZED_PLATFORM_$(BUILD_PLATFORM)_$(BUILD_ARCH) \
			-DZED_PLATFORM_$(BUILD_PLATFORM)_$(BUILD_ARCH)_$(BITSIZE) \
			-DZED_BITSIZE_$(BITSIZE) -DZED_ARCH_$(BUILD_ARCH) \
			-I$(TOPSRC)/Common/Headers -IHeaders

ifneq ($(SHARED),False)
	EXT			:= so
	LINKFLAGS	+= -shared
	CPPFLAGS	+= -fPIC
debug:		LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR))D.so.1
release:	LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR)).so.1
profile:	LINKFLAGS += -Wl,-soname,lib$(notdir $(CURDIR))P.so.1
else
	EXT			:= a
endif
####### Debug Targets ############
debug: BUILD = Debug
debug: BUILD_TYPE = debug
debug: ZED_BUILD = DEBUG
debug: TARGET := libZED$(notdir $(CURDIR))D.$(EXT)
debug: CPPFLAGS += -g -ggdb -Wall -D_DEBUG $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
debug: $(TARGET)
endif
ifeq ($(COPYFILES), True)
debug: copyfiles
endif

####### Release Targets #########
release: BUILD = Release
release: BUILD_TYPE = release
release: ZED_BUILD = RELEASE
release: TARGET := libZED$(notdir $(CURDIR)).$(EXT)
release: CPPFLAGS += -O3 $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
release: $(TARGET)
endif
ifeq ($(COPYFILES), True)
release: copyfiles
endif

####### Profile Targets ##########
profile: BUILD = Profile
profile: BUILD_TYPE = profile
profile: ZED_BUILD = PROFILE
profile: TARGET := libZED$(notdir $(CURDIR))P.$(EXT)
profile: CPPFLAGS += -g -ggdb -Wall -D_DEBUG -O3 $(CPPFLAGS_EXT)
ifneq ($(NOLIB), True)
profile: $(TARGET)
endif
ifeq ($(COPYFILES), True)
profile: copyfiles
endif

##### PostScript documentation #####
psdocs:	build_docs

###### Build the object files while not in the Obj directory ##################
ifneq ($(OBJSDIR), $(CURDIR))

ifeq ($(TOPDIR)/Source/Linux/$(notdir $(CURDIR)),$(CURDIR))

$(TARGETDIR):
	@printf "Creating directory: $(TARGETDIR) ... "
	@mkdir -p $(TARGETDIR)
	@printf "[OK]\n"

$(OBJSDIR):
	@printf "Creating directory: $(OBJSDIR) ... "
	@mkdir -p $(OBJSDIR)
	@printf "[OK]\n"

CPPFILES	:=	$(foreach dir,$(SOURCEDIR),$(notdir $(wildcard $(dir)/*.cpp))) 
HPPFILES	:=	$(foreach dir,$(HEADERDIR),$(notdir $(wildcard $(dir)/*.hpp)))
CMNFILES	:=	$(foreach dir,$(COMMONINCDIR),$(notdir $(wildcard $(dir)/*.hpp)))

#####################
export VPATH	:= $(foreach dir,$(SOURCEDIR),$(CURDIR)/$(dir))
export OBJS = $(CPPFILES:.cpp=.o)
HEADERS = $(wildcard *.hpp)
#####################

$(TARGET): $(TARGETDIR) $(OBJSDIR)
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(OBJSDIR)
	@/usr/bin/time -f "%E" -o $(OBJSDIR)/compiletime \
	$(MAKE) --no-print-directory -C $(OBJSDIR) \
	-f $(TOPSRC)/Linux/MakefileCommon TARGET=$(TARGET) OBJSDIR=$(OBJSDIR) \
	LOCALINCDIR=$(CURDIR)/Headers ZEDINCDIR=$(ZEDINCDIR) \
	COPYFILES=False $(BUILD_TYPE)
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Compile Time: "
	@cat $(OBJSDIR)/compiletime
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"

endif

else
##### In the intermediate build directory #####################################
ifneq ($(NOLIB), True)

ifneq ($(SHARED), False)
$(TARGET): $(OBJS)
	@printf "\n\n%s" "------------------------- MESSAGES FROM THE COMPILER ---"
	@printf "%s\n" "-----------------------"
	@cat *.cmsgs
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Linking $(TARGET) ... "
	@$(CPP) -m$(BITSIZE) -shared -Wl,-soname,$(ZEDTARGET).so.1 \
	-o $(TARGETDIR)/$(TARGET) $(OBJS) > $*.lmsgs
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
else
$(TARGET): $(OBJS)
	@printf "\n\n%s" "------------------------- MESSAGES FROM THE COMPILER ---"
	@printf "%s\n" "-----------------------"
	@cat *.cmsgs
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Linking $(TARGET) ... "
	@ar rcsv $(TARGETDIR)/$(TARGET) $(OBJS) > $*.lmsgs
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
endif
%.o: %.cpp
	@printf "Compiling: $< ... "
	@$(CPP) -MMD -MP -MF $*.d $(CPPFLAGS) -I$(LOCALINCDIR) $(ZEDINCDIR) \
	$(SYSIPATH) $< -o $@ 2> $*.cmsgs;\
	RETVAL=$$?;\
	if [[ $$RETVAL == 0 ]]; then\
		printf "[OK]\n";\
	else\
		printf "\n\n%s" "----------------------------------- ERROR ---------";\
		printf "%s\n" "----------------------------";\
		cat $*.cmsgs;\
		printf "%s" "-------------------------------------------------------";\
		printf "%s\n\n" "------------------------";\
		exit 1;\
	fi
-include *.d

endif
endif

#####################
ifeq ($(COPYFILES), True)
.PHONY: copyfiles
$(ZEDPATH)/include/$(PLATFORM):
	@printf "Creating directory: $(ZEDPATH)/include/$(PLATFORM) ... "
	@mkdir -p $(ZEDPATH)/include/$(PLATFORM)
	@printf "[OK]\n"

$(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE):
	@printf "Creating directory: $(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE) ... "
	@mkdir -p $(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE)
	@printf "[OK]\n"

copyfiles: $(ZEDPATH)/include/$(PLATFORM) $(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE)
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
	@printf "Copying local header files to: $(ZEDPATH)/include/$(PLATFORM) ..."
	@printf " "
	@if test -d ./Headers; then cp -f ./Headers/*.hpp \
	$(ZEDPATH)/include/$(PLATFORM)/; fi
	@printf "[OK]\n"
	@printf "Copying common header files to: $(ZEDPATH)/include/$(PLATFORM) .."
	@printf ". "
	@cp -rf $(TOPSRC)/Common/Headers/* $(ZEDPATH)/include/$(PLATFORM)/
	@printf "[OK]\n"
	@printf "Copying library files to $(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE) ... "
	@files=$$(ls $(TARGETDIR)/*.a 2> /dev/null | wc -l);\
	if [ "$$files" != "0" ] ; then cp -f $(TARGETDIR)/*.a \
	$(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE)/; fi
	@files=$$(ls $(TARGETDIR)/*.so 2> /dev/null | wc -l);\
	if [ "$$files" != "0" ] ; then cp -f $(TARGETDIR)/*.so \
	$(ZEDPATH)/lib/$(PLATFORM)/$(ARCH)/$(BITSIZE)/; fi
	@printf "[OK]\n"
	@printf "%s" "------------------------------------------------------------"
	@printf "%s\n" "-------------------"
endif
#####################

##### Build PostScript Documents #####
DOCFILES_CPP = $(CPPFILES:.cpp=.cpp.ps)
DOCFILES_HPP = $(HPPFILES:.hpp=.hpp.ps)

$(PSDOCSDIR):
	mkdir -p $(PSDOCSDIR)

%.cpp.ps: $(SOURCEDIR)/%.cpp
	a2ps --footer="" --left-footer="" --footer="" --left-footer="" --right-footer="" --footer="" --left-footer="" --header="" --center-title='[ $(DOCPREFIX)$$n ]' --right-title='$$Q' --line-numbers=1 -T 4 --pro=color $< -o $(PSDOCSDIR)/$@
%.hpp.ps: $(HEADERDIR)/%.hpp
	a2ps --footer="" --left-footer="" --footer="" --left-footer="" --right-footer="" --footer="" --left-footer="" --header="" --center-title='[ $(DOCPREFIX)$$n ]' --right-title='$$Q' --line-numbers=1 -T 4 --pro=color $< -o $(PSDOCSDIR)/$@

build_docs: $(PSDOCSDIR) $(DOCFILES_CPP) $(DOCFILES_HPP)

