%!PS-Adobe-3.0
%%Title: GLVertexCache.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:27:20 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <GLVertexCache.hpp>) p n
(2) # () S
(#include) K
( <GLExtender.hpp>) p n
(3) # () N
(4) # () S
(#define) K
( BUFFER_OFFSET\( offset \) \(\() p
(char) k
( *\)) p
(NULL) K
( + \(offset\)\)) p n
(5) # () N
(6) # () S
(namespace) K
( ZED) p n
(7) # ({) N
(8) # () S 4 T () S
(namespace) K
( Renderer) p n
(9) # () S 4 T ({) N
(10) # () S 4 T () S 8 T (GLVertexCache::GLVertexCache\( \)) N
(11) # () S 4 T () S 8 T ({) N
(12) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Using ctor. default\\n) str
(" \);) p n
(13) # () S 4 T () S 8 T () S 12 T () S
(// Null any pointers and initialise all variables to sane values) c n
(14) # () S
() p 4 T () S 8 T () S 12 T (m_VertexAttributeID = 0;) N
(15) # () N
(16) # () S 4 T () S 8 T () S 12 T () S
(// Give default values if not present) c n
(17) # () S
() p 4 T () S 8 T () S 12 T (m_MaxVertices = 1000;) N
(18) # () S 4 T () S 8 T () S 12 T (m_MaxIndices = 1000;) N
(19) # () S 4 T () S 8 T () S 12 T (m_AttributeCount = 0;) N
(20) # () S 4 T () S 8 T () S 12 T (m_VertexAttributes = 0;) N
(21) # () S 4 T () S 8 T () S 12 T (m_CacheLines = 10;) N
(22) # () N
(23) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ZED_NULL;) N
(24) # () S 4 T () S 8 T () S 12 T (m_pVertexBuffer = ZED_NULL;) N
(25) # () S 4 T () S 8 T () S 12 T (m_pIndexBuffer = ZED_NULL;) N
(26) # () S 4 T () S 8 T () S 12 T (m_pVertexCount = ZED_NULL;) N
(27) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ZED_NULL;) N
(28) # () S 4 T () S 8 T () S 12 T (m_pMaterialID = ZED_NULL;) N
(29) # () N
(30) # () S 4 T () S 8 T () S 12 T () S
(// Get the stride from the Attribs passed in) c n
(31) # () S
() p 4 T () S 8 T () S 12 T (m_Stride = 0;) N
(32) # () N
(33) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_AttributeCount; i++ \)) p n
(34) # () S 4 T () S 8 T () S 12 T ({) S 16 T () N
(35) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// As an attribute is a four-bit value, extract a half byte) c n
(36) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// from the attributes pushed in) c n
(37) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (ZED_BYTE Attrib = 0x0F & \( m_VertexAttributes >> \( i*4 \) \);) N
(38) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(39) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Stride += AttribToSize\( Attrib \);) N
(40) # () S 4 T () S 8 T () S 12 T (}) N
(41) # () S 4 T () S 8 T (}) N
(42) # () N
(43) # () S 4 T () S 8 T (GLVertexCache::GLVertexCache\( ) S
(const) K
( ZED_MEMSIZE p_VertexCount,) p n
(44) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_IndexCount, ) p
(const) K
( ZED_MEMSIZE p_AttributeCount,) p n
(45) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_UINT64 p_VertexAttributes,) p n
(46) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_CacheLines \)) p n
(47) # () S 4 T () S 8 T ({) N
(48) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(using ctor. params:\\n\\t0: %d\\n\\t1: %d\\n\\t2: %d\\n) str
(") p n
(49) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(\\t3: 0x%016X\\n\\t4: %d\\n) str
(",) p n
(50) # () S 4 T () S 8 T () S 12 T () S 16 T (p_VertexCount, p_IndexCount, p_AttributeCount,) N
(51) # () S 4 T () S 8 T () S 12 T () S 16 T (p_VertexAttributes, p_CacheLines \);) N
(52) # () S 4 T () S 8 T () S 12 T () S
(// Null any pointers and initialise all variables to sane values) c n
(53) # () S
() p 4 T () S 8 T () S 12 T (m_VertexAttributeID = 0;) N
(54) # () N
(55) # () S 4 T () S 8 T () S 12 T () S
(// Give default values if not present) c n
(56) # () S
() p 4 T () S 8 T () S 12 T (m_MaxVertices = p_VertexCount ? p_VertexCount : 1000;) N
(57) # () S 4 T () S 8 T () S 12 T (m_MaxIndices = p_IndexCount ? p_IndexCount : 1000;) N
(58) # () S 4 T () S 8 T () S 12 T (m_AttributeCount = p_AttributeCount ? p_AttributeCount : 0;) N
(59) # () S 4 T () S 8 T () S 12 T (m_VertexAttributes = p_VertexAttributes ?) N
(60) # () S 4 T () S 8 T () S 12 T () S 16 T (p_VertexAttributes : 0;) N
(61) # () S 4 T () S 8 T () S 12 T (m_CacheLines = p_CacheLines ? p_CacheLines : 10;) N
(62) # () N
(63) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ZED_NULL;) N
(64) # () S 4 T () S 8 T () S 12 T (m_pVertexBuffer = ZED_NULL;) N
(65) # () S 4 T () S 8 T () S 12 T (m_pIndexBuffer = ZED_NULL;) N
(66) # () S 4 T () S 8 T () S 12 T (m_pVertexCount = ZED_NULL;) N
(67) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ZED_NULL;) N
(68) # () S 4 T () S 8 T () S 12 T (m_pMaterialID = ZED_NULL;) N
(69) # () N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 1/8) (Jan 13, 12 20:02) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T () S
(// Get the stride from the Attribs passed in) c n
(71) # () S
() p 4 T () S 8 T () S 12 T (m_Stride = 0;) N
(72) # () N
(73) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_AttributeCount; i++ \)) p n
(74) # () S 4 T () S 8 T () S 12 T ({) S 16 T () N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// As an attribute is a four-bit value, extract a nybble) c n
(76) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// from the attributes pushed in) c n
(77) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (ZED_BYTE Attrib = 0x0F & \( m_VertexAttributes >> \( i*4 \) \);) N
(78) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Stride += AttribToSize\( Attrib \);) N
(80) # () S 4 T () S 8 T () S 12 T (}) N
(81) # () S 4 T () S 8 T (}) N
(82) # () N
(83) # () S 4 T () S 8 T (GLVertexCache::~GLVertexCache\( \)) N
(84) # () S 4 T () S 8 T ({) N
(85) # () S 4 T () S 8 T () S 12 T () S
(// Flush all buffers and delete them) c n
(86) # () S
() p 4 T () S 8 T () S 12 T () S
(this) K
(->Flush\( \);) p n
(87) # () N
(88) # () S 4 T () S 8 T () S 12 T (zglBindVertexArray\( 0 \);) N
(89) # () N
(90) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pVertexBuffer != ZED_NULL \)) p n
(91) # () S 4 T () S 8 T () S 12 T ({) N
(92) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Free the buffers and delete the handles) c n
(93) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglDeleteBuffers\( m_CacheLines, m_pVertexBuffer \);) N
(94) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pVertexBuffer;) p n
(95) # () S 4 T () S 8 T () S 12 T (}) N
(96) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pIndexBuffer != ZED_NULL \)) p n
(97) # () S 4 T () S 8 T () S 12 T ({) N
(98) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Free the buffers and delete the handles) c n
(99) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglDeleteBuffers\( m_CacheLines, m_pIndexBuffer \);) N
(100) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pIndexBuffer;) p n
(101) # () S 4 T () S 8 T () S 12 T (}) N
(102) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pIndexCount != ZED_NULL \)) p n
(103) # () S 4 T () S 8 T () S 12 T ({) N
(104) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pIndexCount;) p n
(105) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pIndexCount = ZED_NULL;) N
(106) # () S 4 T () S 8 T () S 12 T (}) N
(107) # () N
(108) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pVertexCount != ZED_NULL \)) p n
(109) # () S 4 T () S 8 T () S 12 T ({) N
(110) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pVertexCount;) p n
(111) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pVertexCount = ZED_NULL;) N
(112) # () S 4 T () S 8 T () S 12 T (}) N
(113) # () N
(114) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pMaterialID != ZED_NULL \)) p n
(115) # () S 4 T () S 8 T () S 12 T ({) N
(116) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( [ ] m_pMaterialID;) p n
(117) # () S 4 T () S 8 T () S 12 T (}) N
(118) # () S 4 T () S 8 T (}) N
(119) # () N
(120) # () S 4 T () S 8 T (ZED_UINT32 GLVertexCache::Initialise\( \)) N
(121) # () S 4 T () S 8 T ({) N
(122) # () S 4 T () S 8 T () S 12 T (m_pVertexBuffer = ) S
(new) K
( GLuint[ m_CacheLines ];) p n
(123) # () S 4 T () S 8 T () S 12 T (m_pIndexBuffer = ) S
(new) K
( GLuint[ m_CacheLines ];) p n
(124) # () S 4 T () S 8 T () S 12 T (m_pVertexCount = ) S
(new) K
( ZED_MEMSIZE[ m_CacheLines ];) p n
(125) # () S 4 T () S 8 T () S 12 T (m_pIndexCount = ) S
(new) K
( ZED_MEMSIZE[ m_CacheLines ];) p n
(126) # () S 4 T () S 8 T () S 12 T (m_pMaterialID = ) S
(new) K
( ZED_UINT32[ m_CacheLines ];) p n
(127) # () N
(128) # () S 4 T () S 8 T () S 12 T () S
(// Generate and bind the vertex array ID and vertex buffer) c n
(129) # () S
() p 4 T () S 8 T () S 12 T (zglGenVertexArrays\( 1, &m_VertexAttributeID \);) N
(130) # () N
(131) # () S 4 T () S 8 T () S 12 T (zglBindVertexArray\( m_VertexAttributeID \);) N
(132) # () N
(133) # () S 4 T () S 8 T () S 12 T (zglGenBuffers\( m_CacheLines, m_pVertexBuffer \);) N
(134) # () S 4 T () S 8 T () S 12 T (zglGenBuffers\( m_CacheLines, m_pIndexBuffer \);) N
(135) # () N
(136) # () S 4 T () S 8 T () S 12 T (GLenum Error = 0;) N
(137) # () N
(138) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_CacheLines; i++ \)) p n
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 2/8) (Jan 13, 12 20:02) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T ({) N
(140) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Set the index and vertex counts to zero as well as the) c n
(141) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// material ID for each cache line) c n
(142) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (m_pVertexCount[ i ] = 0;) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pIndexCount[ i ] = 0;) N
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pMaterialID[ i ] = 0;) N
(145) # () N
(146) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ARRAY_BUFFER, m_pVertexBuffer[ i ] \);) N
(147) # () N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Allocate memory for a streaming buffer) c n
(149) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglBufferData\( GL_ARRAY_BUFFER, m_MaxVertices*m_Stride,) N
(150) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ZED_NULL, GL_DYNAMIC_DRAW \);) N
(151) # () N
(152) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ELEMENT_ARRAY_BUFFER, m_pIndexBuffer[ i ] \);) N
(153) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBufferData\( GL_ELEMENT_ARRAY_BUFFER,) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_MaxIndices*) S
(sizeof) K
(\( ZED_UINT16 \), ZED_NULL,) p n
(155) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (GL_DYNAMIC_DRAW \);) N
(156) # () N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Check that the buffer was allocated without any problems) c n
(158) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Error = glGetError\( \);) N
(159) # () N
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( Error == GL_OUT_OF_MEMORY \)) p n
(161) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(162) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// No GPU memory available =\() c n
(163) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLVertexCache::Initialise] ) str
(") p n
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(<ERROR> Failed to allocate memory on the graphics ) str
(") p n
(165) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(device.\\n) str
(" \);) p n
(166) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedAssert\( ZED_FALSE \);) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(168) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(169) # () S 4 T () S 8 T () S 12 T (}) N
(170) # () N
(171) # () S 4 T () S 8 T () S 12 T (zglBindVertexArray\( 0 \);) N
(172) # () N
(173) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(174) # () S 4 T () S 8 T (}) N
(175) # () N
(176) # () S 4 T () S 8 T (ZED_UINT32 GLVertexCache::Add\( ) S
(const) K
( ZED_MEMSIZE p_VertexCount,) p n
(177) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BYTE *p_pVertices, ) p
(const) K
( ZED_MEMSIZE p_IndexCount,) p n
(178) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_UINT16 *p_pIndices, ) p
(const) K
( ZED_UINT32 p_MaterialID \)) p n
(179) # () S 4 T () S 8 T ({) N
(180) # () S 4 T () S 8 T () S 12 T () S
(// Find a cache line with the same material ID.) c n
(181) # () S
() p 4 T () S 8 T () S 12 T () S
(// If there isn't a cache line using the same material ID, render) c n
(182) # () S
() p 4 T () S 8 T () S 12 T () S
(// the fullest cache line and use a new line.) c n
(183) # () S
() p 4 T () S 8 T () S 12 T (ZED_UINT32 Material = 0;) N
(184) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE CacheLine = 0;) N
(185) # () S 4 T () S 8 T () S 12 T (ZED_BOOL MaterialMatch = ZED_FALSE;) N
(186) # () N
(187) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_CacheLines; i++ \)) p n
(188) # () S 4 T () S 8 T () S 12 T ({) N
(189) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_pMaterialID[ i ] == p_MaterialID \)) p n
(190) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(191) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (MaterialMatch = ZED_TRUE;) N
(192) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Material = p_MaterialID;) N
(193) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (CacheLine = i;) N
(194) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(195) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(196) # () S 4 T () S 8 T () S 12 T (}) N
(197) # () N
(198) # () S 4 T () S 8 T () S 12 T () S
(// The material IDs don't match) c n
(199) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( MaterialMatch != ZED_TRUE \)) p n
(200) # () S 4 T () S 8 T () S 12 T ({) N
(201) # () S 4 T () S 8 T () S 12 T () S 16 T (CacheLine = FlushFullestLine\( \);) N
(202) # () S 4 T () S 8 T () S 12 T (}) N
(203) # () N
(204) # () S 4 T () S 8 T () S 12 T () S
(// See if the vertices and indices will fit into this cache) c n
(205) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( p_VertexCount > m_MaxVertices \)) p n
(206) # () S 4 T () S 8 T () S 12 T ({) N
(207) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLVertexCache::Add] <ERROR> ) str
(") p n
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 3/8) (Jan 13, 12 20:02) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to allocate vertices.\\n) str
(" \);) p n
(209) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(\\tTried to allocate %d vertices.  Capacity: %d\\n) str
(",) p n
(210) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (p_VertexCount, m_MaxVertices \);) N
(211) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(212) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(213) # () S 4 T () S 8 T () S 12 T (}) N
(214) # () N
(215) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_IndexCount > m_MaxIndices \)) p n
(216) # () S 4 T () S 8 T () S 12 T ({) N
(217) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLVertexCache::Add] <ERROR> ) str
(") p n
(218) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to allocate indices.\\n) str
(" \);) p n
(219) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(220) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(221) # () S 4 T () S 8 T () S 12 T (}) N
(222) # () N
(223) # () S 4 T () S 8 T () S 12 T () S
(// If the vertices and indices will fit, but there are currently) c n
(224) # () S
() p 4 T () S 8 T () S 12 T () S
(// too many already present, then flush the cache to put them into) c n
(225) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( p_VertexCount >) p n
(226) # () S 4 T () S 8 T () S 12 T () S 16 T (\( m_MaxVertices - m_pVertexCount[ CacheLine ] \) \)) N
(227) # () S 4 T () S 8 T () S 12 T ({) N
(228) # () S 4 T () S 8 T () S 12 T () S 16 T (FlushLine\( CacheLine \);) N
(229) # () S 4 T () S 8 T () S 12 T (}) N
(230) # () N
(231) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_IndexCount > \( m_MaxIndices - m_pIndexCount[ CacheLine ] \) \)) p n
(232) # () S 4 T () S 8 T () S 12 T ({) N
(233) # () S 4 T () S 8 T () S 12 T () S 16 T (FlushLine\( CacheLine \);) N
(234) # () S 4 T () S 8 T () S 12 T (}) N
(235) # () N
(236) # () S 4 T () S 8 T () S 12 T () S
(// Okay, now that the cache is ready, add the vertices) c n
(237) # () S
() p 4 T () S 8 T () S 12 T (zglBindVertexArray\( m_VertexAttributeID \);) N
(238) # () S 4 T () S 8 T () S 12 T () N
(239) # () S 4 T () S 8 T () S 12 T () S
(// Fill the vertex buffer) c n
(240) # () S
() p 4 T () S 8 T () S 12 T (zglBufferSubData\( GL_ARRAY_BUFFER,) N
(241) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pVertexCount[ CacheLine ]*m_Stride,) N
(242) # () S 4 T () S 8 T () S 12 T () S 16 T (p_VertexCount*m_Stride, p_pVertices \);) N
(243) # () N
(244) # () N
(245) # () S 4 T () S 8 T () S 12 T () S
(// The accumulated dimension is used for the offset between values i) c n
0 T (n) N
(246) # () S
() p 4 T () S 8 T () S 12 T () S
(// the vertex attributes) c n
(247) # () S
() p 4 T () S 8 T () S 12 T (ZED_MEMSIZE AccDimension = 0;) N
(248) # () S 4 T () S 8 T () S 12 T () S
(// Set up the vertex format being used) c n
(249) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_AttributeCount; i++ \)) p n
(250) # () S 4 T () S 8 T () S 12 T ({) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Extract the type and dimension from the attributes) c n
(252) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (ZED_MEMSIZE Dimension = 0;) N
(253) # () S 4 T () S 8 T () S 12 T () S 16 T (GLenum Type = GL_INVALID_ENUM;) N
(254) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_MEMSIZE TypeSize = 0;) N
(255) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_BYTE Attrib = 0x0F & \( m_VertexAttributes >> \( i*4 \) \);) N
(256) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(257) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the dimensions by extracting the nth nybble from the ) c n
(258) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// attribute ID) c n
(259) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (Dimension = 0x03 & \( Attrib \)+1;) N
(260) # () N
(261) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the type using a similar technique) c n
(262) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(switch) K
(\( \( 0x0C & \( Attrib \) \) >> 2 \)) p n
(263) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(264) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( 0:) p n
(265) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(266) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Type = GL_INT;) N
(267) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (TypeSize = ) S
(sizeof) K
(\( ZED_INT32 \);) p n
(268) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(269) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(270) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( 1:) p n
(271) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(272) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Type = GL_FLOAT;) N
(273) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (TypeSize = ) S
(sizeof) K
(\( ZED_FLOAT32 \);) p n
(274) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(275) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 4/8) (Jan 13, 12 20:02) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(276) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( 2:) p n
(277) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(278) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Type = GL_DOUBLE;) N
(279) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (TypeSize = ) S
(sizeof) K
(\( ZED_FLOAT64 \);) p n
(280) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(281) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(282) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(case) K
( 3:) p n
(283) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(284) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Type = GL_FLOAT;) N
(285) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (TypeSize = ) S
(sizeof) K
(\( ZED_FLOAT32 \);) p n
(286) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(// Assuming square matrices) c n
(287) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Dimension *= Dimension;) N
(288) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(289) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(290) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(291) # () N
(292) # () S 4 T () S 8 T () S 12 T () S 16 T (zglVertexAttribPointer\( i, Dimension, Type, GL_FALSE,) N
(293) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_Stride,) N
(294) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (BUFFER_OFFSET\( TypeSize*AccDimension \) \);) N
(295) # () N
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (AccDimension += Dimension;) N
(297) # () S 4 T () S 8 T () S 12 T (}) N
(298) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(299) # () S 4 T () S 8 T () S 12 T () S
(// Initialise the amount of attributes available) c n
(300) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE j = 0; j < m_AttributeCount; j++ \)) p n
(301) # () S 4 T () S 8 T () S 12 T ({) N
(302) # () S 4 T () S 8 T () S 12 T () S 16 T (zglEnableVertexAttribArray\( j \);) N
(303) # () S 4 T () S 8 T () S 12 T (}) N
(304) # () N
(305) # () S 4 T () S 8 T () S 12 T () S
(// There shouldn't be a problem, but just in case...) c n
(306) # () S
() p 4 T () S 8 T () S 12 T (GLenum Error = glGetError\( \);) N
(307) # () N
(308) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Error == GL_OUT_OF_MEMORY \)) p n
(309) # () S 4 T () S 8 T () S 12 T ({) N
(310) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Unbind the buffers and complain) c n
(311) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ARRAY_BUFFER, 0 \);) N
(312) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ELEMENT_ARRAY_BUFFER, 0 \);) N
(313) # () N
(314) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLVertexCache::Add] <ERROR> ) str
(") p n
(315) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Not enough memory available on graphics device.\\n) str
(" \);) p n
(316) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(317) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(318) # () S 4 T () S 8 T () S 12 T (}) N
(319) # () S 4 T () S 8 T () S 12 T () N
(320) # () S 4 T () S 8 T () S 12 T () S
(// Before filling the index buffer, the indices need to be offset) c n
(321) # () S
() p 4 T () S 8 T () S 12 T () S
(// by the maximum vertex) c n
(322) # () S
() p 4 T () S 8 T () S 12 T (ZED_UINT16 *pIndices = ) S
(new) K
( ZED_UINT16[ p_IndexCount ];) p n
(323) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < p_IndexCount; i++ \)) p n
(324) # () S 4 T () S 8 T () S 12 T ({) N
(325) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Add the index) c n
(326) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (pIndices[ i ] = p_pIndices[ i ] + m_pVertexCount[ CacheLine ];) N
(327) # () S 4 T () S 8 T () S 12 T (}) N
(328) # () N
(329) # () S 4 T () S 8 T () S 12 T () S
(// Fill the index buffer) c n
(330) # () S
() p 4 T () S 8 T () S 12 T (zglBufferSubData\( GL_ELEMENT_ARRAY_BUFFER,) N
(331) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pIndexCount[ CacheLine ]*) S
(sizeof) K
(\( ZED_UINT16 \),) p n
(332) # () S 4 T () S 8 T () S 12 T () S 16 T (p_IndexCount*) S
(sizeof) K
(\( ZED_UINT16 \),) p n
(333) # () S 4 T () S 8 T () S 12 T () S 16 T (pIndices \);) N
(334) # () N
(335) # () S 4 T () S 8 T () S 12 T () S
(delete) K
( [ ] pIndices;) p n
(336) # () N
(337) # () S 4 T () S 8 T () S 12 T (Error = glGetError\( \);) N
(338) # () S 4 T () S 8 T () S 12 T () S
(// Again, this shouldn't happen if the cache was allocated already) c n
(339) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( Error == GL_OUT_OF_MEMORY \)) p n
(340) # () S 4 T () S 8 T () S 12 T ({) N
(341) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Unbind the buffers and complain) c n
(342) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ARRAY_BUFFER, 0 \);) N
(343) # () S 4 T () S 8 T () S 12 T () S 16 T (zglBindBuffer\( GL_ELEMENT_ARRAY_BUFFER, 0 \);) N
(344) # () N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 5/8) (Jan 13, 12 20:02) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(345) # () p 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLVertexCache::Add] <ERROR> ) str
(") p n
(346) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Not enough memory avilable on the graphics device.\\n) str
(" \);) p n
(347) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(348) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(349) # () S 4 T () S 8 T () S 12 T (}) N
(350) # () N
(351) # () S 4 T () S 8 T () S 12 T () S
(// Everything went fine, increment the vertex and index count) c n
(352) # () S
() p 4 T () S 8 T () S 12 T (m_pVertexCount[ CacheLine ] += p_VertexCount;) N
(353) # () S 4 T () S 8 T () S 12 T (m_pIndexCount[ CacheLine ] += p_IndexCount;) N
(354) # () N
(355) # () S 4 T () S 8 T () S 12 T () S
(// Unbind the buffer) c n
(356) # () S
() p 4 T () S 8 T () S 12 T (zglBindVertexArray\( 0 \);) N
(357) # () N
(358) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(359) # () S 4 T () S 8 T (}) N
(360) # () N
(361) # () S 4 T () S 8 T () S
(void) k
( GLVertexCache::FlushLine\( ) p
(const) K
( ZED_MEMSIZE p_Index \)) p n
(362) # () S 4 T () S 8 T ({) N
(363) # () S 4 T () S 8 T () S 12 T () S
(// Nothing to render?) c n
(364) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( \( m_pVertexCount == ZED_NULL \) ||) p n
(365) # () S 4 T () S 8 T () S 12 T () S 16 T (\( m_pIndexCount == ZED_NULL \) \)) N
(366) # () S 4 T () S 8 T () S 12 T ({) N
(367) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
(;) p n
(368) # () S 4 T () S 8 T () S 12 T (}) N
(369) # () S 4 T () S 8 T () S 12 T () N
(370) # () S 4 T () S 8 T () S 12 T () S
(// Anything to render?) c n
(371) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( \( m_pVertexCount[ p_Index ] == 0 \) ||) p n
(372) # () S 4 T () S 8 T () S 12 T () S 16 T (\( m_pIndexCount[ p_Index ] == 0 \) \)) N
(373) # () S 4 T () S 8 T () S 12 T ({) N
(374) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
(;) p n
(375) # () S 4 T () S 8 T () S 12 T (}) N
(376) # () N
(377) # () S 4 T () S 8 T () S 12 T () S
(// Bind the buffer and draw using the material) c n
(378) # () S
() p 4 T () S 8 T () S 12 T (zglBindVertexArray\( m_VertexAttributeID \);) N
(379) # () S 4 T () S 8 T () S 12 T () N
(380) # () S 4 T () S 8 T () S 12 T (zglDrawElements\( GL_TRIANGLES, m_pIndexCount[ p_Index ],) N
(381) # () S 4 T () S 8 T () S 12 T () S 16 T (GL_UNSIGNED_SHORT, \( GLubyte* \)) S
(NULL) K
( + 0 \);) p n
(382) # () N
(383) # () S 4 T () S 8 T () S 12 T () S
(// Unbind the buffer) c n
(384) # () S
() p 4 T () S 8 T () S 12 T (zglBindVertexArray\( 0 \);) N
(385) # () S 4 T () S 8 T () S 12 T () N
(386) # () S 4 T () S 8 T () S 12 T () S
(// Reset the size of the vertices and indices) c n
(387) # () S
() p 4 T () S 8 T () S 12 T (m_pVertexCount[ p_Index ] = 0;) N
(388) # () S 4 T () S 8 T () S 12 T (m_pIndexCount[ p_Index ] = 0;) N
(389) # () S 4 T () S 8 T (}) N
(390) # () N
(391) # () S 4 T () S 8 T () S
(void) k
( GLVertexCache::Clear\( \)) p n
(392) # () S 4 T () S 8 T ({) N
(393) # () S 4 T () S 8 T () S 12 T (zglDeleteBuffers\( m_CacheLines, m_pVertexBuffer \);) N
(394) # () S 4 T () S 8 T () S 12 T (zglDeleteBuffers\( m_CacheLines, m_pIndexBuffer \);) N
(395) # () S 4 T () S 8 T (}) N
(396) # () N
(397) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::FlushFullestLine\( \)) N
(398) # () S 4 T () S 8 T ({) N
(399) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE VertexCount = 0;) N
(400) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE IndexCount = 0;) N
(401) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE FullestLine = 0;) N
(402) # () N
(403) # () S 4 T () S 8 T () S 12 T () S
(// Slowest part ;P) c n
(404) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_CacheLines; i++ \)) p n
(405) # () S 4 T () S 8 T () S 12 T ({) N
(406) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_pVertexCount[ i ] > VertexCount \)) p n
(407) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(408) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (VertexCount = m_pVertexCount[ i ];) N
(409) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (FullestLine = i;) N
(410) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(411) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_pIndexCount[ i ] > IndexCount \)) p n
(412) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(413) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (IndexCount = m_pIndexCount[ i ];) N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 6/8) (Jan 13, 12 20:02) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(414) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (FullestLine = i;) N
(415) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(416) # () S 4 T () S 8 T () S 12 T (}) N
(417) # () N
(418) # () S 4 T () S 8 T () S 12 T () S
(// If the indices are the fullest, they get flushed, otherwise the) c n
(419) # () S
() p 4 T () S 8 T () S 12 T () S
(// line with the most vertices is flushed) c n
(420) # () S
() p 4 T () S 8 T () S 12 T () S
(this) K
(->FlushLine\( FullestLine \);) p n
(421) # () N
(422) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_CacheLines;) p n
(423) # () S 4 T () S 8 T (}) N
(424) # () N
(425) # () S 4 T () S 8 T () S
(void) k
( GLVertexCache::Flush\( \)) p n
(426) # () S 4 T () S 8 T ({) N
(427) # () S 4 T () S 8 T () S 12 T () S
(// Render all cache lines) c n
(428) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < m_CacheLines; i++ \)) p n
(429) # () S 4 T () S 8 T () S 12 T ({) N
(430) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(this) K
(->FlushLine\( i \);) p n
(431) # () S 4 T () S 8 T () S 12 T (}) N
(432) # () S 4 T () S 8 T (}) N
(433) # () N
(434) # () S 4 T () S 8 T (ZED_UINT64 GLVertexCache::GetAttributes\( \)) N
(435) # () S 4 T () S 8 T ({) N
(436) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_VertexAttributes;) p n
(437) # () S 4 T () S 8 T (}) N
(438) # () N
(439) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::GetAttributeCount\( \)) N
(440) # () S 4 T () S 8 T ({) N
(441) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_AttributeCount;) p n
(442) # () S 4 T () S 8 T (}) N
(443) # () N
(444) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::GetVertexCapacity\( \)) N
(445) # () S 4 T () S 8 T ({) N
(446) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_MaxVertices;) p n
(447) # () S 4 T () S 8 T (}) N
(448) # () N
(449) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::GetIndexCapacity\( \)) N
(450) # () S 4 T () S 8 T ({) N
(451) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_MaxIndices;) p n
(452) # () S 4 T () S 8 T (}) N
(453) # () N
(454) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::GetLineCount\( \)) N
(455) # () S 4 T () S 8 T ({) N
(456) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_CacheLines;) p n
(457) # () S 4 T () S 8 T (}) N
(458) # () N
(459) # () S 4 T () S 8 T (ZED_MEMSIZE GLVertexCache::AttribToSize\( ZED_BYTE p_Attrib \)) N
(460) # () S 4 T () S 8 T ({) N
(461) # () S 4 T () S 8 T () S 12 T () S
(// Should be TTSS, where TT is type and SS is size) c n
(462) # () S
() p 4 T () S 8 T () S 12 T () S
(// Get the first two bytes and multiply by the last two bytes) c n
(463) # () S
() p 4 T () S 8 T () S 12 T (ZED_BYTE Type = p_Attrib >> 2;) N
(464) # () S 4 T () S 8 T () S 12 T () S
(// Mask the size bits) c n
(465) # () S
() p 4 T () S 8 T () S 12 T () S
(// 0000 0011) c n
(466) # () S
() p 4 T () S 8 T () S 12 T (ZED_MEMSIZE Size = \( 0x03 & p_Attrib \)+1;) N
(467) # () S 4 T () S 8 T () S 12 T () S
(switch) K
(\( Type \)) p n
(468) # () S 4 T () S 8 T () S 12 T ({) N
(469) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( 0:) p n
(470) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(471) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Size *= ) S
(sizeof) K
(\( ZED_INT32 \);) p n
(472) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(473) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(474) # () N
(475) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( 1:) p n
(476) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(477) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Size *= ) S
(sizeof) K
(\( ZED_FLOAT32 \);) p n
(478) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(479) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(480) # () N
(481) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( 2:) p n
(482) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 7/8) (Jan 13, 12 20:02) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(483) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Size *= ) S
(sizeof) K
(\( ZED_FLOAT64 \);) p n
(484) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(485) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(486) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( 3:) p n
(487) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(488) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Assuming square matrices) c n
(489) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Size *= Size;) N
(490) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Size *= ) S
(sizeof) K
(\( ZED_FLOAT32 \);) p n
(491) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(492) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(493) # () S 4 T () S 8 T () S 12 T (}) N
(494) # () N
(495) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Size;) p n
(496) # () S 4 T () S 8 T (}) N
(497) # () S 4 T (}) N
(498) # (}) N
(499) # () N
([ ZED::Renderer::GLVertexCache.cpp ]) (Page 8/8) (Jan 13, 12 20:02) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
