%!PS-Adobe-3.0
%%Title: Matrix3x3.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:21:42 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <Matrix3x3.hpp>) p n
(2) # () N
(3) # () S
(namespace) K
( ZED) p n
(4) # ({) N
(5) # () S 4 T () S
(namespace) K
( Arithmetic) p n
(6) # () S 4 T ({) N
(7) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Clone\( \) ) S
(const) K n
(8) # () S
() p 4 T () S 8 T ({) N
(9) # () S 4 T () S 8 T () S 12 T (Matrix3x3 *pClone = ) S
(new) K
( Matrix3x3\( \);) p n
(10) # () S 4 T () S 8 T () S 12 T (pClone->Copy\( *) S
(this) K
( \);) p n
(11) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *pClone;) p n
(12) # () S 4 T () S 8 T (}) N
(13) # () N
(14) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::Copy\( ) p
(const) K
( Matrix3x3 &p_Copy \)) p n
(15) # () S 4 T () S 8 T ({) N
(16) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = p_Copy[ 0 ];) N
(17) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = p_Copy[ 1 ];) N
(18) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = p_Copy[ 2 ];) N
(19) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = p_Copy[ 3 ];) N
(20) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = p_Copy[ 4 ];) N
(21) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = p_Copy[ 5 ];) N
(22) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = p_Copy[ 6 ];) N
(23) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = p_Copy[ 7 ];) N
(24) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = p_Copy[ 8 ];) N
(25) # () S 4 T () S 8 T (}) N
(26) # () N
(27) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::Identity\( \)) p n
(28) # () S 4 T () S 8 T ({) N
(29) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = m_M[ 4 ] = m_M[ 8 ] = 1.0f;) N
(30) # () N
(31) # () S 4 T () S 8 T () S 12 T () S
(// Cause cache issues by not assigning contiguously?) c n
(32) # () S
() p 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] =) N
(33) # () S 4 T () S 8 T () S 12 T () S 16 T (0.0f;) N
(34) # () S 4 T () S 8 T (}) N
(35) # () N
(36) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Rotate\( ) S
(const) K
( ZED_FLOAT32 p_Angle,) p n
(37) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Vector3 &p_Axis \)) p n
(38) # () S 4 T () S 8 T ({) N
(39) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Cos = 0.0f, Sin = 0.0f;) N
(40) # () N
(41) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Angle, Sin, Cos \);) N
(42) # () N
(43) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Tan = \( 1.0f - Cos \);) N
(44) # () N
(45) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = \( Tan*\( p_Axis[ 0 ]*p_Axis[ 0 ] \) \) + Cos;) N
(46) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = \( Tan*p_Axis[ 0 ]*p_Axis[ 1 ] \) + \( Sin*p_Axis[ 2 ] \);) N
(47) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = \( Tan*p_Axis[ 0 ]*p_Axis[ 2 ] \) + \( Sin*p_Axis[ 1 ] \);) N
(48) # () N
(49) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = \( Tan*p_Axis[ 0 ]*p_Axis[ 1 ] \) - \( Sin*p_Axis[ 2 ] \);) N
(50) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = \( Tan*\( p_Axis[ 1 ]*p_Axis[ 1 ] \) \) + Cos;) N
(51) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = \( Tan*p_Axis[ 1 ]*p_Axis[ 2 ] \) + \( Sin*p_Axis[ 0 ] \);) N
(52) # () N
(53) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = \( Tan*p_Axis[ 0 ]*p_Axis[ 1 ] \) + \( Sin*p_Axis[ 1 ] \);) N
(54) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = \( Tan*p_Axis[ 1 ]*p_Axis[ 2 ] \) - \( Sin*p_Axis[ 0 ] \);) N
(55) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = \( Tan* \( p_Axis[ 2 ]*p_Axis[ 2 ] \) \) + Cos;) N
(56) # () N
(57) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(58) # () S 4 T () S 8 T (}) N
(59) # () N
(60) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Rotate\( ) S
(const) K
( ZED_FLOAT32 p_Roll,) p n
(61) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_FLOAT32 p_Pitch, ) p
(const) K
( ZED_FLOAT32 p_Yaw \)) p n
(62) # () S 4 T () S 8 T ({) N
(63) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 CX = 0.0f, CY = 0.0f, CZ = 0.0f;) N
(64) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 SX = 0.0f, SY = 0.0f, SZ = 0.0f;) N
(65) # () N
(66) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Pitch, SX, CX \);) N
(67) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Yaw, SY, CY \);) N
(68) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Roll, SZ, CZ \);) N
(69) # () N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 1/11) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T (m_M[ 0 ] = CY*CZ;) N
(71) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = \( SX*SY*CZ \) + \( CX*SZ \);) N
(72) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = -\( CX*SY*CZ \) + \( SX*SZ \);) N
(73) # () N
(74) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = -\( CY*SZ \);) N
(75) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = -\( SX*SY*SZ \) + \( CX*CZ \);) N
(76) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = \( CX*SY*SZ \) + \( SX*CZ \);) N
(77) # () N
(78) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = SY;) N
(79) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = -\( SX*CY \);) N
(80) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = CX*CY;) N
(81) # () N
(82) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(83) # () S 4 T () S 8 T (}) N
(84) # () N
(85) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::RotateX\( ) S
(const) K
( ZED_FLOAT32 p_X \)) p n
(86) # () S 4 T () S 8 T ({) N
(87) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Sin = 0.0f, Cos = 0.0f;) N
(88) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_X, Sin, Cos \);) N
(89) # () N
(90) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = 1.0f;) N
(91) # () N
(92) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = Cos;) N
(93) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = Sin;) N
(94) # () N
(95) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = -Sin;) N
(96) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = Cos;) N
(97) # () N
(98) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 6 ] = 0.0f;) N
(99) # () N
(100) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(101) # () S 4 T () S 8 T (}) N
(102) # () N
(103) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::RotateY\( ) S
(const) K
( ZED_FLOAT32 p_Y \)) p n
(104) # () S 4 T () S 8 T ({) N
(105) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Sin = 0.0f, Cos = 0.0f;) N
(106) # () N
(107) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Y, Sin, Cos \);) N
(108) # () N
(109) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = Cos;) N
(110) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = -Sin;) N
(111) # () N
(112) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = 1.0f;) N
(113) # () N
(114) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = Sin;) N
(115) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = Cos;) N
(116) # () N
(117) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 7 ] = 0.0f;) N
(118) # () N
(119) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(120) # () S 4 T () S 8 T (}) N
(121) # () N
(122) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::RotateZ\( ) S
(const) K
( ZED_FLOAT32 p_Z \)) p n
(123) # () S 4 T () S 8 T ({) N
(124) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Sin = 0.0f, Cos = 0.0f;) N
(125) # () N
(126) # () S 4 T () S 8 T () S 12 T (Arithmetic::SinCos\( p_Z, Sin, Cos \);) N
(127) # () N
(128) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = Cos;) N
(129) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = Sin;) N
(130) # () N
(131) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = -Sin;) N
(132) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = Cos;) N
(133) # () N
(134) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = 1.0f;) N
(135) # () N
(136) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] = 0.0f;) N
(137) # () N
(138) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 2/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T (}) N
(140) # () N
(141) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Scale\( ) S
(const) K
( ZED_FLOAT32 p_Value \)) p n
(142) # () S 4 T () S 8 T ({) N
(143) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = m_M[ 4 ] = m_M[ 8 ] =  p_Value;) N
(144) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] =) N
(145) # () S 4 T () S 8 T () S 12 T () S 16 T (0.0f;) N
(146) # () S 4 T () S 8 T () S 12 T () N
(147) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(148) # () S 4 T () S 8 T (}) N
(149) # () N
(150) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Scale\( ) S
(const) K
( Vector3 &p_Scale \)) p n
(151) # () S 4 T () S 8 T ({) N
(152) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = p_Scale[ 0 ];) N
(153) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = p_Scale[ 1 ];) N
(154) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = p_Scale[ 2 ];) N
(155) # () N
(156) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] =) N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T (0.0f;) N
(158) # () N
(159) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(160) # () S 4 T () S 8 T (}) N
(161) # () N
(162) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::ScaleX\( ) S
(const) K
( ZED_FLOAT32 p_X \)) p n
(163) # () S 4 T () S 8 T ({) N
(164) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = p_X;) N
(165) # () N
(166) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] =) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 7 ] = 0.0f;) N
(168) # () N
(169) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(170) # () S 4 T () S 8 T (}) N
(171) # () N
(172) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::ScaleY\( ) S
(const) K
( ZED_FLOAT32 p_Y \)) p n
(173) # () S 4 T () S 8 T ({) N
(174) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = p_Y;) N
(175) # () N
(176) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] =) N
(177) # () S 4 T () S 8 T () S 12 T () S 16 T (0.0f;) N
(178) # () N
(179) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(180) # () S 4 T () S 8 T (}) N
(181) # () N
(182) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::ScaleZ\( ) S
(const) K
( ZED_FLOAT32 p_Z \)) p n
(183) # () S 4 T () S 8 T ({) N
(184) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = p_Z;) N
(185) # () N
(186) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 2 ] = m_M[ 3 ] = m_M[ 5 ] = m_M[ 6 ] = m_M[ 7 ] =) N
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (0.0f;) N
(188) # () N
(189) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(190) # () S 4 T () S 8 T (}) N
(191) # () N
(192) # () S 4 T () S 8 T (ZED_BOOL Matrix3x3::IsZero\( \) ) S
(const) K n
(193) # () S
() p 4 T () S 8 T ({) N
(194) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < 9; i++ \)) p n
(195) # () S 4 T () S 8 T () S 12 T ({) N
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !Arithmetic::IsZero\( m_M[ i ] \) \)) p n
(197) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(198) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_FALSE;) p n
(199) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(200) # () S 4 T () S 8 T () S 12 T (}) N
(201) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_TRUE;) p n
(202) # () S 4 T () S 8 T (}) N
(203) # () N
(204) # () S 4 T () S 8 T (ZED_BOOL Matrix3x3::IsIdentity\( \) ) S
(const) K n
(205) # () S
() p 4 T () S 8 T ({) N
(206) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::Equal\( m_M[ 0 ], 1.0f \) &&) p n
(207) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 1 ], 0.0f \) &&) N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 3/11) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 2 ], 0.0f \) &&) N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 3 ], 0.0f \) &&) N
(210) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 4 ], 1.0f \) &&) N
(211) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 5 ], 0.0f \) &&) N
(212) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 6 ], 0.0f \) &&) N
(213) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 7 ], 0.0f \) &&) N
(214) # () S 4 T () S 8 T () S 12 T () S 16 T (Arithmetic::Equal\( m_M[ 8 ], 1.0f \) \)) N
(215) # () S 4 T () S 8 T () S 12 T ({) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_TRUE;) p n
(217) # () S 4 T () S 8 T () S 12 T (}) N
(218) # () N
(219) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_FALSE;) p n
(220) # () S 4 T () S 8 T (}) N
(221) # () N
(222) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::SetRows\( ) p
(const) K
( Vector3 &p_Row1, ) p
(const) K
( Vector3 &p_Row2,) p n
(223) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Vector3 &p_Row3 \)) p n
(224) # () S 4 T () S 8 T ({) N
(225) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = p_Row1[ 0 ];) N
(226) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = p_Row1[ 1 ];) N
(227) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = p_Row1[ 2 ];) N
(228) # () N
(229) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = p_Row2[ 0 ];) N
(230) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = p_Row2[ 1 ];) N
(231) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = p_Row2[ 2 ];) N
(232) # () N
(233) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = p_Row3[ 0 ];) N
(234) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = p_Row3[ 1 ];) N
(235) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = p_Row3[ 2 ];) N
(236) # () S 4 T () S 8 T (}) N
(237) # () N
(238) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::GetRows\( Vector3 &p_Row1, Vector3 &p_Row2,) p n
(239) # () S 4 T () S 8 T () S 12 T (Vector3 &p_Row3 \) ) S
(const) K n
(240) # () S
() p 4 T () S 8 T ({) N
(241) # () S 4 T () S 8 T () S 12 T (p_Row1[ 0 ] = m_M[ 0 ];) N
(242) # () S 4 T () S 8 T () S 12 T (p_Row1[ 1 ] = m_M[ 3 ];) N
(243) # () S 4 T () S 8 T () S 12 T (p_Row1[ 2 ] = m_M[ 6 ];) N
(244) # () N
(245) # () S 4 T () S 8 T () S 12 T (p_Row2[ 0 ] = m_M[ 1 ];) N
(246) # () S 4 T () S 8 T () S 12 T (p_Row2[ 1 ] = m_M[ 4 ];) N
(247) # () S 4 T () S 8 T () S 12 T (p_Row2[ 2 ] = m_M[ 7 ];) N
(248) # () N
(249) # () S 4 T () S 8 T () S 12 T (p_Row3[ 0 ] = m_M[ 2 ];) N
(250) # () S 4 T () S 8 T () S 12 T (p_Row3[ 1 ] = m_M[ 5 ];) N
(251) # () S 4 T () S 8 T () S 12 T (p_Row3[ 2 ] = m_M[ 8 ];) N
(252) # () S 4 T () S 8 T (}) N
(253) # () N
(254) # () S 4 T () S 8 T (Vector3 Matrix3x3::GetRow\( ) S
(const) K
( ZED_MEMSIZE p_Index \) ) p
(const) K n
(255) # () S
() p 4 T () S 8 T ({) N
(256) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector3\( m_M[ p_Index ], m_M[ p_Index+3 ],) p n
(257) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ p_Index+6 ] \);) N
(258) # () S 4 T () S 8 T (}) N
(259) # () N
(260) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::SetColumns\( ) p
(const) K
( Vector3 &p_Column1,) p n
(261) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Vector3 &p_Column2, ) p
(const) K
( Vector3 &p_Column3 \)) p n
(262) # () S 4 T () S 8 T ({) N
(263) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = p_Column1[ 0 ];) N
(264) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = p_Column1[ 1 ];) N
(265) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = p_Column1[ 2 ];) N
(266) # () N
(267) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = p_Column2[ 0 ];) N
(268) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = p_Column2[ 1 ];) N
(269) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = p_Column2[ 2 ];) N
(270) # () N
(271) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = p_Column3[ 0 ];) N
(272) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = p_Column3[ 1 ];) N
(273) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = p_Column3[ 2 ];) N
(274) # () S 4 T () S 8 T (}) N
(275) # () N
(276) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::GetColumns\( Vector3 &p_Column1, Vector3 &p_Column2,) p n
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 4/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(277) # () p 4 T () S 8 T () S 12 T (Vector3 &p_Column3 \) ) S
(const) K n
(278) # () S
() p 4 T () S 8 T ({) N
(279) # () S 4 T () S 8 T () S 12 T (p_Column1[ 0 ] = m_M[ 0 ];) N
(280) # () S 4 T () S 8 T () S 12 T (p_Column1[ 1 ] = m_M[ 1 ];) N
(281) # () S 4 T () S 8 T () S 12 T (p_Column1[ 2 ] = m_M[ 2 ];) N
(282) # () N
(283) # () S 4 T () S 8 T () S 12 T (p_Column2[ 0 ] = m_M[ 3 ];) N
(284) # () S 4 T () S 8 T () S 12 T (p_Column2[ 1 ] = m_M[ 4 ];) N
(285) # () S 4 T () S 8 T () S 12 T (p_Column2[ 2 ] = m_M[ 5 ];) N
(286) # () N
(287) # () S 4 T () S 8 T () S 12 T (p_Column3[ 0 ] = m_M[ 6 ];) N
(288) # () S 4 T () S 8 T () S 12 T () N
(289) # () S 4 T () S 8 T () S 12 T (p_Column3[ 1 ] = m_M[ 7 ];) N
(290) # () S 4 T () S 8 T () S 12 T (p_Column3[ 2 ] = m_M[ 8 ];) N
(291) # () S 4 T () S 8 T (}) N
(292) # () N
(293) # () S 4 T () S 8 T (Vector3 Matrix3x3::GetColumn\( ) S
(const) K
( ZED_MEMSIZE p_Index \) ) p
(const) K n
(294) # () S
() p 4 T () S 8 T ({) N
(295) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vector3\( m_M[ p_Index*3 ], m_M[ \( p_Index*3 \)+1 ],) p n
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ \( p_Index*3 \)+2 ] \);) N
(297) # () S 4 T () S 8 T (}) N
(298) # () N
(299) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::Clean\( \)) p n
(300) # () S 4 T () S 8 T ({) N
(301) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < 9; i++ \)) p n
(302) # () S 4 T () S 8 T () S 12 T ({) N
(303) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( Arithmetic::IsZero\( m_M[ i ] \) \)) p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(305) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_M[ i ] = 0.0f;) N
(306) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(307) # () S 4 T () S 8 T () S 12 T (}) N
(308) # () S 4 T () S 8 T (}) N
(309) # () N
(310) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Transpose\( \)) N
(311) # () S 4 T () S 8 T ({) N
(312) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Temp = m_M[ 1 ];) N
(313) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = m_M[ 3 ];) N
(314) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = Temp;) N
(315) # () N
(316) # () S 4 T () S 8 T () S 12 T (Temp = m_M[ 2 ];) N
(317) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = m_M[ 6 ];) N
(318) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = Temp;) N
(319) # () N
(320) # () S 4 T () S 8 T () S 12 T (Temp = m_M[ 5 ];) N
(321) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = m_M[ 7 ];) N
(322) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = Temp;) N
(323) # () N
(324) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(325) # () S 4 T () S 8 T (}) N
(326) # () N
(327) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::Transpose\( Matrix3x3 &p_Matrix \) ) p
(const) K n
(328) # () S
() p 4 T () S 8 T ({) N
(329) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 0 ] = m_M[ 0 ];) N
(330) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 4 ] = m_M[ 4 ];) N
(331) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 8 ] = m_M[ 8 ];) N
(332) # () N
(333) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 1 ] = m_M[ 3 ];) N
(334) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 3 ] = m_M[ 1 ];) N
(335) # () N
(336) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 2 ] = m_M[ 6 ];) N
(337) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 6 ] = m_M[ 2 ];) N
(338) # () N
(339) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 5 ] = m_M[ 7 ];) N
(340) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 7 ] = m_M[ 7 ];) N
(341) # () S 4 T () S 8 T (}) N
(342) # () N
(343) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::TransposeOf\( ) S
(const) K
( Matrix3x3 &p_Transpose \)) p n
(344) # () S 4 T () S 8 T ({) N
(345) # () S 4 T () S 8 T () S 12 T (p_Transpose.Transpose\( *) S
(this) K
( \);) p n
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 5/11) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(346) # () p n
(347) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(348) # () S 4 T () S 8 T (}) N
(349) # () N
(350) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::Inverse\( \)) N
(351) # () S 4 T () S 8 T ({) N
(352) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Det = Determinate\( \);) N
(353) # () N
(354) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( Det \) \)) p n
(355) # () S 4 T () S 8 T () S 12 T ({) N
(356) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Arithmetic:Matrix3x3:Inverse] <WARN> ) str
(") p n
(357) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Matrix is singular!  No inverse computed.\\n) str
(" \);) p n
(358) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( *) p
(this) K
(;) p n
(359) # () S 4 T () S 8 T () S 12 T (}) N
(360) # () N
(361) # () S 4 T () S 8 T () S 12 T () S
(// Save on divisions!) c n
(362) # () S
() p 4 T () S 8 T () S 12 T (ZED_FLOAT32 Factor = 1.0f/Det;) N
(363) # () N
(364) # () S 4 T () S 8 T () S 12 T (*) S
(this) K
( = Adjoint\( \);) p n
(365) # () N
(366) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] *= Factor;) N
(367) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] *= Factor;) N
(368) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] *= Factor;) N
(369) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] *= Factor;) N
(370) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] *= Factor;) N
(371) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] *= Factor;) N
(372) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] *= Factor;) N
(373) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] *= Factor;) N
(374) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] *= Factor;) N
(375) # () N
(376) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(377) # () S 4 T () S 8 T (}) N
(378) # () N
(379) # () S 4 T () S 8 T () S
(void) k
( Matrix3x3::Inverse\( Matrix3x3 &p_Matrix \) ) p
(const) K n
(380) # () S
() p 4 T () S 8 T ({) N
(381) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Det = Determinate\( \);) N
(382) # () N
(383) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::IsZero\( Det \) \)) p n
(384) # () S 4 T () S 8 T () S 12 T ({) N
(385) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Arithmetic:Matrix3x3:Inverse] <WARN> ) str
(") p n
(386) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Matrix is singular!  No inverse computed.\\n) str
(" \);) p n
(387) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
(;) p n
(388) # () S 4 T () S 8 T () S 12 T (}) N
(389) # () N
(390) # () S 4 T () S 8 T () S 12 T () S
(// Put the divisions back in the deck!) c n
(391) # () S
() p 4 T () S 8 T () S 12 T (ZED_FLOAT32 Factor = 1.0f/Det;) N
(392) # () N
(393) # () S 4 T () S 8 T () S 12 T (p_Matrix = Adjoint\( \);) N
(394) # () S 4 T () S 8 T () S 12 T () N
(395) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 0 ] *= Factor;) N
(396) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 1 ] *= Factor;) N
(397) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 2 ] *= Factor;) N
(398) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 3 ] *= Factor;) N
(399) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 4 ] *= Factor;) N
(400) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 5 ] *= Factor;) N
(401) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 6 ] *= Factor;) N
(402) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 7 ] *= Factor;) N
(403) # () S 4 T () S 8 T () S 12 T (p_Matrix[ 8 ] *= Factor;) N
(404) # () S 4 T () S 8 T (}) N
(405) # () N
(406) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::InverseOf\( ) S
(const) K
( Matrix3x3 &p_Inverse \)) p n
(407) # () S 4 T () S 8 T ({) N
(408) # () S 4 T () S 8 T () S 12 T (p_Inverse.Inverse\( *) S
(this) K
( \);) p n
(409) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(410) # () S 4 T () S 8 T (}) N
(411) # () N
(412) # () S 4 T () S 8 T (Matrix3x3 Matrix3x3::Adjoint\( \) ) S
(const) K n
(413) # () S
() p 4 T () S 8 T ({) N
(414) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Adjoint;) N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 6/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(415) # () p n
(416) # () S 4 T () S 8 T () S 12 T () S
(// Get the transposed co-efficients) c n
(417) # () S
() p 4 T () S 8 T () S 12 T (Adjoint[ 0 ] = \( m_M[ 4 ]*m_M[ 8 ] \) - \( m_M[ 7 ]*m_M[ 5 ] \);) N
(418) # () S 4 T () S 8 T () S 12 T (Adjoint[ 1 ] = \( m_M[ 2 ]*m_M[ 7 ] \) - \( m_M[ 1 ]*m_M[ 8 ] \);) N
(419) # () S 4 T () S 8 T () S 12 T (Adjoint[ 2 ] = \( m_M[ 1 ]*m_M[ 5 ] \) - \( m_M[ 2 ]*m_M[ 4 ] \);) N
(420) # () N
(421) # () S 4 T () S 8 T () S 12 T (Adjoint[ 3 ] = \( m_M[ 5 ]*m_M[ 6 ] \) - \( m_M[ 3 ]*m_M[ 8 ] \);) N
(422) # () S 4 T () S 8 T () S 12 T (Adjoint[ 4 ] = \( m_M[ 0 ]*m_M[ 8 ] \) - \( m_M[ 2 ]*m_M[ 6 ] \);) N
(423) # () S 4 T () S 8 T () S 12 T (Adjoint[ 5 ] = \( m_M[ 0 ]*m_M[ 5 ] \) - \( m_M[ 3 ]*m_M[ 2 ] \);) N
(424) # () N
(425) # () S 4 T () S 8 T () S 12 T (Adjoint[ 6 ] = \( m_M[ 3 ]*m_M[ 7 ] \) - \( m_M[ 6 ]*m_M[ 4 ] \);) N
(426) # () S 4 T () S 8 T () S 12 T (Adjoint[ 7 ] = \( m_M[ 0 ]*m_M[ 7 ] \) - \( m_M[ 6 ]*m_M[ 1 ] \);) N
(427) # () S 4 T () S 8 T () S 12 T (Adjoint[ 8 ] = \( m_M[ 0 ]*m_M[ 4 ] \) - \( m_M[ 3 ]*m_M[ 1 ] \);) N
(428) # () N
(429) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Adjoint;) p n
(430) # () S 4 T () S 8 T (}) N
(431) # () N
(432) # () S 4 T () S 8 T (ZED_FLOAT32 Matrix3x3::Determinate\( \) ) S
(const) K n
(433) # () S
() p 4 T () S 8 T ({) N
(434) # () S 4 T () S 8 T () S 12 T () S
(return) K
( m_M[ 0 ]*\( \( m_M[ 4 ]*m_M[ 8 ] \) -) p n
(435) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (\( m_M[ 5 ]*m_M[ 7 ] \) \) +) N
(436) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_M[ 3 ]*\( \( m_M[ 7 ]*m_M[ 2 ] \)-) N
(437) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (\( m_M[ 1 ]*m_M[ 8 ] \) \) +) N
(438) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_M[ 6 ]*\( \( m_M[ 1 ]*m_M[ 5 ] \) -) N
(439) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T () S 32 T (\( m_M[ 2 ]*m_M[ 4 ] \) \);) N
(440) # () S 4 T () S 8 T (}) N
(441) # () N
(442) # () S 4 T () S 8 T (ZED_FLOAT32 Matrix3x3::Trace\( \) ) S
(const) K n
(443) # () S
() p 4 T () S 8 T ({) N
(444) # () S 4 T () S 8 T () S 12 T () S
(return) K
( \( m_M[ 0 ] + m_M[ 4 ] + m_M[ 8 ] \);) p n
(445) # () S 4 T () S 8 T (}) N
(446) # () N
(447) # () S 4 T () S 8 T (System::Writer &) S
(operator) K
(<<\( System::Writer &p_Out,) p n
(448) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Matrix3x3 &p_Source \)) p n
(449) # () S 4 T () S 8 T ({) N
(450) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE R = 0; R < 3; R++ \)) p n
(451) # () S 4 T () S 8 T () S 12 T ({) N
(452) # () S 4 T () S 8 T () S 12 T () S 16 T (p_Out << ") S
(| ) str
(" << p_Source[ R ] << ") p
( ) str
(" << p_Source[ R+3 ] <<) p n
(453) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
( ) str
(" << p_Source[ R+6 ] << ") p
( |) str
(" << std::endl;) p n
(454) # () S 4 T () S 8 T () S 12 T (}) N
(455) # () S 4 T () S 8 T () S 12 T () S
(return) K
( p_Out;) p n
(456) # () S 4 T () S 8 T (}) N
(457) # () N
(458) # () S 4 T () S 8 T (ZED_BOOL Matrix3x3::) S
(operator) K
(==\( ) p
(const) K
( Matrix3x3 &p_Other \) ) p
(const) K n
(459) # () S
() p 4 T () S 8 T ({) N
(460) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < 9; i++ \)) p n
(461) # () S 4 T () S 8 T () S 12 T ({) N
(462) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( !Arithmetic::Equal\( m_M[ i ], p_Other[ i ] \) \)) p n
(463) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(464) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_FALSE;) p n
(465) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(466) # () S 4 T () S 8 T () S 12 T (}) N
(467) # () N
(468) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_TRUE;) p n
(469) # () S 4 T () S 8 T (}) N
(470) # () N
(471) # () S 4 T () S 8 T (ZED_BOOL Matrix3x3::) S
(operator) K
(!=\( ) p
(const) K
( Matrix3x3 &p_Other \) ) p
(const) K n
(472) # () S
() p 4 T () S 8 T ({) N
(473) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < 9; i++ \)) p n
(474) # () S 4 T () S 8 T () S 12 T ({) N
(475) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( Arithmetic::Equal\( m_M[ i ], p_Other[ i ] \) \)) p n
(476) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(477) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_TRUE;) p n
(478) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(479) # () S 4 T () S 8 T () S 12 T (}) N
(480) # () N
(481) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_FALSE;) p n
(482) # () S 4 T () S 8 T (}) N
(483) # () N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 7/11) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(484) # () p 4 T () S 8 T (Matrix3x3 Matrix3x3::) S
(operator) K
(+\( ) p
(const) K
( Matrix3x3 &p_Other \) ) p
(const) K n
(485) # () S
() p 4 T () S 8 T ({) N
(486) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(487) # () N
(488) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = m_M[ 0 ]+p_Other[ 0 ];) N
(489) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = m_M[ 1 ]+p_Other[ 1 ];) N
(490) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = m_M[ 2 ]+p_Other[ 2 ];) N
(491) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = m_M[ 3 ]+p_Other[ 3 ];) N
(492) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = m_M[ 4 ]+p_Other[ 4 ];) N
(493) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = m_M[ 5 ]+p_Other[ 5 ];) N
(494) # () S 4 T () S 8 T () S 12 T (Matrix[ 6 ] = m_M[ 6 ]+p_Other[ 6 ];) N
(495) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = m_M[ 7 ]+p_Other[ 7 ];) N
(496) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = m_M[ 8 ]+p_Other[ 8 ];) N
(497) # () N
(498) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(499) # () S 4 T () S 8 T (}) N
(500) # () N
(501) # () S 4 T () S 8 T (Matrix3x3 Matrix3x3::) S
(operator) K
(-\( ) p
(const) K
( Matrix3x3 &p_Other \) ) p
(const) K n
(502) # () S
() p 4 T () S 8 T ({) N
(503) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(504) # () N
(505) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = m_M[ 0 ]-p_Other[ 0 ];) N
(506) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = m_M[ 1 ]-p_Other[ 1 ];) N
(507) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = m_M[ 2 ]-p_Other[ 2 ];) N
(508) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = m_M[ 3 ]-p_Other[ 3 ];) N
(509) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = m_M[ 4 ]-p_Other[ 4 ];) N
(510) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = m_M[ 5 ]-p_Other[ 5 ];) N
(511) # () S 4 T () S 8 T () S 12 T (Matrix[ 6 ] = m_M[ 6 ]-p_Other[ 6 ];) N
(512) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = m_M[ 7 ]-p_Other[ 7 ];) N
(513) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = m_M[ 8 ]-p_Other[ 8 ];) N
(514) # () N
(515) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(516) # () S 4 T () S 8 T (}) N
(517) # () N
(518) # () S 4 T () S 8 T (Matrix3x3 Matrix3x3::) S
(operator) K
(-\( \) ) p
(const) K n
(519) # () S
() p 4 T () S 8 T ({) N
(520) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(521) # () N
(522) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = -m_M[ 0 ];) N
(523) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = -m_M[ 1 ];) N
(524) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = -m_M[ 2 ];) N
(525) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = -m_M[ 3 ];) N
(526) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = -m_M[ 4 ];) N
(527) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = -m_M[ 5 ];) N
(528) # () S 4 T () S 8 T () S 12 T (Matrix[ 6 ] = -m_M[ 6 ];) N
(529) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = -m_M[ 7 ];) N
(530) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = -m_M[ 8 ];) N
(531) # () N
(532) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(533) # () S 4 T () S 8 T (}) N
(534) # () N
(535) # () S 4 T () S 8 T (Matrix3x3 Matrix3x3::) S
(operator) K
(*\( ) p
(const) K
( Matrix3x3 &p_Other \) ) p
(const) K n
(536) # () S
() p 4 T () S 8 T ({) N
(537) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(538) # () S 4 T () S 8 T () S 12 T () N
(539) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = m_M[ 0 ]*p_Other[ 0 ] + m_M[ 3 ]*p_Other[ 1 ] +) N
(540) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 6 ]*p_Other[ 2 ];) N
(541) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = m_M[ 1 ]*p_Other[ 0 ] + m_M[ 4 ]*p_Other[ 1 ] +) N
(542) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 7 ]*p_Other[ 2 ];) N
(543) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = m_M[ 2 ]*p_Other[ 0 ] + m_M[ 5 ]*p_Other[ 1 ] +) N
(544) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 8 ]*p_Other[ 2 ];) N
(545) # () N
(546) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = m_M[ 0 ]*p_Other[ 3 ] + m_M[ 3 ]*p_Other[ 4 ] +) N
(547) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 6 ]*p_Other[ 5 ];) N
(548) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = m_M[ 1 ]*p_Other[ 3 ] + m_M[ 4 ]*p_Other[ 4 ] +) N
(549) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 7 ]*p_Other[ 5 ];) N
(550) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = m_M[ 2 ]*p_Other[ 3 ] + m_M[ 5 ]*p_Other[ 4 ] +) N
(551) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 8 ]*p_Other[ 5 ];) N
(552) # () N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 8/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(553) # () p 4 T () S 8 T () S 12 T (Matrix[ 6 ] = m_M[ 0 ]*p_Other[ 6 ] + m_M[ 3 ]*p_Other[ 7 ] +) N
(554) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 6 ]*p_Other[ 8 ];) N
(555) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = m_M[ 1 ]*p_Other[ 6 ] + m_M[ 4 ]*p_Other[ 7 ] +) N
(556) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 7 ]*p_Other[ 8 ];) N
(557) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = m_M[ 2 ]*p_Other[ 6 ] + m_M[ 5 ]*p_Other[ 7 ] +) N
(558) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 8 ]*p_Other[ 8 ];) N
(559) # () N
(560) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(561) # () S 4 T () S 8 T (}) N
(562) # () N
(563) # () S 4 T () S 8 T (Vector3 ) S
(operator) K
(*\( ) p
(const) K
( Vector3 &p_Vec, ) p
(const) K
( Matrix3x3 &p_Matrix \)) p n
(564) # () S 4 T () S 8 T ({) N
(565) # () S 4 T () S 8 T () S 12 T (Vector3 Vec;) N
(566) # () N
(567) # () S 4 T () S 8 T () S 12 T (Vec[ 0 ] = p_Vec[ 0 ]*p_Matrix[ 0 ] + p_Vec[ 1 ]*p_Matrix[ 1 ] +) N
(568) # () S 4 T () S 8 T () S 12 T () S 16 T (p_Vec[ 2 ]*p_Matrix[ 2 ];) N
(569) # () S 4 T () S 8 T () S 12 T (Vec[ 1 ] = p_Vec[ 0 ]*p_Matrix[ 3 ] + p_Vec[ 1 ]*p_Matrix[ 4 ] +) N
(570) # () S 4 T () S 8 T () S 12 T () S 16 T (p_Vec[ 2 ]*p_Matrix[ 5 ];) N
(571) # () S 4 T () S 8 T () S 12 T (Vec[ 2 ] = p_Vec[ 0 ]*p_Matrix[ 6 ] + p_Vec[ 1 ]*p_Matrix[ 7 ] +) N
(572) # () S 4 T () S 8 T () S 12 T () S 16 T (p_Vec[ 2 ]*p_Matrix[ 8 ];) N
(573) # () N
(574) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vec;) p n
(575) # () S 4 T () S 8 T (}) N
(576) # () N
(577) # () S 4 T () S 8 T (Matrix3x3 ) S
(operator) K
(*\( ) p
(const) K
( ZED_FLOAT32 p_Scalar,) p n
(578) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Matrix3x3 &p_Matrix \)) p n
(579) # () S 4 T () S 8 T ({) N
(580) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(581) # () N
(582) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = p_Matrix[ 0 ]*p_Scalar;) N
(583) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = p_Matrix[ 1 ]*p_Scalar;) N
(584) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = p_Matrix[ 2 ]*p_Scalar;) N
(585) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = p_Matrix[ 3 ]*p_Scalar;) N
(586) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = p_Matrix[ 4 ]*p_Scalar;) N
(587) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = p_Matrix[ 5 ]*p_Scalar;) N
(588) # () S 4 T () S 8 T () S 12 T (Matrix[ 6 ] = p_Matrix[ 6 ]*p_Scalar;) N
(589) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = p_Matrix[ 7 ]*p_Scalar;) N
(590) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = p_Matrix[ 8 ]*p_Scalar;) N
(591) # () N
(592) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(593) # () S 4 T () S 8 T (}) N
(594) # () N
(595) # () S 4 T () S 8 T (Matrix3x3 Matrix3x3::) S
(operator) K
(*\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \) ) p
(const) K n
(596) # () S
() p 4 T () S 8 T ({) N
(597) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Matrix;) N
(598) # () N
(599) # () S 4 T () S 8 T () S 12 T (Matrix[ 0 ] = m_M[ 0 ]*p_Scalar;) N
(600) # () S 4 T () S 8 T () S 12 T (Matrix[ 1 ] = m_M[ 1 ]*p_Scalar;) N
(601) # () S 4 T () S 8 T () S 12 T (Matrix[ 2 ] = m_M[ 2 ]*p_Scalar;) N
(602) # () S 4 T () S 8 T () S 12 T (Matrix[ 3 ] = m_M[ 3 ]*p_Scalar;) N
(603) # () S 4 T () S 8 T () S 12 T (Matrix[ 4 ] = m_M[ 4 ]*p_Scalar;) N
(604) # () S 4 T () S 8 T () S 12 T (Matrix[ 5 ] = m_M[ 5 ]*p_Scalar;) N
(605) # () S 4 T () S 8 T () S 12 T (Matrix[ 6 ] = m_M[ 6 ]*p_Scalar;) N
(606) # () S 4 T () S 8 T () S 12 T (Matrix[ 7 ] = m_M[ 7 ]*p_Scalar;) N
(607) # () S 4 T () S 8 T () S 12 T (Matrix[ 8 ] = m_M[ 8 ]*p_Scalar;) N
(608) # () N
(609) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Matrix;) p n
(610) # () S 4 T () S 8 T (}) N
(611) # () N
(612) # () S 4 T () S 8 T (Vector3 Matrix3x3::) S
(operator) K
(*\( ) p
(const) K
( Vector3 &p_Vec \) ) p
(const) K n
(613) # () S
() p 4 T () S 8 T ({) N
(614) # () S 4 T () S 8 T () S 12 T (Vector3 Vec;) N
(615) # () N
(616) # () S 4 T () S 8 T () S 12 T (Vec[ 0 ] = m_M[ 0 ]*p_Vec[ 0 ] + m_M[ 3 ]*p_Vec[ 1 ] +) N
(617) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 6 ]*p_Vec[ 2 ];) N
(618) # () S 4 T () S 8 T () S 12 T (Vec[ 1 ] = m_M[ 1 ]*p_Vec[ 0 ] + m_M[ 4 ]*p_Vec[ 1 ] +) N
(619) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 7 ]*p_Vec[ 2 ];) N
(620) # () S 4 T () S 8 T () S 12 T (Vec[ 2 ] = m_M[ 2 ]*p_Vec[ 0 ] + m_M[ 5 ]*p_Vec[ 1 ] +) N
(621) # () S 4 T () S 8 T () S 12 T () S 16 T (m_M[ 8 ]*p_Vec[ 2 ];) N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 9/11) (Nov 24, 11 2:38) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(622) # () p n
(623) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Vec;) p n
(624) # () S 4 T () S 8 T (}) N
(625) # () N
(626) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::) S
(operator) K
(+=\( ) p
(const) K
( Matrix3x3 &p_Other \)) p n
(627) # () S 4 T () S 8 T ({) N
(628) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] += p_Other[ 0 ];) N
(629) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] += p_Other[ 1 ];) N
(630) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] += p_Other[ 2 ];) N
(631) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] += p_Other[ 3 ];) N
(632) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] += p_Other[ 4 ];) N
(633) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] += p_Other[ 5 ];) N
(634) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] += p_Other[ 6 ];) N
(635) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] += p_Other[ 7 ];) N
(636) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] += p_Other[ 8 ];) N
(637) # () N
(638) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(639) # () S 4 T () S 8 T (}) N
(640) # () N
(641) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::) S
(operator) K
(-=\( ) p
(const) K
( Matrix3x3 &p_Other \)) p n
(642) # () S 4 T () S 8 T ({) N
(643) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] -= p_Other[ 0 ];) N
(644) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] -= p_Other[ 1 ];) N
(645) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] -= p_Other[ 2 ];) N
(646) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] -= p_Other[ 3 ];) N
(647) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] -= p_Other[ 4 ];) N
(648) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] -= p_Other[ 5 ];) N
(649) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] -= p_Other[ 6 ];) N
(650) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] -= p_Other[ 7 ];) N
(651) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] -= p_Other[ 8 ];) N
(652) # () S 4 T () S 8 T () S 12 T () N
(653) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(654) # () S 4 T () S 8 T (}) N
(655) # () N
(656) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::) S
(operator) K
(*=\( ) p
(const) K
( Matrix3x3 &p_Other \)) p n
(657) # () S 4 T () S 8 T ({) N
(658) # () S 4 T () S 8 T () S 12 T (Matrix3x3 Copy;) N
(659) # () S 4 T () S 8 T () S 12 T (Copy.Copy\( *) S
(this) K
( \);) p n
(660) # () N
(661) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] = Copy[ 0 ]*p_Other[ 0 ] + Copy[ 3 ]*p_Other[ 1 ] +) N
(662) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 6 ]*p_Other[ 2 ];) N
(663) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] = Copy[ 1 ]*p_Other[ 0 ] + Copy[ 4 ]*p_Other[ 1 ] +) N
(664) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 7 ]*p_Other[ 2 ];) N
(665) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] = Copy[ 2 ]*p_Other[ 0 ] + Copy[ 5 ]*p_Other[ 1 ] +) N
(666) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 8 ]*p_Other[ 2 ];) N
(667) # () S 4 T () S 8 T () S 12 T () N
(668) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] = Copy[ 0 ]*p_Other[ 3 ] + Copy[ 3 ]*p_Other[ 4 ] +) N
(669) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 6 ]*p_Other[ 5 ];) N
(670) # () S 4 T () S 8 T () S 12 T (m_M[ 4 ] = Copy[ 1 ]*p_Other[ 3 ] + Copy[ 4 ]*p_Other[ 4 ] +) N
(671) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 7 ]*p_Other[ 5 ];) N
(672) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] = Copy[ 2 ]*p_Other[ 3 ] + Copy[ 5 ]*p_Other[ 4 ] +) N
(673) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 8 ]*p_Other[ 5 ];) N
(674) # () N
(675) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] = Copy[ 0 ]*p_Other[ 6 ] + Copy[ 3 ]*p_Other[ 7 ] +) N
(676) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 6 ]*p_Other[ 8 ];) N
(677) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] = Copy[ 1 ]*p_Other[ 6 ] + Copy[ 4 ]*p_Other[ 7 ] +) N
(678) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 7 ]*p_Other[ 8 ];) N
(679) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] = Copy[ 2 ]*p_Other[ 6 ] + Copy[ 5 ]*p_Other[ 7 ] +) N
(680) # () S 4 T () S 8 T () S 12 T () S 16 T (Copy[ 8 ]*p_Other[ 8 ];) N
(681) # () S 4 T () S 8 T () S 12 T () N
(682) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(683) # () S 4 T () S 8 T (}) N
(684) # () N
(685) # () S 4 T () S 8 T (Matrix3x3 &Matrix3x3::) S
(operator) K
(*=\( ) p
(const) K
( ZED_FLOAT32 p_Scalar \)) p n
(686) # () S 4 T () S 8 T ({) N
(687) # () S 4 T () S 8 T () S 12 T (m_M[ 0 ] *= p_Scalar;) N
(688) # () S 4 T () S 8 T () S 12 T (m_M[ 1 ] *= p_Scalar;) N
(689) # () S 4 T () S 8 T () S 12 T (m_M[ 2 ] *= p_Scalar;) N
(690) # () S 4 T () S 8 T () S 12 T (m_M[ 3 ] *= p_Scalar;) N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 10/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (11) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(691) # () p 4 T () S 8 T () S 12 T (m_M[ 4 ] *= p_Scalar;) N
(692) # () S 4 T () S 8 T () S 12 T (m_M[ 5 ] *= p_Scalar;) N
(693) # () S 4 T () S 8 T () S 12 T (m_M[ 6 ] *= p_Scalar;) N
(694) # () S 4 T () S 8 T () S 12 T (m_M[ 7 ] *= p_Scalar;) N
(695) # () S 4 T () S 8 T () S 12 T (m_M[ 8 ] *= p_Scalar;) N
(696) # () N
(697) # () S 4 T () S 8 T () S 12 T () S
(return) K
( *) p
(this) K
(;) p n
(698) # () S 4 T () S 8 T (}) N
(699) # () N
(700) # () S 4 T () S 8 T (ZED_FLOAT32 &Matrix3x3::) S
(operator) K
(\( \)\( ) p
(const) K
( ZED_MEMSIZE p_Row,) p n
(701) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_Column \)) p n
(702) # () S 4 T () S 8 T ({) N
(703) # () S 4 T () S 8 T () S 12 T () S
(// No bounds checking) c n
(704) # () S
() p 4 T () S 8 T () S 12 T () S
(return) K
( \( m_M[ p_Row+\( p_Column*3 \) ] \);) p n
(705) # () S 4 T () S 8 T (}) N
(706) # () N
(707) # () S 4 T () S 8 T (ZED_FLOAT32 Matrix3x3::) S
(operator) K
(\( \)\( ) p
(const) K
( ZED_MEMSIZE p_Row,) p n
(708) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_Column \) ) p
(const) K n
(709) # () S
() p 4 T () S 8 T ({) N
(710) # () S 4 T () S 8 T () S 12 T () S
(// No bounds checking) c n
(711) # () S
() p 4 T () S 8 T () S 12 T () S
(return) K
( \( m_M[ p_Row+\( p_Column*3 \) ] \);) p n
(712) # () S 4 T () S 8 T (}) N
(713) # () S 4 T (}) N
(714) # (}) N
(715) # () N
([ ZED::Arithmetic::Matrix3x3.cpp ]) (Page 11/11) (Nov 24, 11 2:38) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
