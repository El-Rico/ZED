%!PS-Adobe-3.0
%%Title: GLExtender.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:21:43 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <GLExtender.hpp>) p n
(2) # () N
(3) # () S
(///////////////////////////////////////////////////////////////////////////////) c n
(4) # (// GLX Extensions /////////////////////////////////////////////////////////////) N
(5) # (///////////////////////////////////////////////////////////////////////////////) N
(6) # () S
(PFNGLXCREATECONTEXTATTRIBSARBPROC) p 36 T (__zglCreateContextAttribsARB = ZED_NULL;) N
(7) # () N
(8) # () S
(///////////////////////////////////////////////////////////////////////////////) c n
(9) # (// OpenGL 2.0 Extensions //////////////////////////////////////////////////////) N
(10) # (///////////////////////////////////////////////////////////////////////////////) N
(11) # () N
(12) # () S
(PFNGLGETSTRINGIPROC) p 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglGetStringi = ZED_NULL;) N
(13) # () N
(14) # () S
(// Define all the possible OpenGL extensions, initialising them to zero) c n
(15) # (// OpenGL 2.0 [Shaders]) N
(16) # () S
(PFNGLCREATESHADERPROC) p 24 T () S 28 T () S 32 T () S 36 T (__zglCreateShader = ZED_NULL;) N
(17) # (PFNGLDELETESHADERPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglDeleteShader = ZED_NULL;) N
(18) # (PFNGLSHADERSOURCEPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglShaderSource = ZED_NULL;) N
(19) # (PFNGLCOMPILESHADERPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglCompileShader = ZED_NULL;) N
(20) # (PFNGLGETSHADERINFOLOGPROC) S 28 T () S 32 T () S 36 T (__zglGetShaderInfoLog = ZED_NULL;) N
(21) # (PFNGLCREATEPROGRAMPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglCreateProgram = ZED_NULL;) N
(22) # (PFNGLATTACHSHADERPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglAttachShader = ZED_NULL;) N
(23) # (PFNGLDETACHSHADERPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglDetachShader = ZED_NULL;) N
(24) # (PFNGLISSHADERPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglIsShader = ZED_NULL;) N
(25) # (PFNGLGETSHADERIVPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglGetShaderiv = ZED_NULL;) N
(26) # (PFNGLLINKPROGRAMPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglLinkProgram = ZED_NULL;) N
(27) # (PFNGLGETPROGRAMINFOLOGPROC) S 28 T () S 32 T () S 36 T (__zglGetProgramInfoLog = ZED_NULL;) N
(28) # (PFNGLUSEPROGRAMPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglUseProgram = ZED_NULL;) N
(29) # (PFNGLDELETEPROGRAMPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglDeleteProgram = ZED_NULL;) N
(30) # (PFNGLISPROGRAMPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglIsProgram = ZED_NULL;) N
(31) # (PFNGLVALIDATEPROGRAMPROC) S 28 T () S 32 T () S 36 T (__zglValidateProgram = ZED_NULL;) N
(32) # (PFNGLGETPROGRAMIVPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglGetProgramiv = ZED_NULL;) N
(33) # (PFNGLGENVERTEXARRAYSPROC) S 28 T () S 32 T () S 36 T (__zglGenVertexArrays = ZED_NULL;) N
(34) # (PFNGLBINDVERTEXARRAYPROC) S 28 T () S 32 T () S 36 T (__zglBindVertexArray = ZED_NULL;) N
(35) # (PFNGLDELETEVERTEXARRAYSPROC) S 28 T () S 32 T () S 36 T (__zglDeleteVertexArrays = ZED_NULL;) N
(36) # (PFNGLGENBUFFERSPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglGenBuffers = ZED_NULL;) N
(37) # (PFNGLBINDBUFFERPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglBindBuffer = ZED_NULL;) N
(38) # (PFNGLBUFFERDATAPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglBufferData = ZED_NULL;) N
(39) # (PFNGLBUFFERSUBDATAPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglBufferSubData = ZED_NULL;) N
(40) # (PFNGLDELETEBUFFERSPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglDeleteBuffers = ZED_NULL;) N
(41) # (PFNGLBINDATTRIBLOCATIONPROC) S 28 T () S 32 T () S 36 T (__zglBindAttribLocation = ZED_NULL;) N
(42) # (PFNGLVERTEXATTRIBPOINTERPROC) S 32 T () S 36 T (__zglVertexAttribPointer = ZED_NULL;) N
(43) # (PFNGLENABLEVERTEXATTRIBARRAYPROC) S 36 T (__zglEnableVertexAttribArray = ZED_NULL;) N
(44) # (PFNGLGETUNIFORMLOCATIONPROC) S 28 T () S 32 T () S 36 T (__zglGetUniformLocation = ZED_NULL;) N
(45) # (PFNGLUNIFORMMATRIX4FVPROC) S 28 T () S 32 T () S 36 T (__zglUniformMatrix4fv = ZED_NULL;) N
(46) # (PFNGLBINDFRAGDATALOCATIONPROC) S 32 T () S 36 T (__zglBindFragDataLocation = ZED_NULL;) N
(47) # (PFNGLUNIFORM1IPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglUniform1i = ZED_NULL;) N
(48) # (PFNGLUNIFORM1FPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglUniform1f = ZED_NULL;) N
(49) # (PFNGLUNIFORM3FVPROC) S 20 T () S 24 T () S 28 T () S 32 T () S 36 T (__zglUniform3fv = ZED_NULL;) N
(50) # (PFNGLACTIVETEXTUREPROC) S 24 T () S 28 T () S 32 T () S 36 T (__zglActiveTexture = ZED_NULL;) N
(51) # (PFNGLDELETETEXTURESEXTPROC) S 28 T () S 32 T () S 36 T (__zglDeleteTextures = ZED_NULL;) N
(52) # () N
(53) # () S
(namespace) K
( ZED) p n
(54) # ({) N
(55) # () S 4 T () S
(namespace) K
( Renderer) p n
(56) # () S 4 T ({) N
(57) # () S 4 T () S 8 T () S
(// Initialise all OpenGL 2.0 extensions) c n
(58) # () S
() p 4 T () S 8 T () S
(static) K
( ZED_UINT32 zglInitGLVer20\( \)) p n
(59) # () S 4 T () S 8 T ({) N
(60) # () S 4 T () S 8 T () S 12 T (ZED_BOOL Ret = ZED_FALSE;) N
(61) # () N
(62) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglCreateShader =) N
(63) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLCREATESHADERPROC \)zglGetProcAddress\() N
(64) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glCreateShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(65) # () S 4 T () S 8 T () S 12 T () N
(66) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDeleteShader =) N
(67) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDELETESHADERPROC \)zglGetProcAddress\() N
(68) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDeleteShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(69) # () N
([ ZED::Renderer::GLExtender.cpp ]) (Page 1/6) (Dec 20, 11 20:54) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T (Ret = \( \( __zglShaderSource =) N
(71) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLSHADERSOURCEPROC \)zglGetProcAddress\( ) N
(72) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glShaderSource) str
(" \) \) == ZED_NULL \) || Ret;) p n
(73) # () N
(74) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglCompileShader =) N
(75) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLCOMPILESHADERPROC \)zglGetProcAddress\() N
(76) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glCompileShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(77) # () N
(78) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGetShaderInfoLog =) N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGETSHADERINFOLOGPROC \)zglGetProcAddress\() N
(80) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetShaderInfoLog) str
(" \) \) == ZED_NULL \) || Ret;) p n
(81) # () N
(82) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglCreateProgram =) N
(83) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLCREATEPROGRAMPROC \)zglGetProcAddress\() N
(84) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glCreateProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(85) # () N
(86) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglAttachShader =) N
(87) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLATTACHSHADERPROC \)zglGetProcAddress\() N
(88) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glAttachShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(89) # () N
(90) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDetachShader =) N
(91) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDETACHSHADERPROC \)zglGetProcAddress\() N
(92) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDetachShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(93) # () N
(94) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglIsShader =) N
(95) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLISSHADERPROC \)zglGetProcAddress\() N
(96) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glIsShader) str
(" \) \) == ZED_NULL \) || Ret;) p n
(97) # () N
(98) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGetShaderiv =) N
(99) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGETSHADERIVPROC \)zglGetProcAddress\() N
(100) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetShaderiv) str
(" \) \) == ZED_NULL \) || Ret;) p n
(101) # () N
(102) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglLinkProgram =) N
(103) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLLINKPROGRAMPROC \)zglGetProcAddress\() N
(104) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glLinkProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(105) # () N
(106) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGetProgramInfoLog =) N
(107) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGETPROGRAMINFOLOGPROC \)zglGetProcAddress\() N
(108) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetProgramInfoLog) str
(" \) \) == ZED_NULL \) || Ret;) p n
(109) # () N
(110) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglUseProgram =) N
(111) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLUSEPROGRAMPROC \)zglGetProcAddress\() N
(112) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glUseProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(113) # () N
(114) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDeleteProgram =) N
(115) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDELETEPROGRAMPROC \)zglGetProcAddress\() N
(116) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDeleteProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(117) # () N
(118) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglIsProgram =) N
(119) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLISPROGRAMPROC \)zglGetProcAddress\() N
(120) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glIsProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(121) # () S 4 T () S 8 T () S 12 T () N
(122) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglValidateProgram =) N
(123) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLVALIDATEPROGRAMPROC \)zglGetProcAddress\() N
(124) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glValidateProgram) str
(" \) \) == ZED_NULL \) || Ret;) p n
(125) # () S 4 T () S 8 T () S 12 T () N
(126) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGetProgramiv =) N
(127) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGETPROGRAMIVPROC \)zglGetProcAddress\() N
(128) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetProgramiv) str
(" \) \) == ZED_NULL \) || Ret;) p n
(129) # () N
(130) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGenVertexArrays =) N
(131) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGENVERTEXARRAYSPROC \)zglGetProcAddress\() N
(132) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGenVertexArrays) str
(" \) \) == ZED_NULL \) || Ret;) p n
(133) # () N
(134) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBindVertexArray =) N
(135) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBINDVERTEXARRAYPROC \)zglGetProcAddress\() N
(136) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBindVertexArray) str
(" \) \) == ZED_NULL \) || Ret;) p n
(137) # () N
(138) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDeleteVertexArrays =) N
([ ZED::Renderer::GLExtender.cpp ]) (Page 2/6) (Dec 20, 11 20:54) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDELETEVERTEXARRAYSPROC \)zglGetProcAddress\() N
(140) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDeleteVertexArrays) str
(" \) \) == ZED_NULL \) || Ret;) p n
(141) # () N
(142) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGenBuffers =) N
(143) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGENBUFFERSPROC \)zglGetProcAddress\() N
(144) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGenBuffers) str
(" \) \) == ZED_NULL \) || Ret;) p n
(145) # () N
(146) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBindBuffer =) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBINDBUFFERPROC \)zglGetProcAddress\() N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBindBuffer) str
(" \) \) == ZED_NULL \) || Ret;) p n
(149) # () N
(150) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBufferData =) N
(151) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBUFFERDATAPROC \)zglGetProcAddress\() N
(152) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBufferData) str
(" \) \) == ZED_NULL \) || Ret;) p n
(153) # () N
(154) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBufferSubData =) N
(155) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBUFFERSUBDATAPROC \)zglGetProcAddress\() N
(156) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBufferSubData) str
(" \) \) == ZED_NULL \) || Ret;) p n
(157) # () N
(158) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDeleteBuffers =) N
(159) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDELETEBUFFERSPROC \)zglGetProcAddress\() N
(160) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDeleteBuffers) str
(" \) \) == ZED_NULL \) || Ret;) p n
(161) # () N
(162) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBindAttribLocation =) N
(163) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBINDATTRIBLOCATIONPROC \)zglGetProcAddress\() N
(164) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBindAttribLocation) str
(" \) \) == ZED_NULL \) || Ret;) p n
(165) # () N
(166) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglVertexAttribPointer =) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLVERTEXATTRIBPOINTERPROC \)zglGetProcAddress\() N
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glVertexAttribPointer) str
(" \) \) == ZED_NULL \) || Ret;) p n
(169) # () N
(170) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglEnableVertexAttribArray =) N
(171) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLENABLEVERTEXATTRIBARRAYPROC \)zglGetProcAddress\() N
(172) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glEnableVertexAttribArray) str
(" \) \) == ZED_NULL \) || Ret;) p n
(173) # () N
(174) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglGetUniformLocation =) N
(175) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLGETUNIFORMLOCATIONPROC \)zglGetProcAddress\() N
(176) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetUniformLocation) str
(" \) \) == ZED_NULL \) || Ret;) p n
(177) # () N
(178) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglUniformMatrix4fv =) N
(179) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLUNIFORMMATRIX4FVPROC \)zglGetProcAddress\() N
(180) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glUniformMatrix4fv) str
(" \) \) == ZED_NULL \) || Ret;) p n
(181) # () N
(182) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglBindFragDataLocation =) N
(183) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLBINDFRAGDATALOCATIONPROC \)zglGetProcAddress\() N
(184) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glBindFragDataLocation) str
(" \) \) == ZED_NULL \) || Ret;) p n
(185) # () N
(186) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglUniform1i =) N
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLUNIFORM1IPROC \)zglGetProcAddress\() N
(188) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glUniform1i) str
(" \) \) == ZED_NULL \) || Ret;) p n
(189) # () N
(190) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglUniform1f =) N
(191) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLUNIFORM1FPROC \)zglGetProcAddress\() N
(192) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glUniform1f) str
(" \) \) == ZED_NULL \) || Ret;) p n
(193) # () N
(194) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglUniform3fv =) N
(195) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLUNIFORM3FVPROC \)zglGetProcAddress\() N
(196) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glUniform3fv) str
(" \) \) == ZED_NULL \) || Ret;) p n
(197) # () N
(198) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglActiveTexture =) N
(199) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLACTIVETEXTUREPROC \)zglGetProcAddress\() N
(200) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glActiveTexture) str
(" \) \) == ZED_NULL \) || Ret;) p n
(201) # () N
(202) # () S 4 T () S 8 T () S 12 T (Ret = \( \( __zglDeleteTextures =) N
(203) # () S 4 T () S 8 T () S 12 T () S 16 T (\( PFNGLDELETETEXTURESEXTPROC \)zglGetProcAddress\() N
(204) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glDeleteTextures) str
(" \) \) == ZED_NULL \) || Ret;) p n
(205) # () N
(206) # () S 4 T () S 8 T () S 12 T () S
(return) K
( \( Ret ? ZED_FAIL : ZED_OK \);) p n
(207) # () S 4 T () S 8 T (}) N
([ ZED::Renderer::GLExtender.cpp ]) (Page 3/6) (Dec 20, 11 20:54) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p n
(209) # () S 4 T () S 8 T (GLExtender::GLExtender\( \)) N
(210) # () S 4 T () S 8 T ({) N
(211) # () S 4 T () S 8 T (}) N
(212) # () N
(213) # () S 4 T () S 8 T (GLExtender::~GLExtender\( \)) N
(214) # () S 4 T () S 8 T ({) N
(215) # () S 4 T () S 8 T (}) N
(216) # () N
(217) # () S 4 T () S 8 T (ZED_BOOL GLExtender::IsSupported\( ) S
(const) K
( ) p
(char) k
( *p_pExtension \)) p n
(218) # () S 4 T () S 8 T ({) N
(219) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_Extensions.size\( \) == 0 \)) p n
(220) # () S 4 T () S 8 T () S 12 T ({) N
(221) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::IsSupported] <ERROR> ) str
(") p n
(222) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to get extensions.\\n) str
(" \);) p n
(223) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(224) # () N
(225) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FALSE;) p n
(226) # () S 4 T () S 8 T () S 12 T (}) N
(227) # () N
(228) # () S 4 T () S 8 T () S 12 T (ZED_BOOL Ret = ZED_FALSE;) N
(229) # () N
(230) # () S 4 T () S 8 T () S 12 T (std::list< std::string >::iterator ExtItr = m_Extensions.begin\( \);) N
(231) # () S 4 T () S 8 T () S 12 T () N
(232) # () S 4 T () S 8 T () S 12 T () S
(while) K
(\( \( Ret == ZED_FALSE \) && \( ExtItr != m_Extensions.end\( \) \) \)) p n
(233) # () S 4 T () S 8 T () S 12 T ({) N
(234) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( \( *ExtItr \).compare\( p_pExtension \) == 0 \)) p n
(235) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(236) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Ret = ZED_TRUE;) N
(237) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(238) # () N
(239) # () S 4 T () S 8 T () S 12 T () S 16 T (ExtItr++;) N
(240) # () S 4 T () S 8 T () S 12 T (}) N
(241) # () N
(242) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Ret;) p n
(243) # () S 4 T () S 8 T (}) N
(244) # () S 4 T () S 8 T () N
(245) # () S 4 T () S 8 T (ZED_BOOL GLExtender::IsWindowExtSupported\( ) S
(const) K
( ) p
(char) k
( *p_pWinExt \)) p n
(246) # () S 4 T () S 8 T ({) N
(247) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_WindowExtensions.size\( \) == 0 \)) p n
(248) # () S 4 T () S 8 T () S 12 T ({) N
(249) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::IsWindowExtSupported ) str
(") p n
(250) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(<ERROR> Failed to get extensions\\n) str
(" \);) p n
(251) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(252) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FALSE;) p n
(253) # () S 4 T () S 8 T () S 12 T (}) N
(254) # () S 4 T () S 8 T () S 12 T () N
(255) # () S 4 T () S 8 T () S 12 T (ZED_BOOL Ret = ZED_FALSE;) N
(256) # () S 4 T () S 8 T () S 12 T (std::list< std::string >::iterator Itr =) N
(257) # () S 4 T () S 8 T () S 12 T () S 16 T (m_WindowExtensions.begin\( \);) N
(258) # () N
(259) # () S 4 T () S 8 T () S 12 T () S
(while) K
(\( \( Ret == ZED_FALSE \) &&) p n
(260) # () S 4 T () S 8 T () S 12 T () S 16 T (\( Itr != m_WindowExtensions.end\( \) \) \)) N
(261) # () S 4 T () S 8 T () S 12 T ({) N
(262) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( \( *Itr \).compare\( p_pWinExt \) == 0 \)) p n
(263) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(264) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Ret = ZED_TRUE;) N
(265) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(266) # () N
(267) # () S 4 T () S 8 T () S 12 T () S 16 T (Itr++;) S 24 T () S 28 T () S 32 T () S 36 T () N
(268) # () S 4 T () S 8 T () S 12 T (}) N
(269) # () N
(270) # () S 4 T () S 8 T () S 12 T () S
(return) K
( Ret;) p n
(271) # () S 4 T () S 8 T (}) N
(272) # () N
(273) # () S 4 T () S 8 T (ZED_UINT32 GLExtender::Initialise\( ) S
(const) K
( ZED_GLVERSION &p_Version \)) p n
(274) # () S 4 T () S 8 T ({) N
(275) # () S 4 T () S 8 T () S 12 T (m_GLVersion = p_Version;) N
(276) # () N
([ ZED::Renderer::GLExtender.cpp ]) (Page 4/6) (Dec 20, 11 20:54) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(277) # () p 4 T () S 8 T () S 12 T () S
(// If the OpenGL version is greater than 3.0, use glGetStringi) c n
(278) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GLVersion.Major >= 3 \)) p n
(279) # () S 4 T () S 8 T () S 12 T ({) N
(280) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Initialise zglGetStringi) c n
(281) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (__zglGetStringi = \( PFNGLGETSTRINGIPROC \)zglGetProcAddress\() N
(282) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(glGetStringi) str
(" \);) p n
(283) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( __zglGetStringi == ZED_NULL \)) p n
(284) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(285) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(// Something went wrong!) c n
(286) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedAssert\( ZED_FALSE \);) N
(287) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::Initialise] ) str
(") p n
(288) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (") S
(<ERROR> Failed to get zglGetString\\n) str
(" \);) p n
(289) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_FAIL;) p n
(290) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(291) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(292) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_INT32 NumExtensions = 0;) N
(293) # () S 4 T () S 8 T () S 12 T () S 16 T (zglGetIntegerv\( GL_NUM_EXTENSIONS, &NumExtensions \);) N
(294) # () S 4 T () S 8 T () S 12 T () S 16 T () N
(295) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::Initialise] <INFO> ) str
(") p n
(296) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(%d OpenGL Extensions supported:\\n) str
(", NumExtensions \);) p n
(297) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Store all extensions in the extensions list) c n
(298) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < NumExtensions; i++ \)) p n
(299) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(300) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (std::string GLExt\() N
(301) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (\( ) S
(char) k
(* \)zglGetStringi\( GL_EXTENSIONS, i \) \);) p n
(302) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_Extensions.push_back\( GLExt \);) N
(303) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
(%s\\n) str
(", GLExt.c_str\( \) \);) p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(305) # () S 4 T () S 8 T () S 12 T (}) N
(306) # () S 4 T () S 8 T () S 12 T () S
(// Have to use OGL <=2.x method) c n
(307) # () S
() p 4 T () S 8 T () S 12 T () S
(else) K n
(308) # () S
() p 4 T () S 8 T () S 12 T ({) N
(309) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_INT32 NumExtensions = 0;) N
(310) # () S 4 T () S 8 T () S 12 T () S 16 T (zglGetIntegerv\( GL_NUM_EXTENSIONS, &NumExtensions \);) N
(311) # () N
(312) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::Initialise] <INFO> ) str
(") p n
(313) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(%d OpenGL Extensions supported:\\n) str
(", NumExtensions \);) p n
(314) # () N
(315) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(char) k
( CurExt[ 64 ] = { ') p
(\\0) str
(' };) p n
(316) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_MEMSIZE Position = 0, CharCount = 0;) N
(317) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_BOOL Loop = ZED_TRUE;) N
(318) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(const) K
( ) p
(char) k
( *pGLExtensions =) p n
(319) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (\( ) S
(const) K
( ) p
(char) k
( * \)glGetString\( GL_EXTENSIONS \);) p n
(320) # () N
(321) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(do) K n
(322) # () S
() p 4 T () S 8 T () S 12 T () S 16 T ({) N
(323) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (CurExt[ Position++ ] = pGLExtensions[ CharCount ];) N
(324) # () N
(325) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( pGLExtensions[ CharCount+1 ] == 0x20 \)) p n
(326) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(327) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (std::string CopyString;) N
(328) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (CopyString.insert\( 0, CurExt, Position \);) N
(329) # () N
(330) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_Extensions.push_back\( CopyString \);) N
(331) # () N
(332) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (zedTrace\( ") S
(%s\\n) str
(", CopyString.c_str\( \) \);) p n
(333) # () N
(334) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Position = 0;) N
(335) # () N
(336) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (CharCount++;) N
(337) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(338) # () N
(339) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (CharCount++;) N
(340) # () N
(341) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( pGLExtensions[ CharCount ] == 0x00 \)) p n
(342) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(343) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (Loop = ZED_FALSE;) N
(344) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(345) # () N
([ ZED::Renderer::GLExtender.cpp ]) (Page 5/6) (Dec 20, 11 20:54) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(346) # () p 4 T () S 8 T () S 12 T () S 16 T (}) S
(while) K
(\( Loop \);) p n
(347) # () S 4 T () S 8 T () S 12 T (}) N
(348) # () N
(349) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GLVersion.Major >= 2 \)) p n
(350) # () S 4 T () S 8 T () S 12 T ({) N
(351) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( zglInitGLVer20\( \) != ZED_OK \)) p n
(352) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(353) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(354) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(355) # () S 4 T () S 8 T () S 12 T (}) N
(356) # () N
(357) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(358) # () S 4 T () S 8 T (}) N
(359) # () N
(360) # () S 4 T () S 8 T (ZED_UINT32 GLExtender::InitialiseWindowExt\( Display *p_pDisplay,) N
(361) # () S 4 T () S 8 T () S 12 T (ZED_INT32 p_Screen \)) N
(362) # () S 4 T () S 8 T ({) N
(363) # () S 4 T () S 8 T () S 12 T () S
(// Process the string) c n
(364) # () S
() p 4 T () S 8 T () S 12 T () S
(const) K
( ) p
(char) k
( *pWinExt = ) p n
(365) # () S 4 T () S 8 T () S 12 T () S 16 T (glXQueryExtensionsString\( p_pDisplay, p_Screen \);) N
(366) # () N
(367) # () S 4 T () S 8 T () S 12 T (ZED_UINT32 NumExtensions = 0;) N
(368) # () N
(369) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::InitialiseWindowExt] ) str
(") p n
(370) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(<INFO> Getting GLX Extensions.\\n) str
(" \);) p n
(371) # () N
(372) # () S 4 T () S 8 T () S 12 T () S
(char) k
( CurExt[ 64 ] = { ') p
(\\0) str
(' };) p n
(373) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE Position = 0, CharCount = 0;) N
(374) # () S 4 T () S 8 T () S 12 T (ZED_BOOL Loop = ZED_TRUE;) N
(375) # () N
(376) # () S 4 T () S 8 T () S 12 T () S
(do) K n
(377) # () S
() p 4 T () S 8 T () S 12 T ({) N
(378) # () S 4 T () S 8 T () S 12 T () S 16 T (CurExt[ Position++ ] = pWinExt[ CharCount ];) N
(379) # () N
(380) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( pWinExt[ CharCount+1 ] == 0x20 \)) p n
(381) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(382) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (std::string Copy;) N
(383) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Copy.insert\( 0, CurExt, Position \);) N
(384) # () N
(385) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_WindowExtensions.push_back\( Copy \);) N
(386) # () N
(387) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
(%s\\n) str
(", Copy.c_str\( \) \);) p n
(388) # () N
(389) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Position = 0;) N
(390) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (NumExtensions++;) N
(391) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (CharCount++;) N
(392) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(393) # () N
(394) # () S 4 T () S 8 T () S 12 T () S 16 T (CharCount++;) N
(395) # () N
(396) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( pWinExt[ CharCount ] == 0x00 \)) p n
(397) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(398) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Loop = ZED_FALSE;) N
(399) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(400) # () S 4 T () S 8 T () S 12 T (}) S
(while) K
(\( Loop \);) p n
(401) # () N
(402) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::GLExtender::InitialiseWindowExt] ) str
(") p n
(403) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(<INFO> %d GLX Extensions available.\\n) str
(", NumExtensions \);) p n
(404) # () N
(405) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(406) # () S 4 T () S 8 T (}) N
(407) # () N
(408) # () S 4 T () S 8 T () S
(void) k
( GLExtender::RegisterBaseGLExtensions\( \)) p n
(409) # () S 4 T () S 8 T ({) N
(410) # () S 4 T () S 8 T () S 12 T () S
(// Just register the CreateContextAttribsARB) c n
(411) # () S
() p 4 T () S 8 T (}) N
(412) # () S 4 T (}) N
(413) # (}) N
(414) # () N
([ ZED::Renderer::GLExtender.cpp ]) (Page 6/6) (Dec 20, 11 20:54) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
