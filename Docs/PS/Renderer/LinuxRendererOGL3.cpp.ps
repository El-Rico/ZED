%!PS-Adobe-3.0
%%Title: LinuxRendererOGL3.cpp
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Sat Jun 30 15:27:20 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 7
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.542439 def
/cw 4.525463 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   525.707964 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 4 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include) K
( <LinuxRendererOGL3.hpp>) p n
(2) # () S
(#include) K
( <cstring>) p n
(3) # () S
(#include) K
( <Matrix3x3.hpp>) p n
(4) # () N
(5) # () S
(namespace) K
( ZED) p n
(6) # ({) N
(7) # () S 4 T () S
(namespace) K
( Renderer) p n
(8) # () S 4 T ({) N
(9) # () S 4 T () S 8 T (LinuxRendererOGL3::LinuxRendererOGL3\( \)) N
(10) # () S 4 T () S 8 T ({) N
(11) # () S 4 T () S 8 T () S 12 T () S
(// Set pointers to null and everything else to sane values) c n
(12) # () S
() p 4 T () S 8 T () S 12 T (m_pDisplay = ZED_NULL;) N
(13) # () S 4 T () S 8 T () S 12 T (m_pScreen = ZED_NULL;) N
(14) # () S 4 T () S 8 T () S 12 T (m_pVertexCacheManager = ZED_NULL;) N
(15) # () N
(16) # () S 4 T () S 8 T () S 12 T (m_View3D.Identity\( \);) N
(17) # () N
(18) # () S 4 T () S 8 T () S 12 T () S
(// By default render as perspective) c n
(19) # () S
() p 4 T () S 8 T () S 12 T (m_ViewMode = ZED_VIEW_PERSPECTIVE;) N
(20) # () N
(21) # () S 4 T () S 8 T () S 12 T () S
(// By default, leave the cursor as visible) c n
(22) # () S
() p 4 T () S 8 T () S 12 T (m_CursorHidden = ZED_FALSE;) N
(23) # () S 4 T () S 8 T (}) N
(24) # () N
(25) # () S 4 T () S 8 T (LinuxRendererOGL3::~LinuxRendererOGL3\( \)) N
(26) # () S 4 T () S 8 T ({) N
(27) # () S 4 T () S 8 T () S 12 T () S
(// Get rid of the vertex cache manager) c n
(28) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pVertexCacheManager != ZED_NULL \)) p n
(29) # () S 4 T () S 8 T () S 12 T ({) N
(30) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::LinuxRendererOGL3::~LinuxRendererOGL3] <INFO>) str
(") p n
(31) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
( Deleting Vertex Cache Manager\\n) str
(" \);) p n
(32) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( m_pVertexCacheManager;) p n
(33) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pVertexCacheManager = ZED_NULL;) N
(34) # () S 4 T () S 8 T () S 12 T (}) N
(35) # () S 4 T () S 8 T () S 12 T () S
(// Unhide the cursor) c n
(36) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_CursorHidden \)) p n
(37) # () S 4 T () S 8 T () S 12 T ({) N
(38) # () S 4 T () S 8 T () S 12 T () S 16 T (XUndefineCursor\( m_pDisplay, m_Window \);) N
(39) # () S 4 T () S 8 T () S 12 T (}) N
(40) # () N
(41) # () S 4 T () S 8 T () S 12 T () S
(// Unbind GLX) c n
(42) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay \)) p n
(43) # () S 4 T () S 8 T () S 12 T ({) N
(44) # () S 4 T () S 8 T () S 12 T () S 16 T (glXMakeCurrent\( m_pDisplay, 0, 0 \);) N
(45) # () S 4 T () S 8 T () S 12 T (}) N
(46) # () N
(47) # () S 4 T () S 8 T () S 12 T () S
(// Free the GLX context) c n
(48) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay && m_GLContext \)) p n
(49) # () S 4 T () S 8 T () S 12 T ({) N
(50) # () S 4 T () S 8 T () S 12 T () S 16 T (glXDestroyContext\( m_pDisplay, m_GLContext \);) N
(51) # () S 4 T () S 8 T () S 12 T (}) N
(52) # () N
(53) # () S 4 T () S 8 T () S 12 T () S
(// MOVE THESE OUT OF HERE.) c n
(54) # () S
() p 4 T () S 8 T () S 12 T () S
(// LET THE APPLICATION HANDLE IT) c n
(55) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay && m_Window \)) p n
(56) # () S 4 T () S 8 T () S 12 T ({) N
(57) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Destroying Window\\n) str
(" \);) p n
(58) # () S 4 T () S 8 T () S 12 T () S 16 T (XDestroyWindow\( m_pDisplay, m_Window \);) N
(59) # () S 4 T () S 8 T () S 12 T (}) N
(60) # () N
(61) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay && m_ColMap \)) p n
(62) # () S 4 T () S 8 T () S 12 T ({) N
(63) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Destroying colourmap\\n) str
(" \);) p n
(64) # () S 4 T () S 8 T () S 12 T () S 16 T (XFreeColormap\( m_pDisplay, m_ColMap \);) N
(65) # () S 4 T () S 8 T () S 12 T (}) N
(66) # () N
(67) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay \)) p n
(68) # () S 4 T () S 8 T () S 12 T ({) N
(69) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Destroying Display\\n) str
(" \);) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 1/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 4 T () S 8 T () S 12 T () S 16 T (XCloseDisplay\( m_pDisplay \);) N
(71) # () S 4 T () S 8 T () S 12 T (}) N
(72) # () S 4 T () S 8 T (}) N
(73) # () N
(74) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::Create\( GraphicsAdapter *p_pAdapter,) N
(75) # () S 4 T () S 8 T () S 12 T () S
(const) K
( CanvasDescription &p_Canvas \)) p n
(76) # () S 4 T () S 8 T ({) N
(77) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay == ZED_NULL \)) p n
(78) # () S 4 T () S 8 T () S 12 T ({) N
(79) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <ERROR> ) str
(") p n
(80) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Display not initialised\\n) str
("\);) p n
(81) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(82) # () S 4 T () S 8 T () S 12 T (}) N
(83) # () N
(84) # () S 4 T () S 8 T () S 12 T (ZED_INT32 GLXMajor = 0, GLXMinor = 0;) N
(85) # () S 4 T () S 8 T () S 12 T (m_Canvas = p_Canvas;) N
(86) # () N
(87) # () S 4 T () S 8 T () S 12 T () S
(// Put the canvas' colour, depth, and stencil formats converted) c n
(88) # () S
() p 4 T () S 8 T () S 12 T () S
(// into a format that can be consumed by the VA) c n
(89) # () S
() p 4 T () S 8 T () S 12 T (ZED_INT32 Depth = 0, Stencil = 0, A = 0, R = 0, G = 0, B = 0;) N
(90) # () S 4 T () S 8 T () S 12 T () S
(switch) K
(\( m_Canvas.GetDepthStencil\( \) \)) p n
(91) # () S 4 T () S 8 T () S 12 T ({) N
(92) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_FORMAT_D24S8:) p n
(93) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(94) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Depth = 24;) N
(95) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Stencil = 8;) N
(96) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(97) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(98) # () S 4 T () S 8 T () S 12 T () S
(default) K
(:) p n
(99) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(100) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(101) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(102) # () S 4 T () S 8 T () S 12 T (}) N
(103) # () N
(104) # () S 4 T () S 8 T () S 12 T () S
(switch) K
(\( m_Canvas.GetBPP\( \) \)) p n
(105) # () S 4 T () S 8 T () S 12 T ({) N
(106) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( ZED_FORMAT_ARGB8:) p n
(107) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(108) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (A = 8;) N
(109) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (R = 8;) N
(110) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (G = 8;) N
(111) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (B = 8;) N
(112) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(113) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(114) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( ZED_FORMAT_RGB565:) p n
(115) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(116) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (A = 0;) N
(117) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (R = 5;) N
(118) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (G = 6;) N
(119) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (B = 5;) N
(120) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(121) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(default) K
(:) p n
(122) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(123) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(124) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(125) # () S 4 T () S 8 T () S 12 T (}) N
(126) # () S 4 T () N
(127) # () S 4 T () S 8 T () S 12 T (ZED_INT32 AntiAliasing = 0, AntiAliasingCount = 0;) N
(128) # () S 4 T () S 8 T () S 12 T () S
(switch) K
(\( m_Canvas.GetAntiAliasingType\( \) \)) p n
(129) # () S 4 T () S 8 T () S 12 T ({) N
(130) # () S 4 T () S 8 T () S 12 T () S
(case) K
( ZED_SAMPLE_TYPE_MSAA_4:) p n
(131) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(132) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (AntiAliasing = 1;) N
(133) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (AntiAliasingCount = 4;) N
(134) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(135) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(136) # () S 4 T () S 8 T () S 12 T () S
(default) K
(:) p n
(137) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(138) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 2/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(139) # () p 4 T () S 8 T () S 12 T () S 16 T (}) N
(140) # () S 4 T () S 8 T () S 12 T (}) N
(141) # () N
(142) # () S 4 T () S 8 T () S 12 T () S
(int) k
( VA[ ] =) p n
(143) # () S 4 T () S 8 T () S 12 T ({) N
(144) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_X_RENDERABLE,) S 36 T (True,) N
(145) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_DRAWABLE_TYPE,) S 36 T (GLX_WINDOW_BIT,) N
(146) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_RENDER_TYPE,) S 36 T (GLX_RGBA_BIT,) N
(147) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_X_VISUAL_TYPE,) S 36 T (GLX_TRUE_COLOR,) N
(148) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_RED_SIZE,) S 32 T () S 36 T (R,) N
(149) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_GREEN_SIZE,) S 32 T () S 36 T (G,) N
(150) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_BLUE_SIZE,) S 32 T () S 36 T (B,) N
(151) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_ALPHA_SIZE,) S 32 T () S 36 T (A,) N
(152) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_DEPTH_SIZE,) S 32 T () S 36 T (Depth,) N
(153) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_STENCIL_SIZE,) S 36 T (Stencil,) N
(154) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_DOUBLEBUFFER, \( m_Canvas.GetBackBufferCount\( \) > 0 ?) N
(155) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (True : False \),) N
(156) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_SAMPLE_BUFFERS,) S 36 T (AntiAliasing,) N
(157) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_SAMPLES,) S 32 T () S 36 T (AntiAliasingCount,) S
(/*) c n
(158) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_COVERAGE_SAMPLES_NV,) S 44 T (CSCoverSamples,) N
(159) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_COLOR_SAMPLES_NV,) S 40 T () S 44 T (CSColourSamples,*/) N
(160) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (None) N
(161) # () S 4 T () S 8 T () S 12 T (};) N
(162) # () N
(163) # () S 4 T () S 8 T () S 12 T () S
(// Check if GLX version is 1.3 or greater for FBConfig) c n
(164) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( !glXQueryVersion\( m_pDisplay, &GLXMajor, &GLXMinor \) ||) p n
(165) # () S 4 T () S 8 T () S 12 T () S 16 T (\( \( GLXMajor == 1 \) && \( GLXMinor < 3 \) \) || \( GLXMajor < 1 \) \)) N
(166) # () S 4 T () S 8 T () S 12 T ({) N
(167) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <ERROR> ) str
(") p n
(168) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Invalid GLX version: %d.%d\\n) str
(") p n
(169) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(\\tRequire at least version 1.3\\n) str
(", GLXMajor, GLXMinor \);) p n
(170) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(171) # () S 4 T () S 8 T () S 12 T (}) N
(172) # () N
(173) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(174) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Getting framebuffer configurations\\n) str
(" \);) p n
(175) # () S 4 T () S 8 T () S 12 T (ZED_INT32 FBCount;) N
(176) # () S 4 T () S 8 T () S 12 T (GLXFBConfig *pFBC = glXChooseFBConfig\( m_pDisplay,) N
(177) # () S 4 T () S 8 T () S 12 T () S 16 T (DefaultScreen\( m_pDisplay \), VA, &FBCount \);) N
(178) # () N
(179) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( !pFBC \)) p n
(180) # () S 4 T () S 8 T () S 12 T ({) N
(181) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <ERROR> ) str
(") p n
(182) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to retrieve a framebuffer configuration.\\n) str
(" \);) p n
(183) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(184) # () S 4 T () S 8 T () S 12 T (}) N
(185) # () N
(186) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(187) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Found %d matching configurations\\n) str
(", FBCount \);) p n
(188) # () N
(189) # () S 4 T () S 8 T () S 12 T () S
(// Just choose the default one) c n
(190) # () S
() p 4 T () S 8 T () S 12 T (GLXFBConfig GLFBConf = pFBC[ 0 ];) N
(191) # () N
(192) # () S 4 T () S 8 T () S 12 T () S
(// Done with the FBC) c n
(193) # () S
() p 4 T () S 8 T () S 12 T (XFree\( pFBC \);) N
(194) # () N
(195) # () S 4 T () S 8 T () S 12 T () S
(// Get a visual) c n
(196) # () S
() p 4 T () S 8 T () S 12 T (XVisualInfo *pVI = glXGetVisualFromFBConfig\( m_pDisplay,) N
(197) # () S 4 T () S 8 T () S 12 T () S 16 T (GLFBConf \);) N
(198) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(199) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Visual ID = 0x%08X\\n) str
(", pVI->visualid \);) p n
(200) # () N
(201) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(202) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Setting up colourmap.\\n) str
(" \);) p n
(203) # () N
(204) # () S 4 T () S 8 T () S 12 T () S
(// MOVE!) c n
(205) # () S
() p 4 T () S 8 T () S 12 T (XSetWindowAttributes WinAttrib;) N
(206) # () N
(207) # () S 4 T () S 8 T () S 12 T (m_ColMap = XCreateColormap\( m_pDisplay,) N
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 3/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(208) # () p 4 T () S 8 T () S 12 T () S 16 T (RootWindow\( m_pDisplay, pVI->screen \), pVI->visual,) N
(209) # () S 4 T () S 8 T () S 12 T () S 16 T (AllocNone \);) N
(210) # () N
(211) # () S 4 T () S 8 T () S 12 T (WinAttrib.colormap = m_ColMap;) N
(212) # () S 4 T () S 8 T () S 12 T (WinAttrib.background_pixmap = None;) N
(213) # () S 4 T () S 8 T () S 12 T (WinAttrib.border_pixel = 0;) N
(214) # () S 4 T () S 8 T () S 12 T (WinAttrib.event_mask = StructureNotifyMask|ExposureMask|) N
(215) # () S 4 T () S 8 T () S 12 T () S 16 T (KeyPressMask|KeyReleaseMask|ButtonPressMask|ResizeRedirectMask|) N
(216) # () S 4 T () S 8 T () S 12 T () S 16 T (PointerMotionMask;) N
(217) # () S 4 T () S 8 T () S 12 T (WinAttrib.override_redirect = ) S
(false) k
(;) p n
(218) # () N
(219) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(220) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Setting up window.\\n) str
(" \);) p n
(221) # () N
(222) # () S 4 T () S 8 T () S 12 T (m_Window = XCreateWindow\( m_pDisplay,) N
(223) # () S 4 T () S 8 T () S 12 T () S 16 T (RootWindow\( m_pDisplay, pVI->screen \), 0, 0,) N
(224) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Canvas.GetWidth\( \), m_Canvas.GetHeight\( \),) N
(225) # () S 4 T () S 8 T () S 12 T () S 16 T (0, pVI->depth, InputOutput, pVI->visual,) N
(226) # () S 4 T () S 8 T () S 12 T () S 16 T (CWOverrideRedirect|CWBorderPixel|CWColormap|CWEventMask, &WinAtt) N
0 T (rib \);) N
(227) # () N
(228) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( !m_Window \)) p n
(229) # () S 4 T () S 8 T () S 12 T ({) N
(230) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <ERROR> ) str
(") p n
(231) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to create window.\\n) str
(" \);) p n
(232) # () S 4 T () S 8 T () S 12 T () S 16 T (XFree\( pVI \);) N
(233) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(234) # () S 4 T () S 8 T () S 12 T (}) N
(235) # () N
(236) # () S
(//) c 4 T () S 8 T () S 12 T (XFree\( pVI \);) N
(237) # () N
(238) # () S
() p 4 T () S 8 T () S 12 T (XStoreName\( m_pDisplay, m_Window, ") S
(ZED TEST) str
(" \);) p n
(239) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(240) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Mapping window.\\n) str
(" \);) p n
(241) # () S
(//) c 4 T () S 8 T () S 12 T (XSelectInput\( m_pDisplay, m_Window, ExposureMask | PointerMotionMak) N
(242) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_CursorHidden != ZED_FALSE \)) p n
(243) # () S 4 T () S 8 T () S 12 T ({) N
(244) # () S 4 T () S 8 T () S 12 T () S 16 T (Pixmap BlankPointer;) N
(245) # () S 4 T () S 8 T () S 12 T () S 16 T (XColor BlankColour;) N
(246) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(char) k
( Data[ 1 ] = { 0 };) p n
(247) # () S 4 T () S 8 T () S 12 T () S 16 T (Cursor cursor;) N
(248) # () N
(249) # () S 4 T () S 8 T () S 12 T () S 16 T (BlankPointer = XCreateBitmapFromData\( m_pDisplay, m_Window,) N
(250) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Data, 1, 1 \);) N
(251) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( BlankPointer == None \)) p n
(252) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(253) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(254) # () S 4 T () S 8 T () S 12 T () S 16 T (cursor = XCreatePixmapCursor\( m_pDisplay, BlankPointer,) N
(255) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (BlankPointer, &BlankColour, &BlankColour, 0, 0 \);) N
(256) # () S 4 T () S 8 T () S 12 T () S 16 T (XFreePixmap\( m_pDisplay, BlankPointer \);) N
(257) # () S 4 T () S 8 T () S 12 T () S 16 T (XDefineCursor\( m_pDisplay, m_Window, cursor \);) N
(258) # () S 4 T () S 8 T () S 12 T (}) N
(259) # () S 4 T () S 8 T () S 12 T (XMapRaised\( m_pDisplay, m_Window \);) N
(260) # () S 4 T () S 8 T () S 12 T (XMapWindow\( m_pDisplay, m_Window \);) N
(261) # () N
(262) # () S 4 T () S 8 T () S 12 T () S
(// Create a temporary OpenGL context to get the OpenGL version) c n
(263) # () S
() p 4 T () S 8 T () S 12 T () S
(// supported by the graphics card) c n
(264) # () S
() p 4 T () S 8 T () S 12 T (GLXContext TmpCtx = glXCreateContext\( m_pDisplay, pVI, 0, True \);) N
(265) # () S 4 T () S 8 T () S 12 T (glXMakeCurrent\( m_pDisplay, m_Window, TmpCtx \);) N
(266) # () N
(267) # () S 4 T () S 8 T () S 12 T (ZED_GLVERSION VerInfo;) N
(268) # () S 4 T () S 8 T () S 12 T (memset\( &VerInfo, 0, ) S
(sizeof) K
(\( VerInfo \) \);) p n
(269) # () N
(270) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ) p
(char) k
( *pGLVer = \( ) p
(const) K
( ) p
(char) k
(* \)glGetString\( GL_VERSION \);) p n
(271) # () N
(272) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <INFO> ) str
(") p n
(273) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Got version: %s.\\n) str
(", pGLVer \);) p n
(274) # () N
(275) # () S 4 T () S 8 T () S 12 T () S
(// Extract the version information and store it in VerInfo) c n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 4/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(276) # () p 4 T () S 8 T () S 12 T () S
(// [N.B] This is pretty terrible -_-) c n
(277) # () S
() p 4 T () S 8 T () S 12 T (ZED_MEMSIZE StrLen = strlen\( pGLVer \);) N
(278) # () S 4 T () S 8 T () S 12 T (ZED_MEMSIZE MinorStart = 0;) N
(279) # () N
(280) # () S 4 T () S 8 T () S 12 T () S
(char) k
( MajorStr[ 3 ];) p n
(281) # () S 4 T () S 8 T () S 12 T () S
(char) k
( MinorStr[ 3 ];) p n
(282) # () N
(283) # () S 4 T () S 8 T () S 12 T (memset\( MajorStr, ') S
(\\0) str
(', ) p
(sizeof) K
(\( ) p
(char) k
( \)*3 \);) p n
(284) # () S 4 T () S 8 T () S 12 T (memset\( MinorStr, ') S
(\\0) str
(', ) p
(sizeof) K
(\( ) p
(char) k
( \)*3 \);) p n
(285) # () N
(286) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < StrLen; i++ \)) p n
(287) # () S 4 T () S 8 T () S 12 T ({) N
(288) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get the first string) c n
(289) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// There will be an error if no period or space is found by) c n
(290) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(// three characters in.) c n
(291) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( pGLVer[ i ] == 0x20 || pGLVer[ i ] == 0x00 ||) p n
(292) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pGLVer[ i ] == 0x2E \)) N
(293) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(294) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (MinorStart = i+1;) N
(295) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(296) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(297) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Copy the char into another buffer) c n
(298) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (MajorStr[ i ] = pGLVer[ i ];) N
(299) # () S 4 T () S 8 T () S 12 T (}) N
(300) # () N
(301) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = MinorStart; i < StrLen; i++ \)) p n
(302) # () S 4 T () S 8 T () S 12 T ({) N
(303) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( pGLVer[ i ] == 0x20 || pGLVer[ i ] == 0x00 ||) p n
(304) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pGLVer[ i ] == 0x2E \)) N
(305) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(306) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(307) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(308) # () S 4 T () S 8 T () S 12 T () S 16 T (MinorStr[ i-MinorStart ] = pGLVer[ i ];) N
(309) # () S 4 T () S 8 T () S 12 T (}) N
(310) # () N
(311) # () S 4 T () S 8 T () S 12 T (StrLen = strlen\( MajorStr \);) N
(312) # () N
(313) # () S 4 T () S 8 T () S 12 T () S
(// Convert both strings to their integer equals) c n
(314) # () S
() p 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < StrLen; i++ \)) p n
(315) # () S 4 T () S 8 T () S 12 T ({) N
(316) # () S 4 T () S 8 T () S 12 T () S 16 T (VerInfo.Major += \( MajorStr[ i ]-0x30 \);) S
(//*\( i*10 \) \);) c n
(317) # () S
() p 4 T () S 8 T () S 12 T (}) N
(318) # () N
(319) # () S 4 T () S 8 T () S 12 T (StrLen = strlen\( MinorStr \);) N
(320) # () N
(321) # () S 4 T () S 8 T () S 12 T () S
(for) K
(\( ZED_MEMSIZE i = 0; i < StrLen; i++ \)) p n
(322) # () S 4 T () S 8 T () S 12 T ({) N
(323) # () S 4 T () S 8 T () S 12 T () S 16 T (VerInfo.Minor += \( MinorStr[ i ]-0x30 \);) S
(//*\( i*10 \) \);) c n
(324) # () S
() p 4 T () S 8 T () S 12 T (}) N
(325) # () N
(326) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <INFO> ) str
(") p n
(327) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(GLVer: %d.%d\\n) str
(", VerInfo.Major, VerInfo.Minor \);) p n
(328) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GLExt.Initialise\( VerInfo \) != ZED_OK \)) p n
(329) # () S 4 T () S 8 T () S 12 T ({) N
(330) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Get rid of the temporary OpenGL context) c n
(331) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (glXMakeCurrent\( m_pDisplay, 0, 0 \);) N
(332) # () S 4 T () S 8 T () S 12 T () S 16 T (glXDestroyContext\( m_pDisplay, TmpCtx \);) N
(333) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Something went wrong) c n
(334) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <ERROR> ) str
(") p n
(335) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to get extensions.\\n) str
(" \);) p n
(336) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(337) # () N
(338) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(339) # () S 4 T () S 8 T () S 12 T (}) N
(340) # () N
(341) # () S 4 T () S 8 T () S 12 T () S
(// Get rid of the temporary OpenGL context) c n
(342) # () S
() p 4 T () S 8 T () S 12 T (glXMakeCurrent\( m_pDisplay, 0, 0 \);) N
(343) # () S 4 T () S 8 T () S 12 T (glXDestroyContext\( m_pDisplay, TmpCtx \);) N
(344) # () N
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 5/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(345) # () p 4 T () S 8 T () S 12 T (XFree\( pVI \);) N
(346) # () N
(347) # () S 4 T () S 8 T () S 12 T (ZED_INT32 ScreenNum = DefaultScreen\( m_pDisplay \);) N
(348) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <INFO> ) str
(") p n
(349) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
( Getting GLX Extensions.\\n) str
(" \);) p n
(350) # () S 4 T () S 8 T () S 12 T () N
(351) # () S 4 T () S 8 T () S 12 T () S
(// Create a window \(TEMP!\)) c n
(352) # () S
() p 4 T () S 8 T () S 12 T (PFNGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribs = ZED_NULL) N
0 T (;) N
(353) # () S 4 T () S 8 T () S 12 T (glXCreateContextAttribs = \( PFNGLXCREATECONTEXTATTRIBSARBPROC \)) N
(354) # () S 4 T () S 8 T () S 12 T () S 16 T (glXGetProcAddress\() N
(355) # () S 4 T () S 8 T () S 12 T () S 16 T (\( ) S
(const) K
( GLubyte * \)") p
(glXCreateContextAttribsARB) str
(" \);) p n
(356) # () N
(357) # () S 4 T () S 8 T () S 12 T (m_GLExt = GLExtender\( \);) N
(358) # () N
(359) # () S 4 T () S 8 T () S 12 T (ZED_INT32 Major = VerInfo.Major;) N
(360) # () S 4 T () S 8 T () S 12 T (ZED_INT32 Minor = VerInfo.Minor;) N
(361) # () S 4 T () S 8 T () S 12 T () S
(// Rather than hard-code the Major and Minor, it should be) c n
(362) # () S
() p 4 T () S 8 T () S 12 T () S
(// determined from the available OpenGL implementation) c n
(363) # () S
() p 4 T () S 8 T () S 12 T (ZED_INT32 ContextAttribs[ ] =) N
(364) # () S 4 T () S 8 T () S 12 T ({) N
(365) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_CONTEXT_MAJOR_VERSION_ARB,) S 48 T (Major,) N
(366) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_CONTEXT_MINOR_VERSION_ARB,) S 48 T (Minor,) N
(367) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_CONTEXT_FLAGS_ARB,) S 40 T (GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,) N
(368) # () S
(#if) K
( ZED_BUILD_DEBUG) p n
(369) # () S 4 T () S 8 T () S 12 T () S 16 T (GLX_CONTEXT_FLAGS_ARB,) S 40 T (GLX_CONTEXT_DEBUG_BIT_ARB,) N
(370) # () S
(#endif) K n
(371) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (None) N
(372) # () S 4 T () S 8 T () S 12 T (};) N
(373) # () N
(374) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(375) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Setting up OpenGL context.\\n) str
(" \);) p n
(376) # () N
(377) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GLExt.InitialiseWindowExt\( m_pDisplay, ScreenNum \) != ZED_OK \)) p n
(378) # () S 4 T () S 8 T () S 12 T ({) N
(379) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <ERROR>) str
(") p n
(380) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to get GLX Extensions.\\n) str
(" \);) p n
(381) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(382) # () N
(383) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(384) # () S 4 T () S 8 T () S 12 T (}) N
(385) # () N
(386) # () S 4 T () S 8 T () S 12 T () S
(// Attempt to create an OGL context for the highest OGL 3 version) c n
(387) # () S
() p 4 T () S 8 T () S 12 T () S
(// Going down minor versions until zero is reached) c n
(388) # () S
() p 4 T () S 8 T () S 12 T (ZED_BOOL ContextCreated = ZED_FALSE;) N
(389) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_GLExt.IsWindowExtSupported\( ") p
(GLX_ARB_create_context) str
(" \) ==) p n
(390) # () S 4 T () S 8 T () S 12 T () S 16 T (ZED_TRUE \)) N
(391) # () S 4 T () S 8 T () S 12 T ({) N
(392) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(while) K
(\( Minor >= 0 && ContextCreated != ZED_TRUE \)) p n
(393) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(394) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (m_GLContext = glXCreateContextAttribs\() N
(395) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_pDisplay, GLFBConf, 0, True, ContextAttribs \);) N
(396) # () N
(397) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( m_GLContext == ZED_NULL \)) p n
(398) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(399) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] ) str
(") p n
(400) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (") S
(<ERROR> Failed to create context.\\n) str
(" \);) p n
(401) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(402) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(403) # () N
(404) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ZED_INT32 MakeCur = glXMakeCurrent\( m_pDisplay, m_Window,) N
(405) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_GLContext \);) N
(406) # () N
(407) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( MakeCur == 0 \) ) p
(// 0 == GLXBadContext) c n
(408) # () S
() p 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(409) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] ) str
(") p n
(410) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (") S
(<ERROR> Failed to make context current.\\n) str
(" \);) p n
(411) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (m_GLContext = 0;) N
(412) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 6/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(413) # () p 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(414) # () N
(415) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(if) K
(\( MakeCur == True \)) p n
(416) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(417) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] ) str
(") p n
(418) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (") S
(<INFO> Successfully created an OpenGL %d.%d ) str
(") p n
(419) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (") S
(Context.\\n) str
(", ContextAttribs[ 1 ],) p n
(420) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (ContextAttribs[ 3 ] \);) N
(421) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(break) K
(;) p n
(422) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(423) # () N
(424) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (Minor--;) N
(425) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (zedTrace\( ") S
(Minor: %d\\n) str
(", Minor \);) p n
(426) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (ContextAttribs[ 3 ] = Minor;) N
(427) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(428) # () S 4 T () S 8 T () S 12 T (}) N
(429) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(430) # () S
() p 4 T () S 8 T () S 12 T ({) N
(431) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(// Unfortunately, the GLX version may be 1.3 or lower) c n
(432) # () S
() p 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED::Renderer::LinuxRendererOGL3::Create] <ERROR> ) str
(") p n
(433) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(GLX does not support GLX_EXT_ARB_create_context) str
(" \);) p n
(434) # () S 4 T () S 8 T () S 12 T () S 16 T (zedAssert\( ZED_FALSE \);) N
(435) # () N
(436) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_GRAPHICS_ERROR;) p n
(437) # () S 4 T () S 8 T () S 12 T (}) N
(438) # () N
(439) # () S 4 T () S 8 T () S 12 T (XSync\( m_pDisplay, False \);) N
(440) # () N
(441) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( !m_GLContext \)) p n
(442) # () S 4 T () S 8 T () S 12 T ({) N
(443) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <ERROR> ) str
(") p n
(444) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Failed to create OpenGL context.\\n) str
(" \);) p n
(445) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(446) # () S 4 T () S 8 T () S 12 T (}) N
(447) # () N
(448) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( !glXIsDirect\( m_pDisplay, m_GLContext \) \)) p n
(449) # () S 4 T () S 8 T () S 12 T ({) N
(450) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(451) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Indirect GLX Context.\\n) str
(" \);) p n
(452) # () S 4 T () S 8 T () S 12 T (}) N
(453) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(454) # () S
() p 4 T () S 8 T () S 12 T ({) N
(455) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(456) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (") S
(Direct GLX Context.\\n) str
(" \);) p n
(457) # () S 4 T () S 8 T () S 12 T (}) N
(458) # () N
(459) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
([ZED:Renderer:LinuxRendererOGL3:Create] <INFO> ) str
(") p n
(460) # () S 4 T () S 8 T () S 12 T () S 16 T (") S
(Making GLX Context current.\\n) str
(" \);) p n
(461) # () N
(462) # () S 4 T () S 8 T () S 12 T (glXMakeCurrent\( m_pDisplay, m_Window, m_GLContext \);) N
(463) # () S 4 T () S 8 T () S 12 T () S
(// !MOVE) c n
(464) # () S
() p 4 T () S 8 T () S 12 T () S
(//) c n
(465) # () S
() p 4 T () S 8 T () S 12 T () S
(this) K
(->ResizeCanvas\( m_Canvas.GetWidth\( \), m_Canvas.GetHeight\( \) \);) p n
(466) # () S 4 T () S 8 T () S 12 T (m_pVertexCacheManager = ) S
(new) K
( GLVertexCacheManager\( \);) p n
(467) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(468) # () S 4 T () S 8 T (}) N
(469) # () N
(470) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::CreateGLContext\( \)) p n
(471) # () S 4 T () S 8 T ({) N
(472) # () S
(//) c 4 T () S 8 T () S 12 T (m_GLContext = glXCreateContext\( m_pDisplay, ) N
(473) # () S
() p 4 T () S 8 T (}) N
(474) # () N
(475) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::ForceClear\( ) p
(const) K
( ZED_BOOL p_Colour,) p n
(476) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_Depth, ) p
(const) K
( ZED_BOOL p_Stencil \)) p n
(477) # () S 4 T () S 8 T ({) N
(478) # () S 4 T () S 8 T (}) N
(479) # () N
(480) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::ClearColour\( ) p
(const) K
( ZED_FLOAT32 p_Red,) p n
(481) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_FLOAT32 p_Green, ) p
(const) K
( ZED_FLOAT32 p_Blue \)) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 7/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(482) # () p 4 T () S 8 T ({) N
(483) # () S 4 T () S 8 T () S 12 T (glClearColor\( p_Red, p_Green, p_Blue, 1.0f \);) N
(484) # () S 4 T () S 8 T (}) N
(485) # () N
(486) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::BeginScene\( ) S
(const) K
( ZED_BOOL p_Colour,) p n
(487) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BOOL p_Depth, ) p
(const) K
( ZED_BOOL p_Stencil \)) p n
(488) # () S 4 T () S 8 T ({) N
(489) # () S 4 T () S 8 T () S 12 T (GLbitfield Flags;) N
(490) # () N
(491) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Colour \)) p n
(492) # () S 4 T () S 8 T () S 12 T ({) N
(493) # () S 4 T () S 8 T () S 12 T () S 16 T (Flags |= GL_COLOR_BUFFER_BIT;) N
(494) # () S 4 T () S 8 T () S 12 T (}) N
(495) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Depth \)) p n
(496) # () S 4 T () S 8 T () S 12 T ({) N
(497) # () S 4 T () S 8 T () S 12 T () S 16 T (Flags |= GL_DEPTH_BUFFER_BIT;) N
(498) # () S 4 T () S 8 T () S 12 T (}) N
(499) # () N
(500) # () S 4 T () S 8 T () S 12 T (glClear\( Flags \);) N
(501) # () N
(502) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(503) # () S 4 T () S 8 T (}) N
(504) # () N
(505) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::EndScene\( \)) p n
(506) # () S 4 T () S 8 T ({) N
(507) # () S 4 T () S 8 T () S 12 T (m_pVertexCacheManager->ForceFlushAll\( \);) N
(508) # () S 4 T () S 8 T () S 12 T (glXSwapBuffers\( m_pDisplay, m_Window \);) N
(509) # () S 4 T () S 8 T (}) N
(510) # () N
(511) # () S 4 T () S 8 T (ZED_BOOL LinuxRendererOGL3::ToggleFullscreen\( \)) N
(512) # () S 4 T () S 8 T ({) N
(513) # () S 4 T () S 8 T (}) N
(514) # () N
(515) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::ResizeCanvas\( ) S
(const) K
( ZED_UINT32 p_Width,) p n
(516) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_UINT32 p_Height \)) p n
(517) # () S 4 T () S 8 T ({) N
(518) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Width == 0 || p_Height == 0 \)) p n
(519) # () S 4 T () S 8 T () S 12 T ({) N
(520) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(521) # () S 4 T () S 8 T () S 12 T (}) N
(522) # () S 4 T () S 8 T () S 12 T () N
(523) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( \( p_Width == m_Canvas.GetWidth\( \) \) &&) p n
(524) # () S 4 T () S 8 T () S 12 T () S 16 T (\( p_Height == m_Canvas.GetHeight\( \) \) \)) N
(525) # () S 4 T () S 8 T () S 12 T ({) N
(526) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_OK;) p n
(527) # () S 4 T () S 8 T () S 12 T (}) N
(528) # () N
(529) # () S 4 T () S 8 T () S 12 T (m_Canvas.SetWidth\( p_Width \);) N
(530) # () S 4 T () S 8 T () S 12 T (m_Canvas.SetHeight\( p_Height \);) N
(531) # () N
(532) # () S 4 T () S 8 T () S 12 T () S
(// Get the aspect ratio) c n
(533) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( p_Width > p_Height \)) p n
(534) # () S 4 T () S 8 T () S 12 T ({) N
(535) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Canvas.SetAspectRatio\() N
(536) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(static_cast) k
(< ZED_FLOAT32 >\( m_Canvas.GetWidth\( \) \) /) p n
(537) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(static_cast) k
(< ZED_FLOAT32 >\( m_Canvas.GetHeight\( \) \) \);) p n
(538) # () S 4 T () S 8 T () S 12 T (}) N
(539) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(540) # () S
() p 4 T () S 8 T () S 12 T ({) N
(541) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Canvas.SetAspectRatio\() N
(542) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(static_cast) k
(< ZED_FLOAT32 >\( m_Canvas.GetHeight\( \) \) /) p n
(543) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(static_cast) k
(< ZED_FLOAT32 >\( m_Canvas.GetWidth\( \) \) \);) p n
(544) # () S 4 T () S 8 T () S 12 T (}) N
(545) # () N
(546) # () S 4 T () S 8 T () S 12 T (zglViewport\( 0, 0, m_Canvas.GetWidth\( \), m_Canvas.GetHeight\( \) \);) N
(547) # () N
(548) # () S 4 T () S 8 T () S 12 T (CalcViewProjMatrix\( \);) N
(549) # () N
(550) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 8/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(551) # () p 4 T () S 8 T (}) N
(552) # () N
(553) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::Release\( \)) p n
(554) # () S 4 T () S 8 T ({) N
(555) # () S 4 T () S 8 T (}) N
(556) # () N
(557) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::SetView3D\() p n
(558) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Right,) p n
(559) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Up,) p n
(560) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Direction,) p n
(561) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Position \)) p n
(562) # () S 4 T () S 8 T ({) N
(563) # () S 4 T () S 8 T () S 12 T () S
(// Create the world matrix for tha camera) c n
(564) # () S
() p 4 T () S 8 T () S 12 T () S
(//  R  R  R  P) c n
(565) # () S
() p 4 T () S 8 T () S 12 T () S
(//  U  U  U  P) c n
(566) # () S
() p 4 T () S 8 T () S 12 T () S
(// -D -D -D  P) c n
(567) # () S
() p 4 T () S 8 T () S 12 T () S
(//  0  0  0  1) c n
(568) # () S
() p 4 T () S 8 T () S 12 T () S
(//) c n
(569) # () S
() p 4 T () S 8 T () S 12 T () S
(//  R  U  D  P) c n
(570) # () S
() p 4 T () S 8 T () S 12 T () S
(//  R  U  D  P) c n
(571) # () S
() p 4 T () S 8 T () S 12 T () S
(//  R  U  D  P) c n
(572) # () S
() p 4 T () S 8 T () S 12 T () S
(//  0  0  0  1) c n
(573) # () S
() p 4 T () S 8 T () S 12 T (m_View3D\( 3, 0 \) = m_View3D\( 3, 1 \) = m_View3D\( 3, 2 \) = 0.0f;) N
(574) # () S 4 T () S 8 T () S 12 T (m_View3D\( 3, 3 \) = 1.0f;) N
(575) # () N
(576) # () S 4 T () S 8 T () S 12 T (m_View3D\( 0, 0 \) = p_Right[ 0 ];) N
(577) # () S 4 T () S 8 T () S 12 T (m_View3D\( 0, 1 \) = p_Right[ 1 ];) N
(578) # () S 4 T () S 8 T () S 12 T (m_View3D\( 0, 2 \) = p_Right[ 2 ];) N
(579) # () N
(580) # () S 4 T () S 8 T () S 12 T (m_View3D\( 1, 0 \) = p_Up[ 0 ];) N
(581) # () S 4 T () S 8 T () S 12 T (m_View3D\( 1, 1 \) = p_Up[ 1 ];) N
(582) # () S 4 T () S 8 T () S 12 T (m_View3D\( 1, 2 \) = p_Up[ 2 ];) N
(583) # () N
(584) # () S 4 T () S 8 T () S 12 T (m_View3D\( 2, 0 \) = p_Direction[ 0 ];) N
(585) # () S 4 T () S 8 T () S 12 T (m_View3D\( 2, 1 \) = p_Direction[ 1 ];) N
(586) # () S 4 T () S 8 T () S 12 T (m_View3D\( 2, 2 \) = p_Direction[ 2 ];) N
(587) # () N
(588) # () S 4 T () S 8 T () S 12 T (m_View3D\( 0, 3 \) = p_Position[ 0 ];) N
(589) # () S 4 T () S 8 T () S 12 T (m_View3D\( 1, 3 \) = p_Position[ 1 ];) N
(590) # () S 4 T () S 8 T () S 12 T (m_View3D\( 2, 3 \) = p_Position[ 2 ];) N
(591) # () S 4 T () S 8 T (}) N
(592) # () N
(593) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::SetViewLookAt\() p n
(594) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Position,) p n
(595) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_Point,) p n
(596) # () S 4 T () S 8 T () S 12 T () S
(const) K
( Arithmetic::Vector3 &p_WorldUp \)) p n
(597) # () S 4 T () S 8 T ({) N
(598) # () S 4 T () S 8 T () S 12 T () S
(// Create the view vectors) c n
(599) # () S
() p 4 T () S 8 T () S 12 T (Arithmetic::Vector3 Direction;) N
(600) # () S 4 T () S 8 T () S 12 T (Arithmetic::Vector3 Right;) N
(601) # () S 4 T () S 8 T () S 12 T (Arithmetic::Vector3 Up;) N
(602) # () S
(/*) c n
(603) # () S 4 T () S 8 T () S 12 T (Direction = p_Point - p_Position;) N
(604) # () S 4 T () S 8 T () S 12 T (Direction.Normalise\( \);) N
(605) # () N
(606) # () S 4 T () S 8 T () S 12 T (Right = Direction.Cross\( p_WorldUp \);) N
(607) # () S 4 T () S 8 T () S 12 T (Right.Normalise\( \);) N
(608) # () N
(609) # () S 4 T () S 8 T () S 12 T (Up = Right.Cross\( Direction \);) N
(610) # () S 4 T () S 8 T () S 12 T (Up.Normalise\( \);) N
(611) # () N
(612) # () S 4 T () S 8 T () S 12 T (Arithmetic::Matrix3x3 Collection;) N
(613) # () S 4 T () S 8 T () S 12 T (Collection.SetRows\( Right, Up, -Direction \);) N
(614) # () N
(615) # () S 4 T () S 8 T () S 12 T (Arithmetic::Vector3 Position = -\( Collection*p_Position \);*/) N
(616) # () N
(617) # () S
() p 4 T () S 8 T () S 12 T (Direction = \( p_Point - p_Position \);) N
(618) # () S 4 T () S 8 T () S 12 T (Direction.Normalise\( \);) N
(619) # () N
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 9/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(620) # () p 4 T () S 8 T () S 12 T (Up = \( p_WorldUp-p_WorldUp.Dot\( Direction \)*Direction \);) N
(621) # () S 4 T () S 8 T () S 12 T (Up.Normalise\( \);) N
(622) # () N
(623) # () S 4 T () S 8 T () S 12 T (Right = Up.Cross\( Direction \);) N
(624) # () N
(625) # () S 4 T () S 8 T () S 12 T (Arithmetic::Matrix3x3 Rot;) N
(626) # () S 4 T () S 8 T () S 12 T (Rot.SetRows\( Right, Up, -Direction \);) N
(627) # () N
(628) # () S 4 T () S 8 T () S 12 T (Arithmetic::Vector3 Position = -\( Rot*p_Position \);) N
(629) # () N
(630) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Right: %f %f %f\\n) str
(", Right[ 0 ], Right[ 1 ],) p n
(631) # () S 4 T () S 8 T () S 12 T () S 16 T (Right[ 2 ] \);) N
(632) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Up: %f %f %f\\n) str
(", Up[ 0 ], Up[ 1 ], Up[ 2 ] \);) p n
(633) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Direction: %f %f %f\\n) str
(",) p n
(634) # () S 4 T () S 8 T () S 12 T () S 16 T (-Direction[ 0 ], -Direction[ 1 ], -Direction[ 2 ] \);) N
(635) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Position: %f %f %f\\n) str
(",) p n
(636) # () S 4 T () S 8 T () S 12 T () S 16 T (Position[ 0 ], Position[ 1 ], Position[ 2 ] \);) N
(637) # () N
(638) # () S 4 T () S 8 T () S 12 T () S
(// Use SetView3D to handle the rest) c n
(639) # () S
() p 4 T () S 8 T () S 12 T (SetView3D\( Right, Up, -Direction, Position \);) N
(640) # () S 4 T () S 8 T (}) N
(641) # () N
(642) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::CalcViewProjMatrix\( \)) p n
(643) # () S 4 T () S 8 T ({) N
(644) # () S 4 T () S 8 T () S 12 T (Arithmetic::Matrix4x4 *pMatA, *pMatB;) N
(645) # () N
(646) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_ViewMode == ZED_VIEW_SCREEN \)) p n
(647) # () S 4 T () S 8 T () S 12 T ({) N
(648) # () S 4 T () S 8 T () S 12 T (}) N
(649) # () S 4 T () S 8 T () S 12 T () S
(else) K n
(650) # () S
() p 4 T () S 8 T () S 12 T ({) N
(651) # () S 4 T () S 8 T () S 12 T () S 16 T (pMatB = &m_View3D;) N
(652) # () N
(653) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(if) K
(\( m_ViewMode == ZED_VIEW_PERSPECTIVE \)) p n
(654) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(655) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (pMatA = &m_ProjectionPerspective;) N
(656) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(657) # () S 4 T () S 8 T () S 12 T (}) N
(658) # () S 4 T () S 8 T () S 12 T () N
(659) # () S 4 T () S 8 T () S 12 T (m_ViewProjection.Copy\( \( *pMatA \)*\( *pMatB \) \);) N
(660) # () S 4 T () S 8 T (}) N
(661) # () N
(662) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::CalcWorldViewProjMatrix\( \)) p n
(663) # () S 4 T () S 8 T ({) N
(664) # () S 4 T () S 8 T () S 12 T (Arithmetic::Matrix4x4 *pProjection, *pView, *pWorld;) N
(665) # () N
(666) # () S 4 T () S 8 T () S 12 T (pWorld = \( Arithmetic::Matrix4x4 * \)&m_World;) N
(667) # () S 4 T () S 8 T (}) N
(668) # () N
(669) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::SetClippingPlanes\( ) p
(const) K
( ZED_FLOAT32 p_Near,) p n
(670) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_FLOAT32 p_Far \)) p n
(671) # () S 4 T () S 8 T ({) N
(672) # () S 4 T () S 8 T () S 12 T (m_Near = p_Near;) N
(673) # () S 4 T () S 8 T () S 12 T (m_Far = p_Far;) N
(674) # () N
(675) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_Near <= ZED_Epsilon \)) p n
(676) # () S 4 T () S 8 T () S 12 T ({) N
(677) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Near = ZED_Epsilon;) N
(678) # () S 4 T () S 8 T () S 12 T (}) N
(679) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_Far <= 1.0f \)) p n
(680) # () S 4 T () S 8 T () S 12 T ({) N
(681) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Far = 1.0f;) N
(682) # () S 4 T () S 8 T () S 12 T (}) N
(683) # () N
(684) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( m_Near >= m_Far \)) p n
(685) # () S 4 T () S 8 T () S 12 T ({) N
(686) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Near = m_Far;) N
(687) # () S 4 T () S 8 T () S 12 T () S 16 T (m_Far = m_Near + 1.0f;) N
(688) # () S 4 T () S 8 T () S 12 T (}) N
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 10/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(689) # () p n
(690) # () S 4 T () S 8 T () S 12 T (Prepare2D\( \);) N
(691) # () N
(692) # () S 4 T () S 8 T () S 12 T () S
(// Create the perspective view) c n
(693) # () S
() p 4 T () S 8 T () S 12 T (ZED_FLOAT32 FarFactor = \( 1.0f/\( m_Near - m_Far \) \) * m_Far;) N
(694) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 NearFactor = -FarFactor*m_Near;) N
(695) # () N
(696) # () S 4 T () S 8 T () S 12 T (m_ProjectionPerspective\( 2, 2 \) = FarFactor;) N
(697) # () S 4 T () S 8 T () S 12 T (m_ProjectionPerspective\( 3, 2 \) = NearFactor;) N
(698) # () S 4 T () S 8 T (}) N
(699) # () N
(700) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::Prepare2D\( \)) p n
(701) # () S 4 T () S 8 T ({) N
(702) # () S 4 T () S 8 T (}) N
(703) # () N
(704) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::CalcPerspProjMatrix\() N
(705) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_FLOAT32 p_FOV, ) p
(const) K
( ZED_FLOAT32 p_AspectRatio,) p n
(706) # () S 4 T () S 8 T () S 12 T (Arithmetic::Matrix4x4 *p_pMatrix \)) N
(707) # () S 4 T () S 8 T ({) N
(708) # () S 4 T () S 8 T () S 12 T () S
(if) K
(\( Arithmetic::Absolute\( m_Far - m_Near \) < ZED_Epsilon \)) p n
(709) # () S 4 T () S 8 T () S 12 T ({) N
(710) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(return) K
( ZED_FAIL;) p n
(711) # () S 4 T () S 8 T () S 12 T (}) N
(712) # () S 4 T () S 8 T () S 12 T () N
(713) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 d = 1.0f/tan\( p_FOV / 180.0f * ZED_Pi * 0.5f \);) N
(714) # () S 4 T () S 8 T () S 12 T (ZED_FLOAT32 Recip = 1.0f/\( m_Near-m_Far \);) N
(715) # () N
(716) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 0, 0 \) = d / p_AspectRatio;) N
(717) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 1, 1 \) = d;) N
(718) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 2, 2 \) = \( m_Near+m_Far \)*Recip;) N
(719) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 2, 3 \) = 2*m_Near*m_Far*Recip;) N
(720) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 3, 2 \) = -1.0f;) N
(721) # () S 4 T () S 8 T () S 12 T (\( *p_pMatrix \)\( 3, 3 \) = 0.0f;) N
(722) # () N
(723) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(724) # () S 4 T () S 8 T (}) N
(725) # () N
(726) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::SetMode\( ) S
(const) K
( ZED_UINT32 p_Stage,) p n
(727) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_VIEWMODE p_Mode \)) p n
(728) # () S 4 T () S 8 T ({) N
(729) # () S 4 T () S 8 T () S 12 T (m_ViewMode = p_Mode;) N
(730) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(731) # () S 4 T () S 8 T (}) N
(732) # () N
(733) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::Render\( ) S
(const) K
( ZED_MEMSIZE p_VertexCount,) p n
(734) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_BYTE *p_pVertices, ) p
(const) K
( ZED_MEMSIZE p_pIndexCount,) p n
(735) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_UINT16 *p_pIndices, ) p
(const) K
( ZED_UINT64 p_Attributes,) p n
(736) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_UINT32 p_MaterialID \)) p n
(737) # () S 4 T () S 8 T ({) N
(738) # () S 4 T () S 8 T () S 12 T (m_pVertexCacheManager->Render\( p_VertexCount, p_pVertices,) N
(739) # () S 4 T () S 8 T () S 12 T () S 16 T (p_pIndexCount, p_pIndices, p_Attributes, p_MaterialID \);) N
(740) # () S
(//) c 4 T () S 8 T () S 12 T (m_pVertexCacheManager->ForceFlushAll\( \);) N
(741) # () N
(742) # () S
() p 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(743) # () S 4 T () S 8 T (}) N
(744) # () N
(745) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::SetDisplay\( Display *p_pDisplay \)) N
(746) # () S 4 T () S 8 T ({) N
(747) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(In SetDisplay\\n) str
(" \);) p n
(748) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(p_pDisplay: %X\\n) str
(", p_pDisplay \);) p n
(749) # () S 4 T () S 8 T () S 12 T () S
(// Memory leaking ahoy!) c n
(750) # () S
() p 4 T () S 8 T () S 12 T () S
(if) K
(\( m_pDisplay != ZED_NULL \)) p n
(751) # () S 4 T () S 8 T () S 12 T ({) N
(752) # () S 4 T () S 8 T () S 12 T () S 16 T (zedTrace\( ") S
(Deleting m_pDisplay\\n) str
(" \);) p n
(753) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(delete) K
( m_pDisplay;) p n
(754) # () S 4 T () S 8 T () S 12 T () S 16 T (m_pDisplay = ZED_NULL;) N
(755) # () S 4 T () S 8 T () S 12 T (}) N
(756) # () N
(757) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(Assigning p_pDisplay to m_pDisplay\\n) str
(" \);) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 11/13) (Feb 07, 12 22:13) title
border
/v 1 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(758) # () p 4 T () S 8 T () S 12 T (m_pDisplay = p_pDisplay;) N
(759) # () S 4 T () S 8 T () S 12 T (zedTrace\( ") S
(m_pDisplay: %x\\np_pDisplay: %x\\n) str
(", m_pDisplay, p_pDisplay \);) p n
(760) # () N
(761) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(762) # () S 4 T () S 8 T (}) N
(763) # () N
(764) # () S 4 T () S 8 T (ZED_UINT32 LinuxRendererOGL3::Create\( GraphicsAdapter *p_pAdapter,) N
(765) # () S 4 T () S 8 T () S 12 T () S
(const) K
( CanvasDescription &p_Canvas,) p n
(766) # () S 4 T () S 8 T () S 12 T (Display *p_pDisplay \)) N
(767) # () S 4 T () S 8 T ({) N
(768) # () S 4 T () S 8 T () S 12 T (SetDisplay\( p_pDisplay \);) N
(769) # () S 4 T () S 8 T () S 12 T (Create\( p_pAdapter, p_Canvas \);) N
(770) # () S 4 T () S 8 T () S 12 T () S
(return) K
( ZED_OK;) p n
(771) # () S 4 T () S 8 T (}) N
(772) # () N
(773) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::GetWVP\( Arithmetic::Matrix4x4 *p_pMatrix \)) p n
(774) # () S 4 T () S 8 T ({) N
(775) # () S 4 T () S 8 T () S 12 T (p_pMatrix->Copy\( m_View3D \);) N
(776) # () S 4 T () S 8 T (}) N
(777) # () N
(778) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::GetVP\( Arithmetic::Matrix4x4 *p_pMatrix \)) p n
(779) # () S 4 T () S 8 T ({) N
(780) # () S 4 T () S 8 T () S 12 T (p_pMatrix->Copy\( m_ViewProjection \);) N
(781) # () S 4 T () S 8 T (}) N
(782) # () N
(783) # () S 4 T () S 8 T () S
(void) k
( LinuxRendererOGL3::SetRenderState\( ) p
(const) K
( ZED_RENDERSTATE p_State,) p n
(784) # () S 4 T () S 8 T () S 12 T () S
(const) K
( ZED_MEMSIZE p_Value \)) p n
(785) # () S 4 T () S 8 T ({) N
(786) # () S 4 T () S 8 T () S 12 T () S
(// Determine the type and set the RS) c n
(787) # () S
() p 4 T () S 8 T () S 12 T () S
(// Any fixed function states are not checked) c n
(788) # () S
() p 4 T () S 8 T () S 12 T () S
(switch) K
(\( p_State \)) p n
(789) # () S 4 T () S 8 T () S 12 T ({) N
(790) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( ZED_RS_DEPTH:) p n
(791) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(792) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(switch) K
(\( p_Value \)) p n
(793) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(794) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(case) K
( ZED_ENABLE:) p n
(795) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(796) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglEnable\( GL_DEPTH \);) N
(797) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(798) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(case) K
( ZED_DISABLE:) p n
(799) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(800) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglDisable\( GL_DEPTH \);) N
(801) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(802) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(803) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(804) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(805) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(case) K
( ZED_RS_CULLMODE:) p n
(806) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(807) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(switch) K
(\( p_Value \)) p n
(808) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T ({) N
(809) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(case) K
( ZEDCULL_NONE:) p n
(810) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(811) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglDisable\( GL_CULL_FACE \);) N
(812) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(813) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(case) K
( ZEDCULL_CCW:) p n
(814) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(815) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglEnable\( GL_CULL_FACE \);) N
(816) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglFrontFace\( GL_CCW \);) N
(817) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglCullFace\( GL_FRONT \);) N
(818) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(819) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S
(case) K
( ZEDCULL_CW:) p n
(820) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T ({) N
(821) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglEnable\( GL_CULL_FACE \);) N
(822) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglFrontFace\( GL_CW \);) N
(823) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T () S 28 T (zglCullFace\( GL_FRONT \);) N
(824) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S 24 T (}) N
(825) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T (}) N
(826) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 12/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage
%%Page: (13) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 0 add translate
/v 0 store
/x0 x v get 3.167824 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(827) # () p 4 T () S 8 T () S 12 T () S 16 T (}) N
(828) # () S 4 T () S 8 T () S 12 T () S 16 T () S
(default) K
(:) p n
(829) # () S 4 T () S 8 T () S 12 T () S 16 T ({) N
(830) # () S 4 T () S 8 T () S 12 T () S 16 T () S 20 T () S
(break) K
(;) p n
(831) # () S 4 T () S 8 T () S 12 T () S 16 T (}) N
(832) # () S 4 T () S 8 T () S 12 T (}) N
(833) # () S 4 T () S 8 T (}) N
(834) # () S 4 T (}) N
(835) # (}) N
(836) # () N
([ ZED::Renderer::LinuxRendererOGL3.cpp ]) (Page 13/13) (Feb 07, 12 22:13) title
border
grestore
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
